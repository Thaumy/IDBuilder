{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Utilities\nimport { consoleWarn } from \"./console.mjs\";\nimport { chunk, padEnd } from \"./helpers.mjs\";\nimport * as sRGB from \"./color/transformSRGB.mjs\";\nimport * as CIELAB from \"./color/transformCIELAB.mjs\"; // Types\n\nexport function isCssColor(color) {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color);\n}\nexport function colorToInt(color) {\n  let rgb;\n\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    let c = color.startsWith('#') ? color.substring(1) : color;\n\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('');\n    }\n\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`);\n    }\n\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`);\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`);\n    rgb = 0xffffff;\n  }\n\n  return rgb;\n}\nexport function classToHex(color, colors, currentTheme) {\n  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);\n  let hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\nexport function intToHex(color) {\n  let hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport function HSVAtoRGBA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\n\nexport function RGBAtoHSVA(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVAtoHSLA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLAtoHSVA(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBAtoCSS(rgba) {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n}\nexport function RGBtoCSS(rgba) {\n  return RGBAtoCSS({ ...rgba,\n    a: 1\n  });\n}\nexport function RGBAtoHex(rgba) {\n  const toHex = v => {\n    const h = Math.round(v).toString(16);\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n  };\n\n  return `#${[toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join('')}`;\n}\nexport function HexToRGBA(hex) {\n  const rgba = chunk(hex.slice(1), 2).map(c => parseInt(c, 16));\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round(rgba[3] / 255 * 100) / 100\n  };\n}\nexport function HexToHSVA(hex) {\n  const rgb = HexToRGBA(hex);\n  return RGBAtoHSVA(rgb);\n}\nexport function HSVAtoHex(hsva) {\n  return RGBAtoHex(HSVAtoRGBA(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F');\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9);\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function RGBtoInt(rgba) {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;\n}\nexport function colorToRGB(color) {\n  const int = colorToInt(color);\n  return {\n    r: (int & 0xFF0000) >> 16,\n    g: (int & 0xFF00) >> 8,\n    b: int & 0xFF\n  };\n}\nexport function lighten(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value)); // TODO: why this false positive?\n  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\n\nexport function getLuma(color) {\n  const rgb = colorToInt(color);\n  return sRGB.toXYZ(rgb)[1];\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\n\nexport function getContrast(first, second) {\n  const l1 = getLuma(first);\n  const l2 = getLuma(second);\n  const light = Math.max(l1, l2);\n  const dark = Math.min(l1, l2);\n  return (light + 0.05) / (dark + 0.05);\n}","map":{"version":3,"mappings":"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","names":["consoleWarn","chunk","padEnd","sRGB","CIELAB","isCssColor","color","test","colorToInt","rgb","c","startsWith","substring","length","split","map","char","join","parseInt","TypeError","constructor","name","isNaN","classToHex","colors","currentTheme","colorName","colorModifier","toString","trim","replace","hexColor","base","intToHex","repeat","colorToHex","HSVAtoRGBA","hsva","h","s","v","a","f","n","k","Math","max","min","round","r","g","b","RGBAtoHSVA","rgba","hsv","HSVAtoHSLA","l","sprime","HSLAtoHSVA","hsl","RGBAtoCSS","RGBtoCSS","RGBAtoHex","toHex","substr","toUpperCase","HexToRGBA","hex","slice","HexToHSVA","HSVAtoHex","parseHex","x","parseGradient","gradient","Object","values","RGBtoInt","colorToRGB","int","lighten","value","amount","lab","fromXYZ","toXYZ","darken","getLuma","getContrast","first","second","l1","l2","light","dark"],"sources":["../../src/util/colorUtils.ts"],"sourcesContent":["// Utilities\nimport { consoleWarn } from './console'\nimport { chunk, padEnd } from './helpers'\nimport * as sRGB from '@/util/color/transformSRGB'\nimport * as CIELAB from '@/util/color/transformCIELAB'\n\n// Types\nimport type { ThemeDefinition } from '@/composables/theme'\n\nexport type ColorInt = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number }\nexport type HSVA = HSV & { a: number }\nexport type RGB = { r: number, g: number, b: number }\nexport type RGBA = RGB & { a: number }\nexport type HSL = { h: number, s: number, l: number }\nexport type HSLA = HSL & { a: number }\nexport type Hex = string\nexport type Hexa = string\nexport type Color = string | number | {}\n\nexport function isCssColor (color?: string | null | false): boolean {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color)\n}\n\nexport function colorToInt (color: Color): ColorInt {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color.startsWith('#') ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function classToHex (\n  color: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<ThemeDefinition['colors']>,\n): string {\n  const [colorName, colorModifier] = color\n    .toString().trim().replace('-', '').split(' ', 2) as (string | undefined)[]\n\n  let hexColor = ''\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier]\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName] as string\n  }\n\n  return hexColor\n}\n\nexport function intToHex (color: ColorInt): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n\nexport function colorToHex (color: Color): string {\n  return intToHex(colorToInt(color))\n}\n\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\nexport function HSVAtoRGBA (hsva: HSVA): RGBA {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\nexport function RGBAtoHSVA (rgba: RGBA): HSVA {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVAtoHSLA (hsva: HSVA): HSLA {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLAtoHSVA (hsl: HSLA): HSVA {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBAtoCSS (rgba: RGBA): string {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`\n}\n\nexport function RGBtoCSS (rgba: RGBA): string {\n  return RGBAtoCSS({ ...rgba, a: 1 })\n}\n\nexport function RGBAtoHex (rgba: RGBA): Hex {\n  const toHex = (v: number) => {\n    const h = Math.round(v).toString(16)\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n  }\n\n  return `#${[\n    toHex(rgba.r),\n    toHex(rgba.g),\n    toHex(rgba.b),\n    toHex(Math.round(rgba.a * 255)),\n  ].join('')}`\n}\n\nexport function HexToRGBA (hex: Hex): RGBA {\n  const rgba = chunk(hex.slice(1), 2).map((c: string) => parseInt(c, 16))\n\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round((rgba[3] / 255) * 100) / 100,\n  }\n}\n\nexport function HexToHSVA (hex: Hex): HSVA {\n  const rgb = HexToRGBA(hex)\n  return RGBAtoHSVA(rgb)\n}\n\nexport function HSVAtoHex (hsva: HSVA): Hex {\n  return RGBAtoHex(HSVAtoRGBA(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F')\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9)\n}\n\nexport function parseGradient (\n  gradient: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<ThemeDefinition['colors']>,\n) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',')\n  })\n}\n\nexport function RGBtoInt (rgba: RGBA): ColorInt {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b\n}\n\nexport function colorToRGB (color: string) {\n  const int = colorToInt(color)\n\n  return {\n    r: (int & 0xFF0000) >> 16,\n    g: (int & 0xFF00) >> 8,\n    b: (int & 0xFF),\n  }\n}\n\nexport function lighten (value: ColorInt, amount: number): ColorInt {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  // TODO: why this false positive?\n  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n  lab[0] = lab[0] + amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\nexport function darken (value: ColorInt, amount: number): ColorInt {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function getLuma (color: Color) {\n  const rgb = colorToInt(color)\n\n  return sRGB.toXYZ(rgb)[1]\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function getContrast (first: Color, second: Color) {\n  const l1 = getLuma(first)\n  const l2 = getLuma(second)\n\n  const light = Math.max(l1, l2)\n  const dark = Math.min(l1, l2)\n\n  return (light + 0.05) / (dark + 0.05)\n}\n"]},"metadata":{},"sourceType":"module"}