{"ast":null,"code":"// Styles\nimport \"./VGrid.css\"; // Composables\n\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { capitalize, computed, h } from 'vue';\nimport { defineComponent } from \"../../util/index.mjs\"; // Types\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl']; // no xs\n\nconst ALIGNMENT = ['start', 'end', 'center'];\n\nfunction makeRowProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + capitalize(val)] = def();\n    return props;\n  }, {});\n}\n\nconst alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);\n\nconst alignProps = makeRowProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\n\nconst justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);\n\nconst justifyProps = makeRowProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\n\nconst alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);\n\nconst alignContentProps = makeRowProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n\n  if (val == null) {\n    return undefined;\n  }\n\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nexport const VRow = defineComponent({\n  name: 'VRow',\n  props: {\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator\n    },\n    ...alignContentProps,\n    ...makeTagProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const classes = computed(() => {\n      const classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      return classList;\n    });\n    return () => {\n      var _slots$default;\n\n      return h(props.tag, {\n        class: ['v-row', classes.value]\n      }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeTagProps","capitalize","computed","h","defineComponent","breakpoints","ALIGNMENT","makeRowProps","prefix","def","reduce","props","val","alignValidator","str","includes","alignProps","type","String","default","validator","justifyValidator","justifyProps","alignContentValidator","alignContentProps","propMap","align","Object","keys","justify","alignContent","classMap","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","VRow","name","dense","Boolean","noGutters","setup","slots","_ref","classes","classList","forEach","value","push","tag","class","_slots$default"],"sources":["../../../src/components/VGrid/VRow.ts"],"sourcesContent":["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { defineComponent } from '@/util'\n\n// Types\nimport type { Prop } from 'vue'\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl'] as const // no xs\n\nconst ALIGNMENT = ['start', 'end', 'center'] as const\n\nfunction makeRowProps (prefix: string, def: () => Prop<string, null>) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + capitalize(val)] = def()\n    return props\n  }, {} as Dictionary<Prop<string, null>>)\n}\n\nconst alignValidator = (str: any) => [...ALIGNMENT, 'baseline', 'stretch'].includes(str)\nconst alignProps = makeRowProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst justifyValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around'].includes(str)\nconst justifyProps = makeRowProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst alignContentValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str)\nconst alignContentProps = makeRowProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nexport const VRow = defineComponent({\n  name: 'VRow',\n\n  props: {\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator,\n    },\n    ...alignContentProps,\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: ['v-row', classes.value],\n    }, slots.default?.())\n  },\n})\n"]},"metadata":{},"sourceType":"module"}