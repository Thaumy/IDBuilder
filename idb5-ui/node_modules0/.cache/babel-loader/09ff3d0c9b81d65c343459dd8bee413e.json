{"ast":null,"code":"export const classicActiveStrategy = single => {\n  return _ref => {\n    let {\n      id,\n      value,\n      active\n    } = _ref;\n    const newActive = single ? new Set() : active;\n\n    if (value) {\n      newActive.add(id);\n    } else {\n      newActive.delete(id);\n    }\n\n    return newActive;\n  };\n};","map":{"version":3,"mappings":"AASA,OAAO,MAAMA,qBAAqB,GAAIC,MAAD,IAAwC;AAC3E,SAAOC,QAA2B;AAAA,QAA1B;AAAEC,QAAF;AAAMC,WAAN;AAAaC;AAAb,QAA0BH;AAChC,UAAMI,SAAsB,GAAGL,MAAM,GAAG,IAAIM,GAAJ,EAAH,GAAeF,MAApD;;AAEA,QAAID,KAAJ,EAAW;AACTE,eAAS,CAACE,GAAVF,CAAcH,EAAdG;AADF,WAEO;AACLA,eAAS,CAACG,MAAVH,CAAiBH,EAAjBG;AACD;;AAED,WAAOA,SAAP;AATF;AADK","names":["classicActiveStrategy","single","_ref","id","value","active","newActive","Set","add","delete"],"sources":["../../../src/composables/nested/activeStrategies.ts"],"sourcesContent":["export type ActiveStrategyFn = (data: {\n  id: string\n  value: boolean\n  active: Set<string>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Set<string>\n\nexport const classicActiveStrategy = (single?: boolean): ActiveStrategyFn => {\n  return ({ id, value, active }) => {\n    const newActive: Set<string> = single ? new Set() : active\n\n    if (value) {\n      newActive.add(id)\n    } else {\n      newActive.delete(id)\n    }\n\n    return newActive\n  }\n}\n"]},"metadata":{},"sourceType":"module"}