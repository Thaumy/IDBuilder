{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { computed, inject, provide } from 'vue';\nimport { consoleError, consoleWarn, getObjectValueByPath, wrapInRef } from \"../util/index.mjs\";\nimport en from \"../locale/en.mjs\"; // Types\n\nexport const LocaleAdapterSymbol = Symbol.for('vuetify:locale-adapter');\nexport const VuetifyLocaleSymbol = Symbol.for('vuetify:locale');\nexport function provideLocale(props) {\n  const adapter = inject(LocaleAdapterSymbol);\n  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');\n  return adapter.createScope(props);\n}\nexport function useLocale() {\n  const adapter = inject(LocaleAdapterSymbol);\n  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');\n  return adapter.getScope();\n}\n\nfunction isLocaleAdapter(x) {\n  return !!x && x.hasOwnProperty('getScope') && x.hasOwnProperty('createScope') && x.hasOwnProperty('createRoot');\n}\n\nexport function createLocaleAdapter(app, options) {\n  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);\n  const rootInstance = adapter.createRoot(app);\n  return {\n    adapter,\n    rootInstance\n  };\n}\nconst LANG_PREFIX = '$vuetify.';\n\nconst replace = (str, params) => {\n  return str.replace(/\\{(\\d+)\\}/g, (match, index) => {\n    /* istanbul ignore next */\n    return String(params[+index]);\n  });\n};\n\nconst createTranslateFunction = (current, fallback, messages) => {\n  return function (key) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    if (!key.startsWith(LANG_PREFIX)) {\n      return replace(key, params);\n    }\n\n    const shortKey = key.replace(LANG_PREFIX, '');\n    const currentLocale = current.value && messages.value[current.value];\n    const fallbackLocale = fallback.value && messages.value[fallback.value];\n    let str = getObjectValueByPath(currentLocale, shortKey, null);\n\n    if (!str) {\n      consoleWarn(`Translation key \"${key}\" not found in \"${current.value}\", trying fallback locale`);\n      str = getObjectValueByPath(fallbackLocale, shortKey, null);\n    }\n\n    if (!str) {\n      consoleError(`Translation key \"${key}\" not found in fallback`);\n      str = key;\n    }\n\n    if (typeof str !== 'string') {\n      consoleError(`Translation key \"${key}\" has a non-string value`);\n      str = key;\n    }\n\n    return replace(str, params);\n  };\n};\n\nfunction createNumberFunction(current, fallback) {\n  return (value, options) => {\n    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options);\n    return numberFormat.format(value);\n  };\n}\n\nexport function createDefaultLocaleAdapter(options) {\n  const createScope = options => {\n    const current = wrapInRef(options.current);\n    const fallback = wrapInRef(options.fallback);\n    const messages = wrapInRef(options.messages);\n    return {\n      current,\n      fallback,\n      messages,\n      t: createTranslateFunction(current, fallback, messages),\n      n: createNumberFunction(current, fallback)\n    };\n  };\n\n  return {\n    createRoot: app => {\n      var _options$defaultLocal, _options$fallbackLoca, _options$messages;\n\n      const rootScope = createScope({\n        current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : 'en',\n        fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : 'en',\n        messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {\n          en\n        }\n      });\n      app.provide(VuetifyLocaleSymbol, rootScope);\n      return rootScope;\n    },\n    getScope: () => {\n      const currentScope = inject(VuetifyLocaleSymbol);\n      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');\n      return currentScope;\n    },\n    createScope: options => {\n      const currentScope = inject(VuetifyLocaleSymbol);\n      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');\n      const newScope = createScope({\n        current: computed(() => {\n          var _options$locale;\n\n          return (_options$locale = options == null ? void 0 : options.locale) != null ? _options$locale : currentScope.current.value;\n        }),\n        fallback: computed(() => {\n          var _options$locale2;\n\n          return (_options$locale2 = options == null ? void 0 : options.locale) != null ? _options$locale2 : currentScope.fallback.value;\n        }),\n        messages: computed(() => {\n          var _options$messages2;\n\n          return (_options$messages2 = options == null ? void 0 : options.messages) != null ? _options$messages2 : currentScope.messages.value;\n        })\n      });\n      provide(VuetifyLocaleSymbol, newScope);\n      return newScope;\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["computed","inject","provide","consoleError","consoleWarn","getObjectValueByPath","wrapInRef","en","LocaleAdapterSymbol","Symbol","for","VuetifyLocaleSymbol","provideLocale","props","adapter","Error","createScope","useLocale","getScope","isLocaleAdapter","x","hasOwnProperty","createLocaleAdapter","app","options","createDefaultLocaleAdapter","rootInstance","createRoot","LANG_PREFIX","replace","str","params","match","index","String","createTranslateFunction","current","fallback","messages","key","arguments","startsWith","shortKey","currentLocale","value","fallbackLocale","createNumberFunction","numberFormat","Intl","NumberFormat","format","t","n","rootScope","defaultLocale","currentScope","newScope","locale"],"sources":["../../src/composables/locale.ts"],"sourcesContent":["import { computed, inject, provide } from 'vue'\nimport { consoleError, consoleWarn, getObjectValueByPath, wrapInRef } from '@/util'\n\nimport en from '@/locale/en'\n\n// Types\nimport type { App, InjectionKey, Ref } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport interface LocaleMessages {\n  [key: string]: LocaleMessages | string\n}\n\nexport interface LocaleOptions {\n  defaultLocale?: string\n  fallbackLocale?: string\n  messages?: LocaleMessages\n}\n\nexport interface LocaleProps {\n  locale?: string\n  fallbackLocale?: string\n  messages?: LocaleMessages\n}\n\nexport interface LocaleInstance {\n  current: Ref<string>\n  fallback: Ref<string>\n  messages: Ref<LocaleMessages>\n  t: (key: string, ...params: unknown[]) => string\n  n: (value: number) => string\n}\n\nexport interface LocaleAdapter {\n  createRoot: (app: App) => LocaleInstance\n  getScope: () => LocaleInstance\n  createScope: (options?: LocaleProps) => LocaleInstance\n}\n\nexport const LocaleAdapterSymbol: InjectionKey<LocaleAdapter> = Symbol.for('vuetify:locale-adapter')\nexport const VuetifyLocaleSymbol: InjectionKey<LocaleInstance> = Symbol.for('vuetify:locale')\n\nexport function provideLocale (props?: LocaleProps) {\n  const adapter = inject(LocaleAdapterSymbol)\n\n  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter')\n\n  return adapter.createScope(props)\n}\n\nexport function useLocale () {\n  const adapter = inject(LocaleAdapterSymbol)\n\n  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter')\n\n  return adapter.getScope()\n}\n\nfunction isLocaleAdapter (x: any): x is LocaleAdapter {\n  return !!x && x.hasOwnProperty('getScope') && x.hasOwnProperty('createScope') && x.hasOwnProperty('createRoot')\n}\n\nexport function createLocaleAdapter (app: App, options?: LocaleOptions | LocaleAdapter) {\n  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options)\n\n  const rootInstance = adapter.createRoot(app)\n\n  return { adapter, rootInstance }\n}\n\nconst LANG_PREFIX = '$vuetify.'\n\nconst replace = (str: string, params: unknown[]) => {\n  return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n    /* istanbul ignore next */\n    return String(params[+index])\n  })\n}\n\nconst createTranslateFunction = (\n  current: Ref<string>,\n  fallback: Ref<string>,\n  messages: Ref<LocaleMessages>,\n) => {\n  return (key: string, ...params: unknown[]) => {\n    if (!key.startsWith(LANG_PREFIX)) {\n      return replace(key, params)\n    }\n\n    const shortKey = key.replace(LANG_PREFIX, '')\n    const currentLocale = current.value && messages.value[current.value]\n    const fallbackLocale = fallback.value && messages.value[fallback.value]\n\n    let str: string = getObjectValueByPath(currentLocale, shortKey, null)\n\n    if (!str) {\n      consoleWarn(`Translation key \"${key}\" not found in \"${current.value}\", trying fallback locale`)\n      str = getObjectValueByPath(fallbackLocale, shortKey, null)\n    }\n\n    if (!str) {\n      consoleError(`Translation key \"${key}\" not found in fallback`)\n      str = key\n    }\n\n    if (typeof str !== 'string') {\n      consoleError(`Translation key \"${key}\" has a non-string value`)\n      str = key\n    }\n\n    return replace(str, params)\n  }\n}\n\nfunction createNumberFunction (current: Ref<string>, fallback: Ref<string>) {\n  return (value: number, options?: Intl.NumberFormatOptions) => {\n    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options)\n\n    return numberFormat.format(value)\n  }\n}\n\nexport function createDefaultLocaleAdapter (options?: LocaleOptions): LocaleAdapter {\n  const createScope = (options: {\n    current: MaybeRef<string>\n    fallback: MaybeRef<string>\n    messages: MaybeRef<LocaleMessages>\n  }) => {\n    const current = wrapInRef(options.current)\n    const fallback = wrapInRef(options.fallback)\n    const messages = wrapInRef(options.messages)\n\n    return {\n      current,\n      fallback,\n      messages,\n      t: createTranslateFunction(current, fallback, messages),\n      n: createNumberFunction(current, fallback),\n    }\n  }\n\n  return {\n    createRoot: app => {\n      const rootScope = createScope({\n        current: options?.defaultLocale ?? 'en',\n        fallback: options?.fallbackLocale ?? 'en',\n        messages: options?.messages ?? { en },\n      })\n\n      app.provide(VuetifyLocaleSymbol, rootScope)\n\n      return rootScope\n    },\n    getScope: () => {\n      const currentScope = inject(VuetifyLocaleSymbol)\n\n      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance')\n\n      return currentScope\n    },\n    createScope: options => {\n      const currentScope = inject(VuetifyLocaleSymbol)\n\n      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance')\n\n      const newScope = createScope({\n        current: computed(() => options?.locale ?? currentScope.current.value),\n        fallback: computed(() => options?.locale ?? currentScope.fallback.value),\n        messages: computed(() => options?.messages ?? currentScope.messages.value),\n      })\n\n      provide(VuetifyLocaleSymbol, newScope)\n\n      return newScope\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}