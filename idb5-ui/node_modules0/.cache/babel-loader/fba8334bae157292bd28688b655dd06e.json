{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VCard.css\"; // Components\n\nimport { VAvatar } from \"../VAvatar/index.mjs\";\nimport { VImg } from \"../VImg/index.mjs\";\nimport { VCardActions } from \"./VCardActions.mjs\";\nimport { VCardAvatar } from \"./VCardAvatar.mjs\";\nimport { VCardHeader } from \"./VCardHeader.mjs\";\nimport { VCardHeaderText } from \"./VCardHeaderText.mjs\";\nimport { VCardImg } from \"./VCardImg.mjs\";\nimport { VCardSubtitle } from \"./VCardSubtitle.mjs\";\nimport { VCardText } from \"./VCardText.mjs\";\nimport { VCardTitle } from \"./VCardTitle.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeRouterProps, useLink } from \"../../composables/router.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.mjs\";\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\n\nimport { defineComponent } from \"../../util/index.mjs\";\nexport const VCard = defineComponent({\n  name: 'VCard',\n  directives: {\n    Ripple\n  },\n  props: {\n    appendAvatar: String,\n    appendIcon: String,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    image: String,\n    link: Boolean,\n    prependAvatar: String,\n    prependIcon: String,\n    ripple: Boolean,\n    subtitle: String,\n    text: String,\n    title: String,\n    ...makeThemeProps(),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeTagProps(),\n    ...makeVariantProps({\n      variant: 'contained'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = useTheme(props);\n    const {\n      borderClasses\n    } = useBorder(props, 'v-card');\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props, 'v-card');\n    const {\n      densityClasses\n    } = useDensity(props, 'v-card');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      positionClasses,\n      positionStyles\n    } = usePosition(props, 'v-card');\n    const {\n      roundedClasses\n    } = useRounded(props, 'v-card');\n    const link = useLink(props, attrs);\n    return () => {\n      var _slots$image, _slots$media, _slots$default;\n\n      const Tag = link.isLink.value ? 'a' : props.tag;\n      const hasTitle = !!(slots.title || props.title);\n      const hasSubtitle = !!(slots.subtitle || props.subtitle);\n      const hasHeaderText = hasTitle || hasSubtitle;\n      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);\n      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);\n      const hasImage = !!(slots.image || props.image);\n      const hasHeader = hasHeaderText || hasPrepend || hasAppend;\n      const hasText = !!(slots.text || props.text);\n      const isClickable = !props.disabled && (link.isClickable.value || props.link);\n      return _withDirectives(_createVNode(Tag, {\n        \"class\": ['v-card', {\n          'v-card--disabled': props.disabled,\n          'v-card--flat': props.flat,\n          'v-card--hover': props.hover && !(props.disabled || props.flat),\n          'v-card--link': isClickable\n        }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],\n        \"style\": [colorStyles.value, dimensionStyles.value, positionStyles.value],\n        \"href\": link.href.value,\n        \"onClick\": isClickable && link.navigate\n      }, {\n        default: () => [genOverlays(isClickable, 'v-card'), hasImage && _createVNode(VCardImg, null, {\n          default: () => [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots, {\n            src: props.image\n          }) : _createVNode(VImg, {\n            \"src\": props.image,\n            \"cover\": true,\n            \"alt\": \"\"\n          }, null, 8, [\"src\", \"cover\"])]\n        }), (_slots$media = slots.media) == null ? void 0 : _slots$media.call(slots), hasHeader && _createVNode(VCardHeader, null, {\n          default: () => [hasPrepend && _createVNode(VCardAvatar, null, {\n            default: () => [slots.prepend ? slots.prepend() : _createVNode(VAvatar, {\n              \"density\": props.density,\n              \"icon\": props.prependIcon,\n              \"image\": props.prependAvatar\n            }, null, 8, [\"density\", \"icon\", \"image\"])]\n          }), hasHeaderText && _createVNode(VCardHeaderText, null, {\n            default: () => [hasTitle && _createVNode(VCardTitle, null, {\n              default: () => [slots.title ? slots.title() : props.title]\n            }), _createVNode(VCardSubtitle, null, {\n              default: () => [slots.subtitle ? slots.subtitle() : props.subtitle]\n            })],\n            _: 1\n          }), hasAppend && _createVNode(VCardAvatar, null, {\n            default: () => [slots.append ? slots.append() : _createVNode(VAvatar, {\n              \"density\": props.density,\n              \"icon\": props.appendIcon,\n              \"image\": props.appendAvatar\n            }, null, 8, [\"density\", \"icon\", \"image\"])]\n          })],\n          _: 1\n        }), hasText && _createVNode(VCardText, null, {\n          default: () => [slots.text ? slots.text() : props.text]\n        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.actions && _createVNode(VCardActions, null, {\n          default: slots.actions\n        })],\n        _: 1\n      }, 8, [\"class\", \"style\", \"href\", \"onClick\"]), [[_resolveDirective(\"ripple\"), isClickable]]);\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VAvatar","VImg","VCardActions","VCardAvatar","VCardHeader","VCardHeaderText","VCardImg","VCardSubtitle","VCardText","VCardTitle","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeRouterProps","useLink","makeTagProps","makeThemeProps","useTheme","genOverlays","makeVariantProps","useVariant","Ripple","defineComponent","VCard","name","directives","props","appendAvatar","String","appendIcon","disabled","Boolean","flat","hover","image","link","prependAvatar","prependIcon","ripple","subtitle","text","title","variant","setup","attrs","slots","_ref","themeClasses","borderClasses","colorClasses","colorStyles","variantClasses","densityClasses","dimensionStyles","elevationClasses","positionClasses","positionStyles","roundedClasses","Tag","isLink","value","tag","hasTitle","hasSubtitle","hasHeaderText","hasAppend","append","hasPrepend","prepend","hasImage","hasHeader","hasText","isClickable","href","navigate","default","_slots$image","src","media","_slots$media","density","_","_slots$default","actions"],"sources":["../../../src/components/VCard/VCard.tsx"],"sourcesContent":["// Styles\nimport './VCard.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VImg } from '@/components/VImg'\nimport { VCardActions } from './VCardActions'\nimport { VCardAvatar } from './VCardAvatar'\nimport { VCardHeader } from './VCardHeader'\nimport { VCardHeaderText } from './VCardHeaderText'\nimport { VCardImg } from './VCardImg'\nimport { VCardSubtitle } from './VCardSubtitle'\nimport { VCardText } from './VCardText'\nimport { VCardTitle } from './VCardTitle'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { defineComponent } from '@/util'\n\nexport const VCard = defineComponent({\n  name: 'VCard',\n\n  directives: { Ripple },\n\n  props: {\n    appendAvatar: String,\n    appendIcon: String,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    image: String,\n    link: Boolean,\n    prependAvatar: String,\n    prependIcon: String,\n    ripple: Boolean,\n    subtitle: String,\n    text: String,\n    title: String,\n\n    ...makeThemeProps(),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeTagProps(),\n    ...makeVariantProps({ variant: 'contained' } as const),\n  },\n\n  setup (props, { attrs, slots }) {\n    const { themeClasses } = useTheme(props)\n    const { borderClasses } = useBorder(props, 'v-card')\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props, 'v-card')\n    const { densityClasses } = useDensity(props, 'v-card')\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { positionClasses, positionStyles } = usePosition(props, 'v-card')\n    const { roundedClasses } = useRounded(props, 'v-card')\n    const link = useLink(props, attrs)\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasTitle = !!(slots.title || props.title)\n      const hasSubtitle = !!(slots.subtitle || props.subtitle)\n      const hasHeaderText = hasTitle || hasSubtitle\n      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon)\n      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon)\n      const hasImage = !!(slots.image || props.image)\n      const hasHeader = hasHeaderText || hasPrepend || hasAppend\n      const hasText = !!(slots.text || props.text)\n      const isClickable = !props.disabled && (link.isClickable.value || props.link)\n\n      return (\n        <Tag\n          class={[\n            'v-card',\n            {\n              'v-card--disabled': props.disabled,\n              'v-card--flat': props.flat,\n              'v-card--hover': props.hover && !(props.disabled || props.flat),\n              'v-card--link': isClickable,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            colorClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n          ]}\n          style={[\n            colorStyles.value,\n            dimensionStyles.value,\n            positionStyles.value,\n          ]}\n          href={ link.href.value }\n          onClick={ isClickable && link.navigate }\n          v-ripple={ isClickable }\n        >\n          { genOverlays(isClickable, 'v-card') }\n\n          { hasImage && (\n            <VCardImg>\n              { slots.image\n                ? slots.image?.({ src: props.image })\n                : (<VImg src={ props.image } cover alt=\"\" />)\n              }\n            </VCardImg>\n          ) }\n\n          { slots.media?.() }\n\n          { hasHeader && (\n            <VCardHeader>\n              { hasPrepend && (\n                <VCardAvatar>\n                  { slots.prepend\n                    ? slots.prepend()\n                    : (\n                      <VAvatar\n                        density={ props.density }\n                        icon={ props.prependIcon }\n                        image={ props.prependAvatar }\n                      />\n                    )\n                  }\n                </VCardAvatar>\n              ) }\n\n              { hasHeaderText && (\n                <VCardHeaderText>\n                  { hasTitle && (\n                    <VCardTitle>\n                      { slots.title\n                        ? slots.title()\n                        : props.title\n                      }\n                    </VCardTitle>\n                  ) }\n\n                  <VCardSubtitle>\n                    { slots.subtitle\n                      ? slots.subtitle()\n                      : props.subtitle\n                    }\n                  </VCardSubtitle>\n                </VCardHeaderText>\n              ) }\n\n              { hasAppend && (\n                <VCardAvatar>\n                  { slots.append\n                    ? slots.append()\n                    : (\n                      <VAvatar\n                        density={ props.density }\n                        icon={ props.appendIcon }\n                        image={ props.appendAvatar }\n                      />\n                    )\n                  }\n                </VCardAvatar>\n              ) }\n            </VCardHeader>\n          ) }\n\n          { hasText && (\n            <VCardText>\n              { slots.text ? slots.text() : props.text }\n            </VCardText>\n          ) }\n\n          { slots.default?.() }\n\n          { slots.actions && (\n            <VCardActions v-slots={{ default: slots.actions }} />\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VCard = InstanceType<typeof VCard>\n"]},"metadata":{},"sourceType":"module"}