{"ast":null,"code":"export const singleOpenStrategy = _ref => {\n  let {\n    id,\n    value,\n    opened,\n    parents\n  } = _ref;\n\n  if (value) {\n    const newOpened = new Set();\n    newOpened.add(id);\n    let parent = parents.get(id);\n\n    while (parent != null) {\n      newOpened.add(parent);\n      parent = parents.get(parent);\n    }\n\n    return newOpened;\n  } else {\n    opened.delete(id);\n    return opened;\n  }\n};\nexport const multipleOpenStrategy = _ref2 => {\n  let {\n    id,\n    value,\n    opened,\n    parents\n  } = _ref2;\n\n  if (value) {\n    let parent = parents.get(id);\n    opened.add(id);\n\n    while (parent != null) {\n      opened.add(parent);\n      parent = parents.get(parent);\n    }\n\n    return opened;\n  } else {\n    opened.delete(id);\n  }\n\n  return opened;\n};","map":{"version":3,"mappings":"AASA,OAAO,MAAMA,kBAAkC,GAAGC,QAAoC;AAAA,MAAnC;AAAEC,MAAF;AAAMC,SAAN;AAAaC,UAAb;AAAqBC;AAArB,MAAmCJ;;AACpF,MAAIE,KAAJ,EAAW;AACT,UAAMG,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAD,aAAS,CAACE,GAAVF,CAAcJ,EAAdI;AAEA,QAAIG,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;;AAEA,WAAOI,MAAM,IAAI,IAAjB,EAAuB;AACrBH,eAAS,CAACE,GAAVF,CAAcG,MAAdH;AACAG,YAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACD;;AAED,WAAOH,SAAP;AAXF,SAYO;AACLF,UAAM,CAACO,MAAPP,CAAcF,EAAdE;AACA,WAAOA,MAAP;AACD;AAhBI;AAmBP,OAAO,MAAMQ,oBAAoC,GAAGC,SAAoC;AAAA,MAAnC;AAAEX,MAAF;AAAMC,SAAN;AAAaC,UAAb;AAAqBC;AAArB,MAAmCQ;;AACtF,MAAIV,KAAJ,EAAW;AACT,QAAIM,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;AACAD,UAAM,CAACI,GAAPJ,CAAWF,EAAXE;;AAEA,WAAOK,MAAM,IAAI,IAAjB,EAAuB;AACrBL,YAAM,CAACI,GAAPJ,CAAWK,MAAXL;AACAK,YAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACD;;AAED,WAAOL,MAAP;AATF,SAUO;AACLA,UAAM,CAACO,MAAPP,CAAcF,EAAdE;AACD;;AACD,SAAOA,MAAP;AAdK","names":["singleOpenStrategy","_ref","id","value","opened","parents","newOpened","Set","add","parent","get","delete","multipleOpenStrategy","_ref2"],"sources":["../../../src/composables/nested/openStrategies.ts"],"sourcesContent":["export type OpenStrategyFn = (data: {\n  id: string\n  value: boolean\n  opened: Set<string>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Set<string>\n\nexport const singleOpenStrategy: OpenStrategyFn = ({ id, value, opened, parents }) => {\n  if (value) {\n    const newOpened = new Set<string>()\n    newOpened.add(id)\n\n    let parent = parents.get(id)\n\n    while (parent != null) {\n      newOpened.add(parent)\n      parent = parents.get(parent)\n    }\n\n    return newOpened\n  } else {\n    opened.delete(id)\n    return opened\n  }\n}\n\nexport const multipleOpenStrategy: OpenStrategyFn = ({ id, value, opened, parents }) => {\n  if (value) {\n    let parent = parents.get(id)\n    opened.add(id)\n\n    while (parent != null) {\n      opened.add(parent)\n      parent = parents.get(parent)\n    }\n\n    return opened\n  } else {\n    opened.delete(id)\n  }\n  return opened\n}\n"]},"metadata":{},"sourceType":"module"}