{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VIcon.css\"; // Composables\n\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useIcon } from \"../../composables/icons.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { convertToUnit, defineComponent, flattenFragments } from \"../../util/index.mjs\"; // Types\n\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n  props: {\n    color: String,\n    left: Boolean,\n    right: Boolean,\n    icon: {\n      type: [String, Object]\n    },\n    ...makeSizeProps(),\n    ...makeTagProps({\n      tag: 'i'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    let slotIcon;\n\n    if (slots.default) {\n      slotIcon = computed(() => {\n        var _slots$default, _flattenFragments$fil;\n\n        const slot = (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n        if (!slot) return;\n        return (_flattenFragments$fil = flattenFragments(slot).filter(node => node.children && typeof node.children === 'string')[0]) == null ? void 0 : _flattenFragments$fil.children;\n      });\n    }\n\n    const {\n      iconData\n    } = useIcon(slotIcon || props);\n    const {\n      sizeClasses\n    } = useSize(props, 'v-icon');\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    return () => {\n      return _createVNode(iconData.value.component, {\n        \"tag\": props.tag,\n        \"icon\": iconData.value.icon,\n        \"class\": ['v-icon', 'notranslate', sizeClasses.value, textColorClasses.value, {\n          'v-icon--left': props.left,\n          'v-icon--right': props.right\n        }],\n        \"style\": [!sizeClasses.value ? {\n          fontSize: convertToUnit(props.size),\n          width: convertToUnit(props.size),\n          height: convertToUnit(props.size)\n        } : undefined, textColorStyles.value],\n        \"aria-hidden\": \"true\"\n      }, null, 8, [\"tag\", \"icon\", \"class\", \"style\"]);\n    };\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,qB,CAEA;;SACSA,eAAeC,e;SACfC,oB;SACAC,e;SACAC,oB,+BAET;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,eAAeC,iBAAiBC,wB,wBAEzC;;AAIA,OAAO,MAAMC,KAAK,GAAGF,eAAe,CAAC;AACnCG,MAAI,EAAE,OAD6B;AAGnCC,OAAK,EAAE;AACLC,SAAK,EAAEC,MADF;AAELC,QAAI,EAAEC,OAFD;AAGLC,SAAK,EAAED,OAHF;AAILE,QAAI,EAAE;AACJC,UAAI,EAAE,CAACL,MAAD,EAASM,MAAT;AADF,KAJD;AAOL,OAAGpB,aAAa,EAPX;AAQL,OAAGE,YAAY,CAAC;AAAEmB,SAAG,EAAE;AAAP,KAAD;AARV,GAH4B;;AAcnCC,OAAK,CAAEV,KAAF,QAAoB;AAAA,QAAX;AAAEW;AAAF,QAAWC;AACvB,QAAIC,QAAJ;;AACA,QAAIF,KAAK,CAACG,OAAV,EAAmB;AACjBD,cAAQ,GAAGpB,QAAQ,CAAC,MAAM;AAAA;;AACxB,cAAMsB,IAAI,qBAAGJ,KAAK,CAACG,OAAT,qBAAGE,0BAAb;AACA,YAAI,CAACD,IAAL,EAAW;AAEX,wCAAOlB,gBAAgB,CAACkB,IAAD,CAAhBlB,CAAuBoB,MAAvBpB,CAA8BqB,IAAI,IACvCA,IAAI,CAACC,QAALD,IAAiB,OAAOA,IAAI,CAACC,QAAZ,KAAyB,QADrCtB,EAEL,CAFKA,CAAP,qBAAOuB,sBAEDD,QAFN;AAJiB,QAAnBN;AAQD;;AAED,UAAM;AAAEQ;AAAF,QAAe9B,OAAO,CAACsB,QAAQ,IAAIb,KAAb,CAA5B;AACA,UAAM;AAAEsB;AAAF,QAAkBjC,OAAO,CAACW,KAAD,EAAQ,QAAR,CAA/B;AACA,UAAM;AAAEuB,sBAAF;AAAoBC;AAApB,QAAwChC,YAAY,CAACE,KAAK,CAACM,KAAD,EAAQ,OAAR,CAAN,CAA1D;AAEA,WAAO,MAAM;AACX;AAAA,eAEUA,KAAK,CAACS,GAFhB;AAAA,gBAGWY,QAAQ,CAACI,KAATJ,CAAef,IAH1B;AAAA,iBAIW,CACL,QADK,EAEL,aAFK,EAGLgB,WAAW,CAACG,KAHP,EAILF,gBAAgB,CAACE,KAJZ,EAKL;AACE,0BAAgBzB,KAAK,CAACG,IADxB;AAEE,2BAAiBH,KAAK,CAACK;AAFzB,SALK,CAJX;AAAA,iBAcW,CACL,CAACiB,WAAW,CAACG,KAAb,GAAsB;AACpBC,kBAAQ,EAAE/B,aAAa,CAACK,KAAK,CAAC2B,IAAP,CADH;AAEpBC,eAAK,EAAEjC,aAAa,CAACK,KAAK,CAAC2B,IAAP,CAFA;AAGpBE,gBAAM,EAAElC,aAAa,CAACK,KAAK,CAAC2B,IAAP;AAHD,SAAtB,GAIKG,SALA,EAMLN,eAAe,CAACC,KANX,CAdX;AAAA,uBAsBgB;AAtBhB;AADF;AA2BD;;AA1DkC,CAAD,CAA7B","names":["makeSizeProps","useSize","makeTagProps","useIcon","useTextColor","computed","toRef","convertToUnit","defineComponent","flattenFragments","VIcon","name","props","color","String","left","Boolean","right","icon","type","Object","tag","setup","slots","_ref","slotIcon","default","slot","_slots$default","filter","node","children","_flattenFragments$fil","iconData","sizeClasses","textColorClasses","textColorStyles","value","fontSize","size","width","height","undefined"],"sources":["../../../src/components/VIcon/VIcon.tsx"],"sourcesContent":["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { useIcon } from '@/composables/icons'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent, flattenFragments } from '@/util'\n\n// Types\nimport type { IconValue } from '@/composables/icons'\nimport type { ComputedRef, PropType } from 'vue'\n\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n\n  props: {\n    color: String,\n    left: Boolean,\n    right: Boolean,\n    icon: {\n      type: [String, Object] as PropType<IconValue>,\n    },\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'i' }),\n  },\n\n  setup (props, { slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return flattenFragments(slot).filter(node =>\n          node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props, 'v-icon')\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    return () => {\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--left': props.left,\n              'v-icon--right': props.right,\n            },\n          ]}\n          style={[\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n          ]}\n          aria-hidden=\"true\"\n        />\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}