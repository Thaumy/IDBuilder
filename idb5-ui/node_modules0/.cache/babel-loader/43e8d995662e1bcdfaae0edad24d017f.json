{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControlGroup.css\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, defineComponent, provide, toRef } from 'vue';\nimport { getUid, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');\nexport const VSelectionControlGroup = defineComponent({\n  name: 'VSelectionControlGroup',\n  props: {\n    disabled: Boolean,\n    id: String,\n    inline: Boolean,\n    name: String,\n    offIcon: String,\n    onIcon: String,\n    multiple: {\n      type: Boolean,\n      default: null\n    },\n    readonly: Boolean,\n    type: String,\n    modelValue: null\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const modelValue = useProxiedModel(props, 'modelValue');\n    const uid = getUid();\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`);\n    const name = computed(() => props.name || id.value);\n    provide(VSelectionControlGroupSymbol, {\n      disabled: toRef(props, 'disabled'),\n      inline: toRef(props, 'inline'),\n      modelValue,\n      multiple: computed(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value)),\n      name,\n      offIcon: toRef(props, 'offIcon'),\n      onIcon: toRef(props, 'onIcon'),\n      readonly: toRef(props, 'readonly'),\n      type: toRef(props, 'type')\n    });\n    useRender(() => {\n      var _slots$default;\n\n      return _createVNode(\"div\", {\n        \"class\": \"v-selection-control-group\",\n        \"aria-labelled-by\": props.type === 'radio' ? id.value : undefined,\n        \"role\": props.type === 'radio' ? 'radiogroup' : undefined\n      }, [slots == null ? void 0 : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)], 8, [\"aria-labelled-by\", \"role\"]);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,sC,CAEA;;SACSA,uB,sCAET;;AACA,SAASC,QAAT,EAAmBC,eAAnB,EAAoCC,OAApC,EAA6CC,KAA7C,QAA0D,KAA1D;SACSC,QAAQC,iB,wBAEjB;;AAeA,OAAO,MAAMC,4BAAkE,GAAGC,MAAM,CAACC,GAAPD,CAAW,iCAAXA,CAA3E;AAEP,OAAO,MAAME,sBAAsB,GAAGR,eAAe,CAAC;AACpDS,MAAI,EAAE,wBAD8C;AAGpDC,OAAK,EAAE;AACLC,YAAQ,EAAEC,OADL;AAELC,MAAE,EAAEC,MAFC;AAGLC,UAAM,EAAEH,OAHH;AAILH,QAAI,EAAEK,MAJD;AAKLE,WAAO,EAAEF,MALJ;AAMLG,UAAM,EAAEH,MANH;AAOLI,YAAQ,EAAE;AACRC,UAAI,EAAEP,OADE;AAERQ,aAAO,EAAE;AAFD,KAPL;AAWLC,YAAQ,EAAET,OAXL;AAYLO,QAAI,EAAEL,MAZD;AAaLQ,cAAU,EAAE;AAbP,GAH6C;AAmBpDC,OAAK,EAAE;AACL,yBAAsBC,GAAD,IAAc;AAD9B,GAnB6C;;AAuBpDC,OAAK,CAAEf,KAAF,QAAoB;AAAA,QAAX;AAAEgB;AAAF,QAAWC;AACvB,UAAML,UAAU,GAAGxB,eAAe,CAACY,KAAD,EAAQ,YAAR,CAAlC;AACA,UAAMkB,GAAG,GAAGzB,MAAM,EAAlB;AACA,UAAMU,EAAE,GAAGd,QAAQ,CAAC,MAAMW,KAAK,CAACG,EAANH,IAAa,6BAA4BkB,GAAI,EAApD,CAAnB;AACA,UAAMnB,IAAI,GAAGV,QAAQ,CAAC,MAAMW,KAAK,CAACD,IAANC,IAAcG,EAAE,CAACgB,KAAxB,CAArB;AAEA5B,WAAO,CAACI,4BAAD,EAA+B;AACpCM,cAAQ,EAAET,KAAK,CAACQ,KAAD,EAAQ,UAAR,CADqB;AAEpCK,YAAM,EAAEb,KAAK,CAACQ,KAAD,EAAQ,QAAR,CAFuB;AAGpCY,gBAHoC;AAIpCJ,cAAQ,EAAEnB,QAAQ,CAAC,MAAM,CAAC,CAACW,KAAK,CAACQ,QAAR,IAAqBR,KAAK,CAACQ,QAANR,IAAkB,IAAlBA,IAA0BoB,KAAK,CAACC,OAAND,CAAcR,UAAU,CAACO,KAAzBC,CAAtD,CAJkB;AAKpCrB,UALoC;AAMpCO,aAAO,EAAEd,KAAK,CAACQ,KAAD,EAAQ,SAAR,CANsB;AAOpCO,YAAM,EAAEf,KAAK,CAACQ,KAAD,EAAQ,QAAR,CAPuB;AAQpCW,cAAQ,EAAEnB,KAAK,CAACQ,KAAD,EAAQ,UAAR,CARqB;AASpCS,UAAI,EAAEjB,KAAK,CAACQ,KAAD,EAAQ,MAAR;AATyB,KAA/B,CAAPT;AAYAG,aAAS,CAAC,MAAM;AAAA;;AACd;AAAA,iBAEU,2BAFV;AAAA,4BAGuBM,KAAK,CAACS,IAANT,KAAe,OAAfA,GAAyBG,EAAE,CAACgB,KAA5BnB,GAAoCsB,SAH3D;AAAA,gBAIWtB,KAAK,CAACS,IAANT,KAAe,OAAfA,GAAyB,YAAzBA,GAAwCsB;AAJnD,UAMMN,KANN,QAMMA,GANN,MAMMA,GANN,kBAMMA,KAAK,CAAEN,OANb,qBAMMa,0BANN;AADO,MAAT7B;AAYA,WAAO,EAAP;AACD;;AAtDmD,CAAD,CAA9C","names":["useProxiedModel","computed","defineComponent","provide","toRef","getUid","useRender","VSelectionControlGroupSymbol","Symbol","for","VSelectionControlGroup","name","props","disabled","Boolean","id","String","inline","offIcon","onIcon","multiple","type","default","readonly","modelValue","emits","val","setup","slots","_ref","uid","value","Array","isArray","undefined","_slots$default"],"sources":["../../../src/components/VSelectionControlGroup/VSelectionControlGroup.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, defineComponent, provide, toRef } from 'vue'\nimport { getUid, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\n\nexport interface VSelectionGroupContext {\n  disabled: Ref<boolean>\n  inline: Ref<boolean>\n  name: Ref<string | undefined>\n  modelValue: Ref<any>\n  multiple: Ref<boolean>\n  onIcon: Ref<string | undefined>\n  offIcon: Ref<string | undefined>\n  readonly: Ref<boolean>\n  type: Ref<string | undefined>\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const VSelectionControlGroup = defineComponent({\n  name: 'VSelectionControlGroup',\n\n  props: {\n    disabled: Boolean,\n    id: String,\n    inline: Boolean,\n    name: String,\n    offIcon: String,\n    onIcon: String,\n    multiple: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n    readonly: Boolean,\n    type: String,\n    modelValue: null,\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = getUid()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    provide(VSelectionControlGroupSymbol, {\n      disabled: toRef(props, 'disabled'),\n      inline: toRef(props, 'inline'),\n      modelValue,\n      multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n      name,\n      offIcon: toRef(props, 'offIcon'),\n      onIcon: toRef(props, 'onIcon'),\n      readonly: toRef(props, 'readonly'),\n      type: toRef(props, 'type'),\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class=\"v-selection-control-group\"\n          aria-labelled-by={ props.type === 'radio' ? id.value : undefined }\n          role={ props.type === 'radio' ? 'radiogroup' : undefined }\n        >\n          { slots?.default?.() }\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n"]},"metadata":{},"sourceType":"module"}