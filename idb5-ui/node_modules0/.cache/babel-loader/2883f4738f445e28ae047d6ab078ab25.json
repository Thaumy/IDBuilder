{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VProgressLinear.css\"; // Composables\n\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useRtl } from \"../../composables/rtl.mjs\"; // Utilities\n\nimport { convertToUnit, defineComponent } from \"../../util/index.mjs\";\nimport { computed, Transition } from 'vue';\nexport const VProgressLinear = defineComponent({\n  name: 'VProgressLinear',\n  props: {\n    active: {\n      type: Boolean,\n      default: true\n    },\n    bgColor: String,\n    bgOpacity: [Number, String],\n    bufferValue: {\n      type: [Number, String],\n      default: 0\n    },\n    clickable: Boolean,\n    color: String,\n    height: {\n      type: [Number, String],\n      default: 4\n    },\n    indeterminate: Boolean,\n    max: {\n      type: [Number, String],\n      default: 100\n    },\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    },\n    reverse: Boolean,\n    stream: Boolean,\n    striped: Boolean,\n    roundedBar: Boolean,\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps()\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const progress = useProxiedModel(props, 'modelValue');\n    const {\n      isRtl\n    } = useRtl();\n    const {\n      themeClasses\n    } = useTheme(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(props, 'color');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(computed(() => props.bgColor || props.color));\n    const {\n      backgroundColorClasses: barColorClasses,\n      backgroundColorStyles: barColorStyles\n    } = useBackgroundColor(props, 'color');\n    const {\n      roundedClasses\n    } = useRounded(props, 'v-progress-linear');\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const max = computed(() => parseInt(props.max, 10));\n    const height = computed(() => parseInt(props.height, 10));\n    const normalizedBuffer = computed(() => Math.round(parseFloat(props.bufferValue) / max.value * 100));\n    const normalizedValue = computed(() => Math.round(parseFloat(progress.value) / max.value * 100));\n    const isReversed = computed(() => isRtl.value !== props.reverse);\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition');\n    const opacity = computed(() => {\n      return props.bgOpacity == null ? props.bgOpacity : parseFloat(props.bgOpacity);\n    });\n\n    function handleClick(e) {\n      if (!intersectionRef.value) return;\n      const {\n        left,\n        right,\n        width\n      } = intersectionRef.value.getBoundingClientRect();\n      const value = isReversed.value ? width - e.clientX + (right - width) : e.clientX - left;\n      progress.value = Math.round(value / width * max.value);\n    }\n\n    return () => _createVNode(props.tag, {\n      \"ref\": intersectionRef,\n      \"class\": ['v-progress-linear', {\n        'v-progress-linear--active': props.active && isIntersecting.value,\n        'v-progress-linear--reverse': isReversed.value,\n        'v-progress-linear--rounded': props.rounded,\n        'v-progress-linear--rounded-bar': props.roundedBar,\n        'v-progress-linear--striped': props.striped\n      }, roundedClasses.value, themeClasses.value],\n      \"style\": {\n        height: props.active ? convertToUnit(height.value) : 0,\n        '--v-progress-linear-height': convertToUnit(height.value)\n      },\n      \"role\": \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": props.max,\n      \"aria-valuenow\": props.indeterminate ? undefined : normalizedValue.value,\n      \"onClick\": props.clickable && handleClick\n    }, {\n      default: () => [props.stream && _createVNode(\"div\", {\n        \"class\": ['v-progress-linear__stream', textColorClasses.value],\n        \"style\": { ...textColorStyles.value,\n          [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n          borderTop: `${convertToUnit(height.value / 2)} dotted`,\n          opacity: opacity.value,\n          top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n          width: convertToUnit(100 - normalizedBuffer.value, '%'),\n          '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1))\n        }\n      }, null, 6), _createVNode(\"div\", {\n        \"class\": ['v-progress-linear__background', backgroundColorClasses.value],\n        \"style\": [backgroundColorStyles.value, {\n          opacity: opacity.value,\n          width: convertToUnit(!props.stream ? 100 : normalizedBuffer.value, '%')\n        }]\n      }, null, 6), _createVNode(Transition, {\n        \"name\": transition.value\n      }, {\n        default: () => [!props.indeterminate ? _createVNode(\"div\", {\n          \"class\": ['v-progress-linear__determinate', barColorClasses.value],\n          \"style\": [barColorStyles.value, {\n            width: convertToUnit(normalizedValue.value, '%')\n          }]\n        }, null, 6) : _createVNode(\"div\", {\n          \"class\": \"v-progress-linear__indeterminate\"\n        }, [['long', 'short'].map(bar => _createVNode(\"div\", {\n          \"key\": bar,\n          \"class\": ['v-progress-linear__indeterminate', bar, barColorClasses.value],\n          \"style\": barColorStyles.value\n        }, null, 6))])]\n      }, 8, [\"name\"]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-progress-linear__content\"\n      }, [slots.default({\n        value: normalizedValue.value,\n        buffer: normalizedBuffer.value\n      })])],\n      _: 1\n    }, 8, [\"class\", \"style\", \"aria-valuemax\", \"aria-valuenow\", \"onClick\"]);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeRoundedProps","useRounded","makeTagProps","makeThemeProps","useTheme","useBackgroundColor","useTextColor","useIntersectionObserver","useProxiedModel","useRtl","convertToUnit","defineComponent","computed","Transition","VProgressLinear","name","props","active","type","Boolean","default","bgColor","String","bgOpacity","Number","bufferValue","clickable","color","height","indeterminate","max","modelValue","reverse","stream","striped","roundedBar","emits","value","setup","slots","_ref","progress","isRtl","themeClasses","textColorClasses","textColorStyles","backgroundColorClasses","backgroundColorStyles","barColorClasses","barColorStyles","roundedClasses","intersectionRef","isIntersecting","parseInt","normalizedBuffer","Math","round","parseFloat","normalizedValue","isReversed","transition","opacity","handleClick","e","left","right","width","getBoundingClientRect","clientX","rounded","undefined","borderTop","top","map","bar","buffer","_"],"sources":["../../../src/components/VProgressLinear/VProgressLinear.tsx"],"sourcesContent":["// Styles\nimport './VProgressLinear.sass'\n\n// Composables\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/rtl'\n\n// Utilities\nimport { convertToUnit, defineComponent } from '@/util'\nimport { computed, Transition } from 'vue'\n\nexport const VProgressLinear = defineComponent({\n  name: 'VProgressLinear',\n\n  props: {\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    bgColor: String,\n    bgOpacity: [Number, String],\n    bufferValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    clickable: Boolean,\n    color: String,\n    height: {\n      type: [Number, String],\n      default: 4,\n    },\n    indeterminate: Boolean,\n    max: {\n      type: [Number, String],\n      default: 100,\n    },\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    reverse: Boolean,\n    stream: Boolean,\n    striped: Boolean,\n    roundedBar: Boolean,\n\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const progress = useProxiedModel(props, 'modelValue')\n    const { isRtl } = useRtl()\n    const { themeClasses } = useTheme(props)\n    const { textColorClasses, textColorStyles } = useTextColor(props, 'color')\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => props.bgColor || props.color))\n    const { backgroundColorClasses: barColorClasses, backgroundColorStyles: barColorStyles } = useBackgroundColor(props, 'color')\n    const { roundedClasses } = useRounded(props, 'v-progress-linear')\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    const max = computed(() => parseInt(props.max, 10))\n    const height = computed(() => parseInt(props.height, 10))\n    const normalizedBuffer = computed(() => Math.round(parseFloat(props.bufferValue) / max.value * 100))\n    const normalizedValue = computed(() => Math.round(parseFloat(progress.value) / max.value * 100))\n    const isReversed = computed(() => isRtl.value !== props.reverse)\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition')\n    const opacity = computed(() => {\n      return props.bgOpacity == null\n        ? props.bgOpacity\n        : parseFloat(props.bgOpacity)\n    })\n\n    function handleClick (e: MouseEvent) {\n      if (!intersectionRef.value) return\n\n      const { left, right, width } = intersectionRef.value.getBoundingClientRect()\n      const value = isReversed.value ? (width - e.clientX) + (right - width) : e.clientX - left\n\n      progress.value = Math.round(value / width * max.value)\n    }\n\n    return () => (\n      <props.tag\n        ref={ intersectionRef }\n        class={[\n          'v-progress-linear',\n          {\n            'v-progress-linear--active': props.active && isIntersecting.value,\n            'v-progress-linear--reverse': isReversed.value,\n            'v-progress-linear--rounded': props.rounded,\n            'v-progress-linear--rounded-bar': props.roundedBar,\n            'v-progress-linear--striped': props.striped,\n          },\n          roundedClasses.value,\n          themeClasses.value,\n        ]}\n        style={{\n          height: props.active ? convertToUnit(height.value) : 0,\n          '--v-progress-linear-height': convertToUnit(height.value),\n        }}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax={ props.max }\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n        onClick={ props.clickable && handleClick }\n      >\n        { props.stream && (\n          <div\n            class={[\n              'v-progress-linear__stream',\n              textColorClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n              [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n              borderTop: `${convertToUnit(height.value / 2)} dotted`,\n              opacity: opacity.value,\n              top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n              width: convertToUnit(100 - normalizedBuffer.value, '%'),\n              '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1)),\n            }}\n          />\n        ) }\n\n        <div\n          class={[\n            'v-progress-linear__background',\n            backgroundColorClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            {\n              opacity: opacity.value,\n              width: convertToUnit((!props.stream ? 100 : normalizedBuffer.value), '%'),\n            },\n          ]}\n        />\n\n        <Transition name={ transition.value }>\n          { !props.indeterminate ? (\n            <div\n              class={[\n                'v-progress-linear__determinate',\n                barColorClasses.value,\n              ]}\n              style={[\n                barColorStyles.value,\n                { width: convertToUnit(normalizedValue.value, '%') },\n              ]}\n            />\n          ) : (\n            <div class=\"v-progress-linear__indeterminate\">\n              { ['long', 'short'].map(bar => (\n                <div\n                  key={ bar }\n                  class={[\n                    'v-progress-linear__indeterminate',\n                    bar,\n                    barColorClasses.value,\n                  ]}\n                  style={ barColorStyles.value }\n                />\n              )) }\n            </div>\n          ) }\n        </Transition>\n\n        { slots.default && (\n          <div class=\"v-progress-linear__content\">\n            { slots.default({ value: normalizedValue.value, buffer: normalizedBuffer.value }) }\n          </div>\n        ) }\n      </props.tag>\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}