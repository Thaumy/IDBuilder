{"ast":null,"code":"'use strict';\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\n\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\n\n\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = {\n  mask,\n  unmask\n};","map":{"version":3,"sources":["/home/thaumy/Desktop/idb5-ui/node_modules/bufferutil/fallback.js"],"names":["mask","source","output","offset","length","i","unmask","buffer","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,IAAI,GAAG,CAACC,MAAD,EAASD,IAAT,EAAeE,MAAf,EAAuBC,MAAvB,EAA+BC,MAA/B,KAA0C;AACrD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/BH,IAAAA,MAAM,CAACC,MAAM,GAAGE,CAAV,CAAN,GAAqBJ,MAAM,CAACI,CAAD,CAAN,GAAYL,IAAI,CAACK,CAAC,GAAG,CAAL,CAArC;AACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG,CAACC,MAAD,EAASP,IAAT,KAAkB;AAC/B;AACA,QAAMI,MAAM,GAAGG,MAAM,CAACH,MAAtB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/BE,IAAAA,MAAM,CAACF,CAAD,CAAN,IAAaL,IAAI,CAACK,CAAC,GAAG,CAAL,CAAjB;AACD;AACF,CAND;;AAQAG,MAAM,CAACC,OAAP,GAAiB;AAAET,EAAAA,IAAF;AAAQM,EAAAA;AAAR,CAAjB","sourcesContent":["'use strict';\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = { mask, unmask };\n"]},"metadata":{},"sourceType":"script"}