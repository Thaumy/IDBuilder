{"ast":null,"code":"// Utilities\nimport { computed, isRef } from 'vue';\nimport { isCssColor } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport function useColor(colors) {\n  const backgroundIsCssColor = computed(() => isCssColor(colors.value.background));\n  const textIsCssColor = computed(() => isCssColor(colors.value.text));\n  const colorClasses = computed(() => {\n    const classes = [];\n\n    if (colors.value.background && !backgroundIsCssColor.value) {\n      classes.push(`bg-${colors.value.background}`);\n    }\n\n    if (colors.value.text && !textIsCssColor.value) {\n      classes.push(`text-${colors.value.text}`);\n    }\n\n    return classes;\n  });\n  const colorStyles = computed(() => {\n    const styles = {};\n\n    if (colors.value.background && backgroundIsCssColor.value) {\n      styles.backgroundColor = colors.value.background;\n    }\n\n    if (colors.value.text && textIsCssColor.value) {\n      styles.color = colors.value.text;\n      styles.caretColor = colors.value.text;\n    }\n\n    return styles;\n  });\n  return {\n    colorClasses,\n    colorStyles\n  };\n}\nexport function useTextColor(props, name) {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : name ? props[name] : null\n  }));\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles\n  } = useColor(colors);\n  return {\n    textColorClasses,\n    textColorStyles\n  };\n}\nexport function useBackgroundColor(props, name) {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : name ? props[name] : null\n  }));\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles\n  } = useColor(colors);\n  return {\n    backgroundColorClasses,\n    backgroundColorStyles\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,kB,qBAET;AAeA;;AACA,OAAO,SAASC,QAAT,CAAmBC,MAAnB,EAAgF;AACrF,QAAMC,oBAAoB,GAAGL,QAAQ,CAAC,MAAME,UAAU,CAACE,MAAM,CAACE,KAAPF,CAAaG,UAAd,CAAjB,CAArC;AACA,QAAMC,cAAc,GAAGR,QAAQ,CAAC,MAAME,UAAU,CAACE,MAAM,CAACE,KAAPF,CAAaK,IAAd,CAAjB,CAA/B;AAEA,QAAMC,YAAY,GAAGV,QAAQ,CAAC,MAAM;AAClC,UAAMW,OAAiB,GAAG,EAA1B;;AAEA,QAAIP,MAAM,CAACE,KAAPF,CAAaG,UAAbH,IAA2B,CAACC,oBAAoB,CAACC,KAArD,EAA4D;AAC1DK,aAAO,CAACC,IAARD,CAAc,MAAKP,MAAM,CAACE,KAAPF,CAAaG,UAAW,EAA3CI;AACD;;AAED,QAAIP,MAAM,CAACE,KAAPF,CAAaK,IAAbL,IAAqB,CAACI,cAAc,CAACF,KAAzC,EAAgD;AAC9CK,aAAO,CAACC,IAARD,CAAc,QAAOP,MAAM,CAACE,KAAPF,CAAaK,IAAK,EAAvCE;AACD;;AAED,WAAOA,OAAP;AAX2B,IAA7B;AAcA,QAAME,WAAW,GAAGb,QAAQ,CAAC,MAAM;AACjC,UAAMc,MAAqB,GAAG,EAA9B;;AAEA,QAAIV,MAAM,CAACE,KAAPF,CAAaG,UAAbH,IAA2BC,oBAAoB,CAACC,KAApD,EAA2D;AACzDQ,YAAM,CAACC,eAAPD,GAAyBV,MAAM,CAACE,KAAPF,CAAaG,UAAtCO;AACD;;AAED,QAAIV,MAAM,CAACE,KAAPF,CAAaK,IAAbL,IAAqBI,cAAc,CAACF,KAAxC,EAA+C;AAC7CQ,YAAM,CAACE,KAAPF,GAAeV,MAAM,CAACE,KAAPF,CAAaK,IAA5BK;AACAA,YAAM,CAACG,UAAPH,GAAoBV,MAAM,CAACE,KAAPF,CAAaK,IAAjCK;AACD;;AAED,WAAOA,MAAP;AAZ0B,IAA5B;AAeA,SAAO;AAAEJ,gBAAF;AAAgBG;AAAhB,GAAP;AACD;AAID,OAAO,SAASK,YAAT,CACLC,KADK,EAELC,IAFK,EAGU;AACf,QAAMhB,MAAM,GAAGJ,QAAQ,CAAC,OAAO;AAC7BS,QAAI,EAAER,KAAK,CAACkB,KAAD,CAALlB,GAAekB,KAAK,CAACb,KAArBL,GAA8BmB,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiB;AAD5B,GAAP,CAAD,CAAvB;AAIA,QAAM;AACJV,gBAAY,EAAEW,gBADV;AAEJR,eAAW,EAAES;AAFT,MAGFnB,QAAQ,CAACC,MAAD,CAHZ;AAKA,SAAO;AAAEiB,oBAAF;AAAoBC;AAApB,GAAP;AACD;AAID,OAAO,SAASC,kBAAT,CACLJ,KADK,EAELC,IAFK,EAGgB;AACrB,QAAMhB,MAAM,GAAGJ,QAAQ,CAAC,OAAO;AAC7BO,cAAU,EAAEN,KAAK,CAACkB,KAAD,CAALlB,GAAekB,KAAK,CAACb,KAArBL,GAA8BmB,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiB;AADlC,GAAP,CAAD,CAAvB;AAIA,QAAM;AACJV,gBAAY,EAAEc,sBADV;AAEJX,eAAW,EAAEY;AAFT,MAGFtB,QAAQ,CAACC,MAAD,CAHZ;AAKA,SAAO;AAAEoB,0BAAF;AAA0BC;AAA1B,GAAP;AACD","names":["computed","isRef","isCssColor","useColor","colors","backgroundIsCssColor","value","background","textIsCssColor","text","colorClasses","classes","push","colorStyles","styles","backgroundColor","color","caretColor","useTextColor","props","name","textColorClasses","textColorStyles","useBackgroundColor","backgroundColorClasses","backgroundColorStyles"],"sources":["../../src/composables/color.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { isCssColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  const backgroundIsCssColor = computed(() => isCssColor(colors.value.background))\n  const textIsCssColor = computed(() => isCssColor(colors.value.text))\n\n  const colorClasses = computed(() => {\n    const classes: string[] = []\n\n    if (colors.value.background && !backgroundIsCssColor.value) {\n      classes.push(`bg-${colors.value.background}`)\n    }\n\n    if (colors.value.text && !textIsCssColor.value) {\n      classes.push(`text-${colors.value.text}`)\n    }\n\n    return classes\n  })\n\n  const colorStyles = computed(() => {\n    const styles: CSSProperties = {}\n\n    if (colors.value.background && backgroundIsCssColor.value) {\n      styles.backgroundColor = colors.value.background\n    }\n\n    if (colors.value.text && textIsCssColor.value) {\n      styles.color = colors.value.text\n      styles.caretColor = colors.value.text\n    }\n\n    return styles\n  })\n\n  return { colorClasses, colorStyles }\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"]},"metadata":{},"sourceType":"module"}