{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Utilities\n\nimport { computed, inject, isRef } from 'vue';\nimport { defineComponent, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const IconSymbol = Symbol.for('vuetify:icons');\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: [String, Object],\n    required: true\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true\n  }\n}, 'icon');\nexport const VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [_createVNode(props.icon, null, null)]\n      });\n    };\n  }\n\n});\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n  inheritAttrs: false,\n  props: makeIconProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs\n    } = _ref;\n    return () => {\n      return _createVNode(props.tag, _mergeProps(attrs, {\n        \"style\": null\n      }), {\n        default: () => [_createVNode(\"svg\", {\n          \"class\": \"v-icon__svg\",\n          \"xmlns\": \"http://www.w3.org/2000/svg\",\n          \"viewBox\": \"0 0 24 24\",\n          \"role\": \"img\",\n          \"aria-hidden\": \"true\"\n        }, [_createVNode(\"path\", {\n          \"d\": props.icon\n        }, null, 8, [\"d\"])])]\n      }, 16);\n    };\n  }\n\n});\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [props.icon]\n      });\n    };\n  }\n\n});\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, {\n        \"class\": props.icon\n      }, null, 8, [\"class\"]);\n    };\n  }\n\n});\nexport const defaultSets = {\n  svg: {\n    component: VSvgIcon\n  },\n  class: {\n    component: VClassIcon\n  }\n}; // Composables\n\nexport const useIcon = props => {\n  const icons = inject(IconSymbol);\n  if (!icons) throw new Error('Missing Vuetify Icons provide!');\n  const iconData = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon;\n    if (!iconAlias) throw new Error('Icon value is undefined or null');\n    let icon = iconAlias;\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      var _icons$aliases;\n\n      icon = (_icons$aliases = icons.aliases) == null ? void 0 : _icons$aliases[iconAlias.slice(iconAlias.indexOf('$') + 1)];\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`);\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon\n      };\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(setName => typeof icon === 'string' && icon.startsWith(`${setName}:`));\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon;\n    const iconSet = icons.sets[iconSetName != null ? iconSetName : icons.defaultSet];\n    return {\n      component: iconSet.component,\n      icon: iconName\n    };\n  });\n  return {\n    iconData\n  };\n};","map":{"version":3,"mappings":";8EAAA;;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,KAA3B,QAAwC,KAAxC;SACSC,iBAAiBC,oB,qBAE1B;;AAiEA,OAAO,MAAMC,UAAqC,GAAGC,MAAM,CAACC,GAAPD,CAAW,eAAXA,CAA9C;AAEP,OAAO,MAAME,aAAa,GAAGJ,YAAY,CAAC;AACxCK,MAAI,EAAE;AACJC,QAAI,EAAE,CAACC,MAAD,EAASC,MAAT,CADF;AAEJC,YAAQ,EAAE;AAFN,GADkC;AAKxC;AACAC,KAAG,EAAE;AACHJ,QAAI,EAAEC,MADH;AAEHE,YAAQ,EAAE;AAFP;AANmC,CAAD,EAUtC,MAVsC,CAAlC;AAYP,OAAO,MAAME,cAAc,GAAGZ,eAAe,CAAC;AAC5Ca,MAAI,EAAE,gBADsC;AAG5CC,OAAK,EAAET,aAAa,EAHwB;;AAK5CU,OAAK,CAAED,KAAF,EAAS;AACZ,WAAO,MAAM;AACX;AAAAE;AAAA;AADF;AAOD;;AAb2C,CAAD,CAAtC;AAgBP,OAAO,MAAMC,QAAQ,GAAGjB,eAAe,CAAC;AACtCa,MAAI,EAAE,UADgC;AAGtCK,cAAY,EAAE,KAHwB;AAKtCJ,OAAK,EAAET,aAAa,EALkB;;AAOtCU,OAAK,CAAED,KAAF,QAAoB;AAAA,QAAX;AAAEK;AAAF,QAAWC;AACvB,WAAO,MAAM;AACX,iDACkBD,KADlB;AAAA,iBACkC;AADlC;AAAAH;AAAA,mBAGY,aAHZ;AAAA,mBAIY,4BAJZ;AAAA,qBAKc,WALd;AAAA,kBAMW,KANX;AAAA,yBAOkB;AAPlB;AAAA,eASgBF,KAAK,CAACR;AATtB;AAAA;AADF;AAeD;;AAvBqC,CAAD,CAAhC;AA0BP,OAAO,MAAMe,aAAa,GAAGrB,eAAe,CAAC;AAC3Ca,MAAI,EAAE,eADqC;AAG3CC,OAAK,EAAET,aAAa,EAHuB;;AAK3CU,OAAK,CAAED,KAAF,EAAS;AACZ,WAAO,MAAM;AACX;AAAAE,wBAAoBF,KAAK,CAACR,IAA1B;AAAA;AADF;AAGD;;AAT0C,CAAD,CAArC;AAYP,OAAO,MAAMgB,UAAU,GAAGtB,eAAe,CAAC;AACxCa,MAAI,EAAE,YADkC;AAGxCC,OAAK,EAAET,aAAa,EAHoB;;AAKxCU,OAAK,CAAED,KAAF,EAAS;AACZ,WAAO,MAAM;AACX;AAAA,iBAA0BA,KAAK,CAACR;AAAhC;AADF;AAGD;;AATuC,CAAD,CAAlC;AAYP,OAAO,MAAMiB,WAAoC,GAAG;AAClDC,KAAG,EAAE;AACHC,aAAS,EAAER;AADR,GAD6C;AAIlDS,OAAK,EAAE;AACLD,aAAS,EAAEH;AADN;AAJ2C,CAA7C,C,CASP;;AACA,OAAO,MAAMK,OAAO,GAAIb,KAAD,IAA2D;AAChF,QAAMc,KAAK,GAAG9B,MAAM,CAACI,UAAD,CAApB;AAEA,MAAI,CAAC0B,KAAL,EAAY,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AAEZ,QAAMC,QAA2B,GAAGjC,QAAQ,CAAC,MAAM;AACjD,UAAMkC,SAAS,GAAGhC,KAAK,CAACe,KAAD,CAALf,GAAee,KAAK,CAACkB,KAArBjC,GAA6Be,KAAK,CAACR,IAArD;AAEA,QAAI,CAACyB,SAAL,EAAgB,MAAM,IAAIF,KAAJ,CAAU,iCAAV,CAAN;AAEhB,QAAIvB,IAA2B,GAAGyB,SAAlC;;AAEA,QAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACE,QAAVF,CAAmB,GAAnBA,CAArC,EAA8D;AAAA;;AAC5DzB,UAAI,qBAAGsB,KAAK,CAACM,OAAT,qBAAGC,eAAgBJ,SAAS,CAACK,KAAVL,CAAgBA,SAAS,CAACM,OAAVN,CAAkB,GAAlBA,IAAyB,CAAzCA,CAAhB,CAAPzB;AACD;;AAED,QAAI,CAACA,IAAL,EAAW,MAAM,IAAIuB,KAAJ,CAAW,gCAA+BE,SAAU,GAApD,CAAN;;AAEX,QAAI,OAAOzB,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAO;AACLmB,iBAAS,EAAEb,cADN;AAELN;AAFK,OAAP;AAID;;AAED,UAAMgC,WAAW,GAAG7B,MAAM,CAAC8B,IAAP9B,CAAYmB,KAAK,CAACY,IAAlB/B,EAAwBgC,IAAxBhC,CAClBiC,OAAO,IAAI,OAAOpC,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACqC,UAALrC,CAAiB,GAAEoC,OAAQ,GAA3BpC,CADrBG,CAApB;AAIA,UAAMmC,QAAQ,GAAGN,WAAW,GAAGhC,IAAI,CAAC8B,KAAL9B,CAAWgC,WAAW,CAACO,MAAZP,GAAqB,CAAhChC,CAAH,GAAwCA,IAApE;AACA,UAAMwC,OAAO,GAAGlB,KAAK,CAACY,IAANZ,CAAWU,WAAX,QAAWA,iBAAeV,KAAK,CAACmB,UAAhCnB,CAAhB;AAEA,WAAO;AACLH,eAAS,EAAEqB,OAAO,CAACrB,SADd;AAELnB,UAAI,EAAEsC;AAFD,KAAP;AA3B0C,IAA5C;AAiCA,SAAO;AAAEd;AAAF,GAAP;AAtCK","names":["computed","inject","isRef","defineComponent","propsFactory","IconSymbol","Symbol","for","makeIconProps","icon","type","String","Object","required","tag","VComponentIcon","name","props","setup","default","VSvgIcon","inheritAttrs","attrs","_ref","VLigatureIcon","VClassIcon","defaultSets","svg","component","class","useIcon","icons","Error","iconData","iconAlias","value","includes","aliases","_icons$aliases","slice","indexOf","iconSetName","keys","sets","find","setName","startsWith","iconName","length","iconSet","defaultSet"],"sources":["../../src/composables/icons.tsx"],"sourcesContent":["// Utilities\nimport { computed, inject, isRef } from 'vue'\nimport { defineComponent, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, JSXComponent, PropType, Ref } from 'vue'\n\nexport type IconValue = string | JSXComponent\n\nexport interface IconAliases {\n  [name: string]: IconValue\n  complete: IconValue\n  cancel: IconValue\n  close: IconValue\n  delete: IconValue\n  clear: IconValue\n  success: IconValue\n  info: IconValue\n  warning: IconValue\n  error: IconValue\n  prev: IconValue\n  next: IconValue\n  checkboxOn: IconValue\n  checkboxOff: IconValue\n  checkboxIndeterminate: IconValue\n  delimiter: IconValue\n  sort: IconValue\n  expand: IconValue\n  menu: IconValue\n  subgroup: IconValue\n  dropdown: IconValue\n  radioOn: IconValue\n  radioOff: IconValue\n  edit: IconValue\n  ratingEmpty: IconValue\n  ratingFull: IconValue\n  ratingHalf: IconValue\n  loading: IconValue\n  first: IconValue\n  last: IconValue\n  unfold: IconValue\n  file: IconValue\n  plus: IconValue\n  minus: IconValue\n}\n\nexport interface IconProps {\n  tag: string\n  icon: IconValue\n  disabled?: Boolean\n}\n\ntype IconComponent = JSXComponent<IconProps>\n\nexport interface IconSet {\n  component: IconComponent\n}\n\nexport type IconOptions = {\n  defaultSet: string\n  aliases?: Partial<IconAliases>\n  sets: Record<string, IconSet>\n}\n\ntype IconInstance = {\n  component: IconComponent\n  icon: IconValue\n}\n\nexport const IconSymbol: InjectionKey<IconOptions> = Symbol.for('vuetify:icons')\n\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: [String, Object] as PropType<IconValue>,\n    required: true,\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true,\n  },\n}, 'icon')\n\nexport const VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return (\n        <props.tag>\n          <props.icon />\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n\n  inheritAttrs: false,\n\n  props: makeIconProps(),\n\n  setup (props, { attrs }) {\n    return () => {\n      return (\n        <props.tag { ...attrs } style={ null }>\n          <svg\n            class=\"v-icon__svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n          >\n            <path d={ props.icon as string }></path>\n          </svg>\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag>{ props.icon }</props.tag>\n    }\n  },\n})\n\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag class={ props.icon }></props.tag>\n    }\n  },\n})\n\nexport const defaultSets: Record<string, IconSet> = {\n  svg: {\n    component: VSvgIcon,\n  },\n  class: {\n    component: VClassIcon,\n  },\n}\n\n// Composables\nexport const useIcon = (props: Ref<string | undefined> | { icon?: IconValue }) => {\n  const icons = inject(IconSymbol)\n\n  if (!icons) throw new Error('Missing Vuetify Icons provide!')\n\n  const iconData: Ref<IconInstance> = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon\n\n    if (!iconAlias) throw new Error('Icon value is undefined or null')\n\n    let icon: IconValue | undefined = iconAlias\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      icon = icons.aliases?.[iconAlias.slice(iconAlias.indexOf('$') + 1)]\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`)\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon,\n      }\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(\n      setName => typeof icon === 'string' && icon.startsWith(`${setName}:`)\n    )\n\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet]\n\n    return {\n      component: iconSet.component,\n      icon: iconName,\n    }\n  })\n\n  return { iconData }\n}\n"]},"metadata":{},"sourceType":"module"}