{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInput.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VMessages } from \"../VMessages/index.mjs\"; // Composables\n\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, pick, propsFactory, toKebabCase } from \"../../util/index.mjs\"; // Types\n\nexport const makeVInputProps = propsFactory({\n  appendIcon: String,\n  prependIcon: String,\n  focused: Boolean,\n  hideDetails: [Boolean, String],\n  hint: String,\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  persistentHint: Boolean,\n  ...makeDensityProps(),\n  ...makeValidationProps()\n});\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: makeVInputProps(),\n  emits: {\n    'click:prepend': e => true,\n    'click:append': e => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props, 'v-input');\n    const {\n      errorMessages,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props, 'v-input');\n    const slotProps = computed(() => ({\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    return () => {\n      var _props$messages, _slots$prepend, _slots$default, _slots$append, _slots$details;\n\n      const hasPrepend = slots.prepend || props.prependIcon;\n      const hasAppend = slots.append || props.appendIcon;\n      const hasHint = !!(slots.hint || props.hint);\n      const hasMessages = !!(slots.messages || (_props$messages = props.messages) != null && _props$messages.length || errorMessages.value.length);\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && (hasMessages || hasHint);\n      const showMessages = hasMessages || hasHint && (props.persistentHint || props.focused);\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', densityClasses.value, validationClasses.value]\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"class\": \"v-input__prepend\",\n        \"onClick\": e => emit('click:prepend', e)\n      }, [slots == null ? void 0 : (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value), props.prependIcon && _createVNode(VIcon, {\n        \"icon\": props.prependIcon\n      }, null, 8, [\"icon\"])], 8, [\"onClick\"]), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value), hasAppend && _createVNode(\"div\", {\n        \"class\": \"v-input__append\",\n        \"onClick\": e => emit('click:append', e)\n      }, [slots == null ? void 0 : (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendIcon && _createVNode(VIcon, {\n        \"icon\": props.appendIcon\n      }, null, 8, [\"icon\"])], 8, [\"onClick\"]), hasDetails && _createVNode(\"div\", {\n        \"class\": \"v-input__details\"\n      }, [_createVNode(VMessages, {\n        \"active\": showMessages,\n        \"value\": hasMessages ? props.messages : [props.hint]\n      }, {\n        default: slots.messages\n      }, 8, [\"active\", \"value\"]), (_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps.value)])], 2);\n    };\n  }\n\n});\nexport function filterInputAttrs(attrs) {\n  return pick(attrs, ['class', 'style', 'id', /^data-/]);\n}\nexport function filterInputProps(attrs) {\n  return pick(attrs, Object.keys(VInput.props).map(toKebabCase));\n}","map":{"version":3,"mappings":"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","names":["VIcon","VMessages","makeDensityProps","useDensity","makeValidationProps","useValidation","computed","genericComponent","pick","propsFactory","toKebabCase","makeVInputProps","appendIcon","String","prependIcon","focused","Boolean","hideDetails","hint","messages","type","Array","default","persistentHint","VInput","name","props","emits","e","setup","slots","emit","_ref","densityClasses","errorMessages","isDisabled","isReadonly","isPristine","isValid","isValidating","reset","resetValidation","validate","validationClasses","slotProps","hasPrepend","prepend","hasAppend","append","hasHint","hasMessages","_props$messages","length","value","hasDetails","showMessages","_slots$prepend","_slots$default","_slots$append","details","_slots$details","filterInputAttrs","attrs","filterInputProps","Object","keys","map"],"sources":["../../../src/components/VInput/VInput.tsx"],"sourcesContent":["// Styles\nimport './VInput.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VMessages } from '@/components/VMessages'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeValidationProps, useValidation } from '@/composables/validation'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, pick, propsFactory, toKebabCase } from '@/util'\n\n// Types\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type VInputSlot = {\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean | null>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n\nexport const makeVInputProps = propsFactory({\n  appendIcon: String,\n  prependIcon: String,\n  focused: Boolean,\n  hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n  hint: String,\n  messages: {\n    type: [Array, String],\n    default: () => ([]),\n  },\n  persistentHint: Boolean,\n\n  ...makeDensityProps(),\n  ...makeValidationProps(),\n})\n\nexport const VInput = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    default: [VInputSlot]\n    prepend: [VInputSlot]\n    append: [VInputSlot]\n    details: [VInputSlot]\n  }>\n}>()({\n  name: 'VInput',\n\n  props: makeVInputProps(),\n\n  emits: {\n    'click:prepend': (e: MouseEvent) => true,\n    'click:append': (e: MouseEvent) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const { densityClasses } = useDensity(props, 'v-input')\n    const {\n      errorMessages,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses,\n    } = useValidation(props, 'v-input')\n\n    const slotProps = computed<VInputSlot>(() => ({\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n    }))\n\n    return () => {\n      const hasPrepend = (slots.prepend || props.prependIcon)\n      const hasAppend = (slots.append || props.appendIcon)\n      const hasHint = !!(slots.hint || props.hint)\n      const hasMessages = !!(\n        slots.messages ||\n        props.messages?.length ||\n        errorMessages.value.length\n      )\n      const hasDetails = !props.hideDetails || (\n        props.hideDetails === 'auto' &&\n        (hasMessages || hasHint)\n      )\n      const showMessages = hasMessages || (\n        hasHint &&\n        (props.persistentHint || props.focused)\n      )\n\n      return (\n        <div class={[\n          'v-input',\n          densityClasses.value,\n          validationClasses.value,\n        ]}\n        >\n          { hasPrepend && (\n            <div\n              class=\"v-input__prepend\"\n              onClick={ e => emit('click:prepend', e) }\n            >\n              { slots?.prepend?.(slotProps.value) }\n\n              { props.prependIcon && (\n                <VIcon icon={ props.prependIcon } />\n              ) }\n            </div>\n          ) }\n\n          { slots.default?.(slotProps.value) }\n\n          { hasAppend && (\n            <div\n              class=\"v-input__append\"\n              onClick={ e => emit('click:append', e) }\n            >\n              { slots?.append?.(slotProps.value) }\n\n              { props.appendIcon && (\n                <VIcon icon={ props.appendIcon } />\n              ) }\n            </div>\n          ) }\n\n          { hasDetails && (\n            <div class=\"v-input__details\">\n              <VMessages\n                active={ showMessages }\n                value={ hasMessages ? props.messages : [props.hint] }\n                v-slots={{ default: slots.messages }}\n              />\n\n              { slots.details?.(slotProps.value) }\n            </div>\n          ) }\n        </div>\n      )\n    }\n  },\n})\n\nexport type VInput = InstanceType<typeof VInput>\n\nexport function filterInputAttrs (attrs: Record<string, unknown>) {\n  return pick(attrs, ['class', 'style', 'id', /^data-/])\n}\n\nexport function filterInputProps (attrs: Record<string, unknown>) {\n  return pick(attrs, Object.keys(VInput.props).map(toKebabCase))\n}\n"]},"metadata":{},"sourceType":"module"}