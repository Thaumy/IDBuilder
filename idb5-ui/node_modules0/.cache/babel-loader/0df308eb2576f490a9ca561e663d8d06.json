{"ast":null,"code":"// Composables\nimport { useForm } from \"./form.mjs\"; // Utilities\n\nimport { computed, onBeforeMount, onBeforeUnmount, ref } from 'vue';\nimport { getCurrentInstance, getUid, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String],\n    default: () => []\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array,\n    default: () => []\n  },\n  modelValue: {\n    type: null,\n    default: undefined\n  }\n});\nexport function useValidation(props, name) {\n  const form = useForm();\n  const errorMessages = ref([]);\n  const isPristine = ref(true);\n  const isDisabled = computed(() => !!(props.disabled || form != null && form.isDisabled.value));\n  const isReadonly = computed(() => !!(props.readonly || form != null && form.isReadonly.value));\n  const isValid = computed(() => {\n    var _props$errorMessages;\n\n    if (props.error || (_props$errorMessages = props.errorMessages) != null && _props$errorMessages.length || errorMessages.value.length) return false;\n    return isPristine.value ? null : true;\n  });\n  const isValidating = ref(false);\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value\n    };\n  });\n  const vm = getCurrentInstance('useValidation');\n  const uid = computed(() => {\n    var _props$name;\n\n    return (_props$name = props.name) != null ? _props$name : getUid();\n  });\n  onBeforeMount(() => {\n    form == null ? void 0 : form.register(uid.value, validate, reset, resetValidation);\n  });\n  onBeforeUnmount(() => {\n    form == null ? void 0 : form.unregister(uid.value);\n  });\n\n  function reset() {\n    resetValidation();\n    vm == null ? void 0 : vm.emit('update:modelValue', null);\n  }\n\n  function resetValidation() {\n    isPristine.value = true;\n    errorMessages.value = [];\n  }\n\n  async function validate() {\n    const results = [];\n    errorMessages.value = [];\n    isValidating.value = true;\n\n    for (const rule of props.rules) {\n      var _props$modelValue$val, _props$modelValue;\n\n      if (results.length >= (props.maxErrors || 1)) {\n        break;\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule;\n      const result = await handler((_props$modelValue$val = props == null ? void 0 : (_props$modelValue = props.modelValue) == null ? void 0 : _props$modelValue.value) != null ? _props$modelValue$val : props.modelValue);\n      if (result === true) continue;\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`);\n        continue;\n      }\n\n      results.push(result);\n    }\n\n    errorMessages.value = results;\n    isValidating.value = false;\n    isPristine.value = false;\n    return errorMessages.value;\n  }\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses\n  };\n}","map":{"version":3,"mappings":"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","names":["useForm","computed","onBeforeMount","onBeforeUnmount","ref","getCurrentInstance","getUid","propsFactory","makeValidationProps","disabled","Boolean","error","errorMessages","type","Array","String","default","maxErrors","Number","name","readonly","rules","modelValue","undefined","useValidation","props","form","isPristine","isDisabled","value","isReadonly","isValid","_props$errorMessages","length","isValidating","validationClasses","vm","uid","register","validate","reset","resetValidation","unregister","emit","results","rule","handler","result","_props$modelValue","console","warn","push"],"sources":["../../src/composables/validation.ts"],"sourcesContent":["// Composables\nimport { useForm } from '@/composables/form'\n\n// Utilities\nimport { computed, onBeforeMount, onBeforeUnmount, ref } from 'vue'\nimport { getCurrentInstance, getUid, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type ValidationResult = string | true\nexport type ValidationRule =\n  | ValidationResult\n  | PromiseLike<ValidationResult>\n  | ((value: any) => ValidationResult)\n  | ((value: any) => PromiseLike<ValidationResult>)\n\nexport interface ValidationProps {\n  disabled?: boolean\n  error?: boolean\n  errorMessages?: string | string[]\n  maxErrors?: string | number\n  name?: string\n  readonly?: boolean\n  rules: ValidationRule[]\n  modelValue?: any\n}\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1,\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array as PropType<ValidationRule[]>,\n    default: () => ([]),\n  },\n  modelValue: {\n    type: null,\n    default: undefined as any,\n  },\n})\n\nexport function useValidation (\n  props: ValidationProps,\n  name: string,\n) {\n  const form = useForm()\n  const errorMessages = ref<string[]>([])\n  const isPristine = ref(true)\n  const isDisabled = computed(() => !!(props.disabled || form?.isDisabled.value))\n  const isReadonly = computed(() => !!(props.readonly || form?.isReadonly.value))\n  const isValid = computed(() => {\n    if (\n      props.error ||\n      props.errorMessages?.length ||\n      errorMessages.value.length\n    ) return false\n\n    return isPristine.value ? null : true\n  })\n  const isValidating = ref(false)\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value,\n    }\n  })\n\n  const vm = getCurrentInstance('useValidation')\n  const uid = computed(() => props.name ?? getUid())\n\n  onBeforeMount(() => {\n    form?.register(uid.value, validate, reset, resetValidation)\n  })\n\n  onBeforeUnmount(() => {\n    form?.unregister(uid.value)\n  })\n\n  function reset () {\n    resetValidation()\n\n    vm?.emit('update:modelValue', null)\n  }\n\n  function resetValidation () {\n    isPristine.value = true\n    errorMessages.value = []\n  }\n\n  async function validate () {\n    const results = []\n\n    errorMessages.value = []\n    isValidating.value = true\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule\n      const result = await handler(props?.modelValue?.value ?? props.modelValue)\n\n      if (result === true) continue\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`)\n\n        continue\n      }\n\n      results.push(result)\n    }\n\n    errorMessages.value = results\n    isValidating.value = false\n    isPristine.value = false\n\n    return errorMessages.value\n  }\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}