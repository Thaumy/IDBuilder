{"ast":null,"code":"import { resolveDirective as _resolveDirective, withDirectives as _withDirectives, mergeProps as _mergeProps, vModelDynamic as _vModelDynamic, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControl.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSelectionControlGroupSymbol } from \"../VSelectionControlGroup/VSelectionControlGroup.mjs\"; // Composables\n\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeThemeProps } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\n\nimport { computed, inject, ref } from 'vue';\nimport { deepEqual, genericComponent, getUid, SUPPORTS_FOCUS_VISIBLE, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nconst selectionControlProps = {\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  label: String,\n  offIcon: String,\n  onIcon: String,\n  ripple: {\n    type: Boolean,\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: Boolean,\n  trueValue: null,\n  falseValue: null,\n  modelValue: null,\n  type: String,\n  value: null,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeThemeProps(),\n  ...makeDensityProps()\n};\nexport function useSelectionControl(props) {\n  const group = inject(VSelectionControlGroupSymbol, undefined);\n  const {\n    densityClasses\n  } = useDensity(props, 'v-selection-control');\n  const modelValue = useProxiedModel(props, 'modelValue');\n  const trueValue = computed(() => props.trueValue !== undefined ? props.trueValue : props.value !== undefined ? props.value : true);\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false);\n  const isMultiple = computed(() => (group == null ? void 0 : group.multiple.value) || !!props.multiple || props.multiple == null && Array.isArray(modelValue.value));\n  const model = computed({\n    get() {\n      const val = group ? group.modelValue.value : modelValue.value;\n      return isMultiple.value ? val.some(v => props.valueComparator(v, trueValue.value)) : props.valueComparator(val, trueValue.value);\n    },\n\n    set(val) {\n      const currentValue = val ? trueValue.value : falseValue.value;\n      let newVal = currentValue;\n\n      if (isMultiple.value) {\n        newVal = val ? [...wrapInArray(modelValue.value), currentValue] : wrapInArray(modelValue.value).filter(item => !props.valueComparator(item, trueValue.value));\n      }\n\n      if (group) {\n        group.modelValue.value = newVal;\n      } else {\n        modelValue.value = newVal;\n      }\n    }\n\n  });\n  const {\n    textColorClasses,\n    textColorStyles\n  } = useTextColor(computed(() => {\n    return model.value && !props.error && !props.disabled ? props.color : undefined;\n  }));\n  const icon = computed(() => {\n    var _group$onIcon$value, _group$offIcon$value;\n\n    return model.value ? (_group$onIcon$value = group == null ? void 0 : group.onIcon.value) != null ? _group$onIcon$value : props.onIcon : (_group$offIcon$value = group == null ? void 0 : group.offIcon.value) != null ? _group$offIcon$value : props.offIcon;\n  });\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon\n  };\n}\nexport const VSelectionControl = genericComponent()({\n  name: 'VSelectionControl',\n  directives: {\n    Ripple\n  },\n  inheritAttrs: false,\n  props: selectionControlProps,\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      densityClasses,\n      group,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue\n    } = useSelectionControl(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const isFocused = ref(false);\n    const isFocusVisible = ref(false);\n    const input = ref();\n\n    function onFocus(e) {\n      isFocused.value = true;\n\n      if (!SUPPORTS_FOCUS_VISIBLE || SUPPORTS_FOCUS_VISIBLE && e.target.matches(':focus-visible')) {\n        isFocusVisible.value = true;\n      }\n    }\n\n    function onBlur() {\n      isFocused.value = false;\n      isFocusVisible.value = false;\n    }\n\n    useRender(() => {\n      var _group$type$value, _slots$default, _group$name$value, _slots$input;\n\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      const type = (_group$type$value = group == null ? void 0 : group.type.value) != null ? _group$type$value : props.type;\n      return _createVNode(\"div\", {\n        \"class\": ['v-selection-control', {\n          'v-selection-control--dirty': model.value,\n          'v-selection-control--disabled': props.disabled,\n          'v-selection-control--error': props.error,\n          'v-selection-control--focused': isFocused.value,\n          'v-selection-control--focus-visible': isFocusVisible.value,\n          'v-selection-control--inline': (group == null ? void 0 : group.inline.value) || props.inline\n        }, densityClasses.value, textColorClasses.value]\n      }, [_createVNode(\"div\", {\n        \"class\": \"v-selection-control__wrapper\"\n      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), _withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-selection-control__input'],\n        \"style\": textColorStyles.value\n      }, [icon.value && _createVNode(VIcon, {\n        \"icon\": icon.value\n      }, null, 8, [\"icon\"]), _withDirectives(_createVNode(\"input\", _mergeProps({\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"ref\": input,\n        \"disabled\": props.disabled,\n        \"id\": id.value,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"readonly\": props.readonly,\n        \"type\": type,\n        \"value\": trueValue.value,\n        \"name\": (_group$name$value = group == null ? void 0 : group.name.value) != null ? _group$name$value : props.name,\n        \"aria-checked\": type === 'checkbox' ? model.value : undefined\n      }, attrs), null, 16, [\"onUpdate:modelValue\", \"disabled\", \"id\", \"onBlur\", \"onFocus\", \"readonly\", \"type\", \"value\", \"name\", \"aria-checked\"]), [[_vModelDynamic, model.value]]), (_slots$input = slots.input) == null ? void 0 : _slots$input.call(slots, {\n        model,\n        textColorClasses,\n        props: {\n          onFocus,\n          onBlur,\n          id: id.value\n        }\n      })], 4), [[_resolveDirective(\"ripple\"), props.ripple && [!props.disabled && !props.readonly, null, ['center', 'circle']]]])]), _createVNode(VLabel, {\n        \"disabled\": props.disabled,\n        \"error\": props.error,\n        \"for\": id.value\n      }, {\n        default: () => [label],\n        _: 2\n      }, 8, [\"disabled\", \"error\", \"for\"])], 2);\n    });\n    return {\n      isFocused,\n      input\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VIcon","VLabel","VSelectionControlGroupSymbol","makeDensityProps","useDensity","makeThemeProps","useProxiedModel","useTextColor","Ripple","computed","inject","ref","deepEqual","genericComponent","getUid","SUPPORTS_FOCUS_VISIBLE","useRender","wrapInArray","selectionControlProps","color","String","disabled","Boolean","error","id","inline","label","offIcon","onIcon","ripple","type","default","multiple","name","readonly","trueValue","falseValue","modelValue","value","valueComparator","Function","useSelectionControl","props","group","undefined","densityClasses","isMultiple","Array","isArray","model","get","val","some","v","set","currentValue","newVal","filter","item","textColorClasses","textColorStyles","icon","VSelectionControl","directives","inheritAttrs","emits","setup","attrs","slots","_ref","uid","isFocused","isFocusVisible","input","onFocus","e","target","matches","onBlur","for","_slots$default","$event","_slots$input","_"],"sources":["../../../src/components/VSelectionControl/VSelectionControl.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeThemeProps } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, ref } from 'vue'\nimport { deepEqual, genericComponent, getUid, SUPPORTS_FOCUS_VISIBLE, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { ComputedRef, ExtractPropTypes, PropType, Ref, WritableComputedRef } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  isReadonly: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  textColorClasses: Ref<string[]>\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nconst selectionControlProps = {\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  label: String,\n  offIcon: String,\n  onIcon: String,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  trueValue: null,\n  falseValue: null,\n  modelValue: null,\n  type: String,\n  value: null,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeThemeProps(),\n  ...makeDensityProps(),\n} as const\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<typeof selectionControlProps> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props, 'v-selection-control')\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    group?.multiple.value ||\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => {\n    return model.value\n      ? group?.onIcon.value ?? props.onIcon\n      : group?.offIcon.value ?? props.offIcon\n  })\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  }\n  $slots: MakeSlots<{\n    default: []\n    input: [SelectionControlSlot]\n  }>\n}>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: selectionControlProps,\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      densityClasses,\n      group,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = ref(false)\n    const isFocusVisible = ref(false)\n    const input = ref<HTMLInputElement>()\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (\n        !SUPPORTS_FOCUS_VISIBLE ||\n        (SUPPORTS_FOCUS_VISIBLE && (e.target as HTMLElement).matches(':focus-visible'))\n      ) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const type = group?.type.value ?? props.type\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': group?.inline.value || props.inline,\n            },\n            densityClasses.value,\n            textColorClasses.value,\n          ]}\n        >\n          <div class=\"v-selection-control__wrapper\">\n            { slots.default?.() }\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              style={ textColorStyles.value }\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { icon.value && <VIcon icon={ icon.value } /> }\n\n              <input\n                v-model={ model.value }\n                ref={ input }\n                disabled={ props.disabled }\n                id={ id.value }\n                onBlur={ onBlur }\n                onFocus={ onFocus }\n                readonly={ props.readonly }\n                type={ type }\n                value={ trueValue.value }\n                name={ group?.name.value ?? props.name }\n                aria-checked={ type === 'checkbox' ? model.value : undefined }\n                { ...attrs }\n              />\n\n              { slots.input?.({\n                model,\n                textColorClasses,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              }) }\n            </div>\n          </div>\n\n          <VLabel\n            disabled={ props.disabled }\n            error={ props.error }\n            for={ id.value }\n          >\n            { label }\n          </VLabel>\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n"]},"metadata":{},"sourceType":"module"}