{"ast":null,"code":"// Utilities\nimport { computed } from 'vue';\nimport { propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined\n  },\n  tile: Boolean\n}, 'rounded');\nexport function useRounded(props, name) {\n  const roundedClasses = computed(() => {\n    const classes = [];\n\n    if (props.tile) {\n      classes.push(`${name}--tile`);\n    } else if (props.rounded === true || props.rounded === '') {\n      classes.push(`${name}--rounded`);\n    } else if (typeof props.rounded === 'string' || props.rounded === 0) {\n      for (const value of String(props.rounded).split(' ')) {\n        classes.push(`rounded-${value}`);\n      }\n    }\n\n    return classes;\n  });\n  return {\n    roundedClasses\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,KAAzB;SACSC,oB,qBAET;AAMA;;AACA,OAAO,MAAMC,gBAAgB,GAAGD,YAAY,CAAC;AAC3CE,SAAO,EAAE;AACPC,QAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,CADC;AAEPC,WAAO,EAAEC;AAFF,GADkC;AAK3CC,MAAI,EAAEL;AALqC,CAAD,EAMzC,SANyC,CAArC;AAQP,OAAO,SAASM,UAAT,CAAqBC,KAArB,EAA0CC,IAA1C,EAAwD;AAC7D,QAAMC,cAAc,GAAGd,QAAQ,CAAC,MAAM;AACpC,UAAMe,OAAiB,GAAG,EAA1B;;AAEA,QAAIH,KAAK,CAACF,IAAV,EAAgB;AACdK,aAAO,CAACC,IAARD,CAAc,GAAEF,IAAK,QAArBE;AADF,WAEO,IAAIH,KAAK,CAACT,OAANS,KAAkB,IAAlBA,IAA0BA,KAAK,CAACT,OAANS,KAAkB,EAAhD,EAAoD;AACzDG,aAAO,CAACC,IAARD,CAAc,GAAEF,IAAK,WAArBE;AADK,WAEA,IACL,OAAOH,KAAK,CAACT,OAAb,KAAyB,QAAzB,IACAS,KAAK,CAACT,OAANS,KAAkB,CAFb,EAGL;AACA,WAAK,MAAMK,KAAX,IAAoBV,MAAM,CAACK,KAAK,CAACT,OAAP,CAANI,CAAsBW,KAAtBX,CAA4B,GAA5BA,CAApB,EAAsD;AACpDQ,eAAO,CAACC,IAARD,CAAc,WAAUE,KAAM,EAA9BF;AACD;AACF;;AAED,WAAOA,OAAP;AAhB6B,IAA/B;AAmBA,SAAO;AAAED;AAAF,GAAP;AACD","names":["computed","propsFactory","makeRoundedProps","rounded","type","Boolean","Number","String","default","undefined","tile","useRounded","props","name","roundedClasses","classes","push","value","split"],"sources":["../../src/composables/rounded.ts"],"sourcesContent":["// Utilities\nimport { computed } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nexport interface RoundedProps {\n  rounded?: boolean | string | number | null\n  tile?: boolean\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n  tile: Boolean,\n}, 'rounded')\n\nexport function useRounded (props: RoundedProps, name: string) {\n  const roundedClasses = computed(() => {\n    const classes: string[] = []\n\n    if (props.tile) {\n      classes.push(`${name}--tile`)\n    } else if (props.rounded === true || props.rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof props.rounded === 'string' ||\n      props.rounded === 0\n    ) {\n      for (const value of String(props.rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n"]},"metadata":{},"sourceType":"module"}