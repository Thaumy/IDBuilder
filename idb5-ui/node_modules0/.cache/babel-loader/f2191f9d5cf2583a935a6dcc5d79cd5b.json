{"ast":null,"code":"export default {\n  name: \"IdView\",\n\n  data() {\n    return {\n      UUID: \"1\",\n      Palaflake: \"\",\n      YMD_XXXX: \"\",\n      YMD: \"\",\n      RndNumber: \"\",\n      RndString: \"\"\n    };\n  },\n\n  methods: {\n    regen_btn() {\n      const WebSocket = require('ws');\n\n      const server = new WebSocket.Server({\n        port: 8080\n      });\n      let sockets = [];\n      server.on('connection', function (socket) {\n        sockets.push(socket); // When you receive a message, send that message to every socket.\n\n        socket.on('message', function (msg) {\n          sockets.forEach(s => s.send(msg));\n        }); // When a socket closes, or disconnects, remove it from the array.\n\n        socket.on('close', function () {\n          sockets = sockets.filter(s => s !== socket);\n        });\n      }); //this.get_uuid()\n    },\n\n    get_uuid() {}\n\n  }\n};","map":{"version":3,"mappings":"AAyDA,eAAe;AACbA,MAAI,EAAE,QADO;;AAEbC,MAAI,GAAG;AACL,WAAO;AACLC,UAAI,EAAE,GADD;AAELC,eAAS,EAAE,EAFN;AAGLC,cAAQ,EAAE,EAHL;AAILC,SAAG,EAAE,EAJA;AAKLC,eAAS,EAAE,EALN;AAMLC,eAAS,EAAE;AANN,KAAP;AAQD,GAXY;;AAYbC,SAAO,EAAE;AACPC,aAAS,GAAG;AACV,YAAMC,SAAQ,GAAIC,OAAO,CAAC,IAAD,CAAzB;;AACA,YAAMC,MAAK,GAAI,IAAIF,SAAS,CAACG,MAAd,CAAqB;AAClCC,YAAI,EAAE;AAD4B,OAArB,CAAf;AAIA,UAAIC,OAAM,GAAI,EAAd;AACAH,YAAM,CAACI,EAAP,CAAU,YAAV,EAAwB,UAASC,MAAT,EAAiB;AACvCF,eAAO,CAACG,IAAR,CAAaD,MAAb,EADuC,CAGvC;;AACAA,cAAM,CAACD,EAAP,CAAU,SAAV,EAAqB,UAASG,GAAT,EAAc;AACjCJ,iBAAO,CAACK,OAAR,CAAgBC,KAAKA,CAAC,CAACC,IAAF,CAAOH,GAAP,CAArB;AACD,SAFD,EAJuC,CAQvC;;AACAF,cAAM,CAACD,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5BD,iBAAM,GAAIA,OAAO,CAACQ,MAAR,CAAeF,KAAKA,MAAMJ,MAA1B,CAAV;AACD,SAFD;AAGD,OAZD,EAPU,CAoBV;AAED,KAvBM;;AAwBPO,YAAQ,GAAG,CAEX;;AA1BO;AAZI,CAAf","names":["name","data","UUID","Palaflake","YMD_XXXX","YMD","RndNumber","RndString","methods","regen_btn","WebSocket","require","server","Server","port","sockets","on","socket","push","msg","forEach","s","send","filter","get_uuid"],"sourceRoot":"","sources":["/home/thaumy/Desktop/idb5-ui/src/views/IdView.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row class=\"mb-n12\">\n      <v-col cols=\"6\">\n        <v-text-field v-model=\"UUID\" outlined label=\"UUID\" prepend-inner-icon=\"mdi-alpha-u-box\"></v-text-field>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field\n            outlined\n            label=\"Palaflake\"\n            prepend-inner-icon=\"mdi-alpha-p-box\"\n            v-model=\"Palaflake\"\n        ></v-text-field>\n      </v-col>\n    </v-row>\n    <v-row class=\"mb-n12\">\n      <v-col cols=\"6\">\n        <v-text-field\n            outlined\n            label=\"YMD_XXXX\"\n            prepend-inner-icon=\"mdi-calendar-month\"\n            v-model=\"YMD_XXXX\"\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field outlined label=\"YMD\" prepend-inner-icon=\"mdi-calendar-month\" v-model=\"YMD\"></v-text-field>\n      </v-col>\n    </v-row>\n    <v-row class=\"mb-n4\">\n      <v-col cols=\"6\">\n        <v-text-field outlined label=\"RndNumber\" prepend-inner-icon=\"mdi-tilde\" v-model=\"RndNumber\"></v-text-field>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-text-field outlined label=\"RndString\" prepend-inner-icon=\"mdi-tilde\" v-model=\"RndString\"></v-text-field>\n      </v-col>\n    </v-row>\n    <v-row justify=\"center\" class=\"mb-n6\">\n      <v-col cols=\"3\">\n        <v-text-field\n            outlined\n            label=\"Palaflake Seed\"\n            v-model=\"Palaflake_seed\"\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"2\">\n        <v-checkbox v-model=\"no_joiner_uuid\" label=\"No Joiner UUID\"></v-checkbox>\n      </v-col>\n    </v-row>\n\n    <v-row justify=\"center\">\n      <v-btn width=\"50%\" height=\"32px\" @click=\"regen_btn()\">REGEN</v-btn>\n    </v-row>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: \"IdView\",\n  data() {\n    return {\n      UUID: \"1\",\n      Palaflake: \"\",\n      YMD_XXXX: \"\",\n      YMD: \"\",\n      RndNumber: \"\",\n      RndString: \"\",\n    };\n  },\n  methods: {\n    regen_btn() {\n      const WebSocket = require('ws');\n      const server = new WebSocket.Server({\n        port: 8080\n      });\n\n      let sockets = [];\n      server.on('connection', function(socket) {\n        sockets.push(socket);\n\n        // When you receive a message, send that message to every socket.\n        socket.on('message', function(msg) {\n          sockets.forEach(s => s.send(msg));\n        });\n\n        // When a socket closes, or disconnects, remove it from the array.\n        socket.on('close', function() {\n          sockets = sockets.filter(s => s !== socket);\n        });\n      });\n      //this.get_uuid()\n\n    },\n    get_uuid() {\n\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}