{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { computed, inject, provide, ref } from 'vue';\nimport { rtl } from \"../locale/index.mjs\"; // Types\n\nexport const RtlSymbol = Symbol.for('vuetify:rtl');\nexport function createRtl(localeScope, options) {\n  var _options$rtl, _options$defaultRtl;\n\n  return createRtlScope({\n    rtl: { ...rtl,\n      ...((_options$rtl = options == null ? void 0 : options.rtl) != null ? _options$rtl : {})\n    },\n    isRtl: ref((_options$defaultRtl = options == null ? void 0 : options.defaultRtl) != null ? _options$defaultRtl : false),\n    rtlClasses: ref('')\n  }, localeScope);\n}\nexport function createRtlScope(currentScope, localeScope, options) {\n  const isRtl = computed(() => {\n    if (typeof (options == null ? void 0 : options.rtl) === 'boolean') return options.rtl;\n\n    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {\n      return currentScope.rtl[localeScope.current.value];\n    }\n\n    return currentScope.isRtl.value;\n  });\n  return {\n    isRtl,\n    rtl: currentScope.rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`)\n  };\n}\nexport function provideRtl(props, localeScope) {\n  const currentScope = inject(RtlSymbol);\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');\n  const newScope = createRtlScope(currentScope, localeScope, props);\n  provide(RtlSymbol, newScope);\n  return newScope;\n}\nexport function useRtl() {\n  const currentScope = inject(RtlSymbol);\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');\n  return currentScope;\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,QAA+C,KAA/C;SACSC,W,uBAET;;AAmBA,OAAO,MAAMC,SAAoC,GAAGC,MAAM,CAACC,GAAPD,CAAW,aAAXA,CAA7C;AAEP,OAAO,SAASE,SAAT,CAAoBC,WAApB,EAAiDC,OAAjD,EAAuE;AAAA;;AAC5E,SAAOC,cAAc,CAAC;AACpBP,OAAG,EAAE,EACH,GAAGA,GADA;AAEH,0BAAIM,OAAJ,QAAIA,GAAJ,MAAIA,UAAO,CAAEN,GAAb,2BAAoB,EAApB;AAFG,KADe;AAKpBQ,SAAK,EAAET,GAAG,wBAACO,OAAD,QAACA,GAAD,MAACA,UAAO,CAAEG,UAAV,kCAAwB,KAAxB,CALU;AAMpBC,cAAU,EAAEX,GAAG,CAAC,EAAD;AANK,GAAD,EAOlBM,WAPkB,CAArB;AAQD;AAED,OAAO,SAASE,cAAT,CAAyBI,YAAzB,EAAoDN,WAApD,EAAiFC,OAAjF,EAAkH;AACvH,QAAME,KAAK,GAAGZ,QAAQ,CAAC,MAAM;AAC3B,QAAI,QAAOU,OAAP,QAAOA,GAAP,MAAOA,UAAO,CAAEN,GAAhB,MAAwB,SAA5B,EAAuC,OAAOM,OAAO,CAACN,GAAf;;AACvC,QAAIK,WAAW,CAACO,OAAZP,CAAoBQ,KAApBR,IAA6BM,YAAY,CAACX,GAAbW,CAAiBG,cAAjBH,CAAgCN,WAAW,CAACO,OAAZP,CAAoBQ,KAApDF,CAAjC,EAA6F;AAC3F,aAAOA,YAAY,CAACX,GAAbW,CAAiBN,WAAW,CAACO,OAAZP,CAAoBQ,KAArCF,CAAP;AACD;;AAED,WAAOA,YAAY,CAACH,KAAbG,CAAmBE,KAA1B;AANoB,IAAtB;AASA,SAAO;AACLL,SADK;AAELR,OAAG,EAAEW,YAAY,CAACX,GAFb;AAGLU,cAAU,EAAEd,QAAQ,CAAC,MAAO,gBAAeY,KAAK,CAACK,KAANL,GAAc,KAAdA,GAAsB,KAAM,EAAnD;AAHf,GAAP;AAKD;AAED,OAAO,SAASO,UAAT,CAAqBC,KAArB,EAAsCX,WAAtC,EAAmE;AACxE,QAAMM,YAAY,GAAGd,MAAM,CAACI,SAAD,CAA3B;AAEA,MAAI,CAACU,YAAL,EAAmB,MAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;AAEnB,QAAMC,QAAQ,GAAGX,cAAc,CAACI,YAAD,EAAeN,WAAf,EAA4BW,KAA5B,CAA/B;AAEAlB,SAAO,CAACG,SAAD,EAAYiB,QAAZ,CAAPpB;AAEA,SAAOoB,QAAP;AACD;AAED,OAAO,SAASC,MAAT,GAAmB;AACxB,QAAMR,YAAY,GAAGd,MAAM,CAACI,SAAD,CAA3B;AAEA,MAAI,CAACU,YAAL,EAAmB,MAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;AAEnB,SAAON,YAAP;AACD","names":["computed","inject","provide","ref","rtl","RtlSymbol","Symbol","for","createRtl","localeScope","options","createRtlScope","isRtl","defaultRtl","rtlClasses","currentScope","current","value","hasOwnProperty","provideRtl","props","Error","newScope","useRtl"],"sources":["../../src/composables/rtl.ts"],"sourcesContent":["import { computed, inject, provide, ref } from 'vue'\nimport { rtl } from '@/locale'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\nimport type { LocaleInstance } from './locale'\n\nexport interface RtlOptions {\n  defaultRtl?: boolean\n  rtl?: Record<string, boolean>\n}\n\nexport interface RtlProps {\n  rtl?: boolean\n}\n\nexport interface RtlInstance {\n  isRtl: Ref<boolean>\n  rtl: Record<string, boolean>\n  rtlClasses: Ref<string>\n}\n\nexport const RtlSymbol: InjectionKey<RtlInstance> = Symbol.for('vuetify:rtl')\n\nexport function createRtl (localeScope: LocaleInstance, options?: RtlOptions) {\n  return createRtlScope({\n    rtl: {\n      ...rtl,\n      ...(options?.rtl ?? {}),\n    },\n    isRtl: ref(options?.defaultRtl ?? false),\n    rtlClasses: ref(''),\n  }, localeScope)\n}\n\nexport function createRtlScope (currentScope: RtlInstance, localeScope: LocaleInstance, options?: RtlProps): RtlInstance {\n  const isRtl = computed(() => {\n    if (typeof options?.rtl === 'boolean') return options.rtl\n    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {\n      return currentScope.rtl[localeScope.current.value]\n    }\n\n    return currentScope.isRtl.value\n  })\n\n  return {\n    isRtl,\n    rtl: currentScope.rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`),\n  }\n}\n\nexport function provideRtl (props: RtlProps, localeScope: LocaleInstance) {\n  const currentScope = inject(RtlSymbol)\n\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance')\n\n  const newScope = createRtlScope(currentScope, localeScope, props)\n\n  provide(RtlSymbol, newScope)\n\n  return newScope\n}\n\nexport function useRtl () {\n  const currentScope = inject(RtlSymbol)\n\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance')\n\n  return currentScope\n}\n"]},"metadata":{},"sourceType":"module"}