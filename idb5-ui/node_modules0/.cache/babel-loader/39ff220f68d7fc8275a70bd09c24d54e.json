{"ast":null,"code":"import { getCurrentInstance, propsFactory } from \"../util/index.mjs\"; // Utilities\n\nimport { computed, inject, provide, ref } from 'vue';\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Types\n\nexport const FormKey = Symbol.for('vuetify:form');\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean,\n    default: null\n  }\n});\nexport function createForm(props) {\n  const vm = getCurrentInstance('createForm');\n  const model = useProxiedModel(props, 'modelValue');\n  const isDisabled = computed(() => props.disabled);\n  const isReadonly = computed(() => props.readonly);\n  const isValidating = ref(false);\n  const items = ref([]);\n  const errorMessages = ref([]);\n\n  async function submit(e) {\n    e.preventDefault();\n    const results = [];\n    let valid = true;\n    errorMessages.value = [];\n    model.value = null;\n    isValidating.value = true;\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate();\n\n      if (itemErrorMessages.length > 0) {\n        valid = false;\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages\n        });\n      }\n\n      if (!valid && props.fastFail) break;\n    }\n\n    errorMessages.value = results;\n    model.value = valid;\n    isValidating.value = false;\n    vm == null ? void 0 : vm.emit('submit', e);\n  }\n\n  async function reset(e) {\n    e.preventDefault();\n    items.value.forEach(item => item.reset());\n    model.value = null;\n    vm == null ? void 0 : vm.emit('reset', e);\n  }\n\n  async function resetValidation() {\n    items.value.forEach(item => item.resetValidation());\n    errorMessages.value = [];\n    model.value = null;\n    vm == null ? void 0 : vm.emit('resetValidation');\n  }\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation) => {\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation\n      });\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id;\n      });\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items\n  });\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    submit,\n    reset,\n    resetValidation\n  };\n}\nexport function useForm() {\n  return inject(FormKey, null);\n}","map":{"version":3,"mappings":"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","names":["getCurrentInstance","propsFactory","computed","inject","provide","ref","useProxiedModel","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","lazyValidation","readonly","modelValue","type","default","createForm","props","vm","model","isDisabled","isReadonly","isValidating","items","errorMessages","submit","e","preventDefault","results","valid","value","item","itemErrorMessages","validate","length","push","id","emit","reset","forEach","resetValidation","register","unregister","filter","useForm"],"sources":["../../src/composables/form.ts"],"sourcesContent":["import { getCurrentInstance, propsFactory } from '@/util'\n// Utilities\nimport { computed, inject, provide, ref } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n}\n\ninterface FormValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const vm = getCurrentInstance('createForm')\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errorMessages = ref<FormValidationResult[]>([])\n\n  async function submit (e: Event) {\n    e.preventDefault()\n\n    const results = []\n    let valid = true\n\n    errorMessages.value = []\n    model.value = null\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errorMessages.value = results\n    model.value = valid\n    isValidating.value = false\n\n    vm?.emit('submit', e)\n  }\n\n  async function reset (e: Event) {\n    e.preventDefault()\n\n    items.value.forEach(item => item.reset())\n    model.value = null\n\n    vm?.emit('reset', e)\n  }\n\n  async function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errorMessages.value = []\n    model.value = null\n\n    vm?.emit('resetValidation')\n  }\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation) => {\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    submit,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"]},"metadata":{},"sourceType":"module"}