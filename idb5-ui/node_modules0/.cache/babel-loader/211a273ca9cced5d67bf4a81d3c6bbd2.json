{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\n\nconst Limiter = require('./limiter');\n\nconst {\n  kStatusCode\n} = require('./constants');\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error'); //\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\n\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */\n\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n  /**\n   * @type {String}\n   */\n\n\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n\n\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n\n\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n    this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n    return this.params;\n  }\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n\n\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n\n      this._deflate = null;\n\n      if (callback) {\n        callback(new Error('The deflate stream was closed while data was being processed'));\n      }\n    }\n  }\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n\n\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find(params => {\n      if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n\n\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n      throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n    }\n\n    return params;\n  }\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n\n\n  normalizeParams(configurations) {\n    configurations.forEach(params => {\n      Object.keys(params).forEach(key => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n            }\n\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n          }\n\n          value = num;\n        } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {\n          if (value !== true) {\n            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n    return configurations;\n  }\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n\n\n  decompress(data, fin, callback) {\n    zlibLimiter.add(done => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n\n\n  compress(data, fin, callback) {\n    zlibLimiter.add(done => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n\n\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n      this._inflate = zlib.createInflateRaw({ ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n\n      this._inflate.on('error', inflateOnError);\n\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n\n\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n      this._deflate = zlib.createDeflateRaw({ ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n      if (fin) data = data.slice(0, data.length - 4); //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n\n      this._deflate[kCallback] = null;\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n\n}\n\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\n\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\n\n\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\n\n\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}","map":{"version":3,"sources":["/home/thaumy/Desktop/idb5-ui/node_modules/ws/lib/permessage-deflate.js"],"names":["zlib","require","bufferUtil","Limiter","kStatusCode","TRAILER","Buffer","from","kPerMessageDeflate","Symbol","kTotalLength","kCallback","kBuffers","kError","zlibLimiter","PerMessageDeflate","constructor","options","isServer","maxPayload","_maxPayload","_options","_threshold","threshold","undefined","_isServer","_deflate","_inflate","params","concurrency","concurrencyLimit","extensionName","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","configurations","normalizeParams","acceptAsServer","acceptAsClient","cleanup","close","callback","Error","offers","opts","accepted","find","response","forEach","Object","keys","key","value","length","num","Number","isInteger","TypeError","decompress","data","fin","add","done","_decompress","err","result","compress","_compress","endpoint","windowBits","Z_DEFAULT_WINDOWBITS","createInflateRaw","zlibInflateOptions","on","inflateOnError","inflateOnData","write","flush","concat","_readableState","endEmitted","reset","createDeflateRaw","zlibDeflateOptions","deflateOnData","Z_SYNC_FLUSH","slice","module","exports","chunk","push","RangeError","code","removeListener"],"mappings":"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","sourcesContent":["'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n"]},"metadata":{},"sourceType":"script"}