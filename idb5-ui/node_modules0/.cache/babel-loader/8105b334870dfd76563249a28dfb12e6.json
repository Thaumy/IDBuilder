{"ast":null,"code":"import { withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, vModelDynamic as _vModelDynamic, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextField.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\";\nimport { filterInputAttrs } from \"../VInput/VInput.mjs\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nconst dirtyTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport const VTextField = defineComponent({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    ...makeVFieldProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const internalDirty = ref(false);\n    const isDirty = computed(() => {\n      return internalDirty.value || !!model.value || dirtyTypes.includes(props.type);\n    });\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    const fieldRef = ref();\n\n    function focus() {\n      var _fieldRef$value, _fieldRef$value$input;\n\n      (_fieldRef$value = fieldRef.value) == null ? void 0 : (_fieldRef$value$input = _fieldRef$value.inputRef) == null ? void 0 : _fieldRef$value$input.focus();\n    }\n\n    function blur() {\n      var _fieldRef$value2, _fieldRef$value2$inpu;\n\n      (_fieldRef$value2 = fieldRef.value) == null ? void 0 : (_fieldRef$value2$inpu = _fieldRef$value2.inputRef) == null ? void 0 : _fieldRef$value2$inpu.blur();\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [fieldProps, _] = filterFieldProps(props);\n      return _createVNode(VField, _mergeProps({\n        \"ref\": fieldRef,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix\n        }],\n        \"active\": isDirty.value,\n        \"onUpdate:active\": val => internalDirty.value = val,\n        \"onClick:control\": focus,\n        \"onClick:clear\": e => {\n          e.stopPropagation();\n          model.value = '';\n        },\n        \"role\": \"textbox\"\n      }, rootAttrs, fieldProps), { ...slots,\n        default: _ref2 => {\n          let {\n            isActive,\n            isDisabled,\n            isReadonly,\n            inputRef,\n            props: {\n              class: fieldClass,\n              ...slotProps\n            }\n          } = _ref2;\n          const showPlaceholder = isActive || props.persistentPlaceholder;\n          return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n            \"class\": \"v-text-field__prefix\",\n            \"style\": {\n              opacity: showPlaceholder ? undefined : '0'\n            }\n          }, [props.prefix], 4), _withDirectives(_createVNode(\"input\", _mergeProps({\n            \"class\": fieldClass,\n            \"style\": {\n              opacity: showPlaceholder ? undefined : '0'\n            },\n            \"onUpdate:modelValue\": $event => model.value = $event,\n            \"ref\": inputRef,\n            \"autofocus\": props.autofocus,\n            \"readonly\": isReadonly.value,\n            \"disabled\": isDisabled.value,\n            \"placeholder\": props.placeholder,\n            \"size\": 1,\n            \"type\": props.type\n          }, slotProps, inputAttrs), null, 16, [\"onUpdate:modelValue\", \"autofocus\", \"readonly\", \"disabled\", \"placeholder\", \"type\"]), [[_vModelDynamic, model.value], [_resolveDirective(\"intersect\"), {\n            handler: onIntersect\n          }, null, {\n            once: true\n          }]]), props.suffix && _createVNode(\"span\", {\n            \"class\": \"v-text-field__suffix\",\n            \"style\": {\n              opacity: showPlaceholder ? undefined : '0'\n            }\n          }, [props.suffix], 4)]);\n        },\n        details: hasCounter ? _ref3 => {\n          let {\n            isFocused\n          } = _ref3;\n          return _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter, 8, [\"active\", \"value\", \"max\"])]);\n        } : undefined\n      }, 16, [\"class\", \"active\", \"onUpdate:active\", \"onClick:control\", \"onClick:clear\"]);\n    });\n    return {\n      fieldRef,\n      focus,\n      blur\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","VCounter","VField","filterInputAttrs","useProxiedModel","Intersect","computed","ref","defineComponent","useRender","dirtyTypes","VTextField","name","directives","inheritAttrs","props","autofocus","Boolean","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","type","default","emits","val","setup","attrs","slots","_ref","model","internalDirty","isDirty","value","includes","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","fieldRef","inputRef","blur","hasCounter","rootAttrs","inputAttrs","fieldProps","_","e","stopPropagation","_ref2","isActive","isDisabled","isReadonly","class","fieldClass","slotProps","showPlaceholder","opacity","$event","handler","once","details","_ref3","isFocused"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\nimport { filterInputAttrs } from '@/components/VInput/VInput'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst dirtyTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const VTextField = defineComponent({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n\n    const internalDirty = ref(false)\n    const isDirty = computed(() => {\n      return internalDirty.value || !!model.value || dirtyTypes.includes(props.type)\n    })\n\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const fieldRef = ref<VField>()\n    function focus () {\n      fieldRef.value?.inputRef?.focus()\n    }\n    function blur () {\n      fieldRef.value?.inputRef?.blur()\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [fieldProps, _] = filterFieldProps(props)\n\n      return (\n        <VField\n          ref={ fieldRef }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n            },\n          ]}\n          active={ isDirty.value }\n          onUpdate:active={ val => internalDirty.value = val }\n          onClick:control={ focus }\n          onClick:clear={ e => {\n            e.stopPropagation()\n\n            model.value = ''\n          }}\n          role=\"textbox\"\n          { ...rootAttrs }\n          { ...fieldProps }\n          v-slots={{\n            ...slots,\n            default: ({\n              isActive,\n              isDisabled,\n              isReadonly,\n              inputRef,\n              props: { class: fieldClass, ...slotProps },\n            }) => {\n              const showPlaceholder = isActive || props.persistentPlaceholder\n              return (\n                <>\n                  { props.prefix && (\n                    <span class=\"v-text-field__prefix\" style={{ opacity: showPlaceholder ? undefined : '0' }}>\n                      { props.prefix }\n                    </span>\n                  ) }\n\n                  <input\n                    class={ fieldClass }\n                    style={{ opacity: showPlaceholder ? undefined : '0' }} // can't this just be a class?\n                    v-model={ model.value }\n                    v-intersect={[{\n                      handler: onIntersect,\n                    }, null, ['once']]}\n                    ref={ inputRef }\n                    autofocus={ props.autofocus }\n                    readonly={ isReadonly.value }\n                    disabled={ isDisabled.value }\n                    placeholder={ props.placeholder }\n                    size={ 1 }\n                    type={ props.type }\n                    { ...slotProps }\n                    { ...inputAttrs }\n                  />\n\n                  { props.suffix && (\n                    <span class=\"v-text-field__suffix\" style={{ opacity: showPlaceholder ? undefined : '0' }}>\n                      { props.suffix }\n                    </span>\n                  ) }\n                </>\n              )\n            },\n            details: hasCounter ? ({ isFocused }) => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        />\n      )\n    })\n\n    return {\n      fieldRef,\n      focus,\n      blur,\n    }\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}