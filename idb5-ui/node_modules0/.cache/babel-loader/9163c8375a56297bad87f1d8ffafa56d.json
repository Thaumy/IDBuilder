{"ast":null,"code":"import { mergeProps as _mergeProps, Fragment as _Fragment, withDirectives as _withDirectives, vShow as _vShow, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VField.css\"; // Components\n\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { VFieldLabel } from \"./VFieldLabel.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\n\nimport { LoaderSlot, makeLoaderProps, useLoader } from \"../../composables/loader.mjs\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watch, watchEffect } from 'vue';\nimport { convertToUnit, genericComponent, getUid, nullifyTransforms, pick, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\"; // Types\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'contained', 'plain'];\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: String,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: String,\n    default: '$clear'\n  },\n  color: String,\n  id: String,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: String,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String,\n    default: 'filled',\n    validator: v => allowedVariants.includes(v)\n  },\n  ...makeThemeProps(),\n  ...makeLoaderProps(),\n  ...makeVInputProps()\n}, 'v-field');\nexport const VField = genericComponent()({\n  name: 'VField',\n  inheritAttrs: false,\n  props: {\n    active: Boolean,\n    dirty: Boolean,\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:clear': e => true,\n    'click:prepend-inner': e => true,\n    'click:append-inner': e => true,\n    'click:control': props => true,\n    'update:active': active => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = useTheme(props);\n    const {\n      loaderClasses\n    } = useLoader(props, 'v-field');\n    const isActive = useProxiedModel(props, 'active');\n    const uid = getUid();\n    const labelRef = ref();\n    const floatingLabelRef = ref();\n    const controlRef = ref();\n    const inputRef = ref();\n    const isFocused = ref(false);\n    const id = computed(() => props.id || `input-${uid}`);\n    watchEffect(() => isActive.value = isFocused.value || props.dirty);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => {\n      return isActive.value && isFocused.value && !props.error && !props.disabled ? props.color : undefined;\n    }));\n    watch(isActive, val => {\n      if (!props.singleLine) {\n        const el = labelRef.value.$el;\n        const targetEl = floatingLabelRef.value.$el;\n        const rect = nullifyTransforms(el);\n        const targetRect = targetEl.getBoundingClientRect();\n        const x = targetRect.x - rect.x;\n        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);\n        const targetWidth = targetRect.width / 0.75;\n        const width = Math.abs(targetWidth - rect.width) > 1 ? {\n          maxWidth: convertToUnit(targetWidth)\n        } : undefined;\n        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1000;\n        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue('--v-field-label-scale'));\n        el.style.visibility = 'visible';\n        targetEl.style.visibility = 'hidden';\n        el.animate([{\n          transform: 'translate(0)'\n        }, {\n          transform: `translate(${x}px, ${y}px) scale(${scale})`,\n          ...width\n        }], {\n          duration,\n          easing: standardEasing,\n          direction: val ? 'normal' : 'reverse'\n        }).finished.then(() => {\n          el.style.removeProperty('visibility');\n          targetEl.style.removeProperty('visibility');\n        });\n      }\n    }, {\n      flush: 'post'\n    });\n\n    function focus() {\n      isFocused.value = true;\n    }\n\n    function blur() {\n      isFocused.value = false;\n    }\n\n    const slotProps = computed(() => ({\n      isActive: isActive.value,\n      isDirty: props.dirty,\n      isFocused: isFocused.value,\n      inputRef,\n      controlRef,\n      blur,\n      focus\n    }));\n\n    function onClick(e) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault();\n      }\n\n      emit('click:control', slotProps.value);\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined';\n      const hasPrepend = slots.prependInner || props.prependInnerIcon;\n      const hasClear = !!(props.clearable || slots.clear);\n      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      const [inputProps, _] = filterInputProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-field', {\n          'v-field--active': isActive.value,\n          'v-field--appended': hasAppend,\n          'v-field--dirty': props.dirty,\n          'v-field--focused': isFocused.value,\n          'v-field--has-background': !!props.bgColor,\n          'v-field--persistent-clear': props.persistentClear,\n          'v-field--prepended': hasPrepend,\n          'v-field--reverse': props.reverse,\n          'v-field--single-line': props.singleLine,\n          [`v-field--variant-${props.variant}`]: true\n        }, themeClasses.value, loaderClasses.value, textColorClasses.value],\n        \"style\": [textColorStyles.value],\n        \"focused\": isFocused.value\n      }, inputProps, attrs), {\n        prepend: slots.prepend ? props => {\n          var _slots$prepend;\n\n          return (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, { ...props,\n            ...slotProps.value\n          });\n        } : undefined,\n        append: slots.append ? props => {\n          var _slots$append;\n\n          return (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, { ...props,\n            ...slotProps.value\n          });\n        } : undefined,\n        details: slots.details ? props => {\n          var _slots$details;\n\n          return (_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, { ...props,\n            ...slotProps.value\n          });\n        } : undefined,\n        default: defaultProps => {\n          var _slots$prependInner, _slots$default, _slots$appendInner;\n\n          return _createVNode(\"div\", {\n            \"class\": ['v-field__control', backgroundColorClasses.value],\n            \"style\": backgroundColorStyles.value,\n            \"onClick\": onClick\n          }, [_createVNode(\"div\", {\n            \"class\": \"v-field__overlay\"\n          }, null), _createVNode(LoaderSlot, {\n            \"name\": \"v-field\",\n            \"active\": props.loading,\n            \"color\": !defaultProps.isValid.value ? undefined : props.color\n          }, {\n            default: slots.loader\n          }, 8, [\"active\", \"color\"]), hasPrepend && _createVNode(\"div\", {\n            \"class\": \"v-field__prepend-inner\",\n            \"onClick\": e => emit('click:prepend-inner', e)\n          }, [props.prependInnerIcon && _createVNode(VIcon, {\n            \"icon\": props.prependInnerIcon\n          }, null, 8, [\"icon\"]), slots == null ? void 0 : (_slots$prependInner = slots.prependInner) == null ? void 0 : _slots$prependInner.call(slots, defaultProps)], 8, [\"onClick\"]), _createVNode(\"div\", {\n            \"class\": \"v-field__field\"\n          }, [['contained', 'filled'].includes(props.variant) && !props.singleLine && _createVNode(VFieldLabel, {\n            \"ref\": floatingLabelRef,\n            \"floating\": true\n          }, {\n            default: () => [label],\n            _: 2\n          }, 8, [\"floating\"]), _createVNode(VFieldLabel, {\n            \"ref\": labelRef,\n            \"for\": id.value\n          }, {\n            default: () => [label],\n            _: 2\n          }, 8, [\"for\"]), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, { ...slotProps.value,\n            ...defaultProps,\n            props: {\n              id: id.value,\n              class: 'v-field__input',\n              onFocus: () => isFocused.value = true,\n              onBlur: () => isFocused.value = false\n            },\n            focus,\n            blur\n          })]), hasClear && _createVNode(VExpandXTransition, null, {\n            default: () => [_withDirectives(_createVNode(\"div\", {\n              \"class\": \"v-field__clearable\",\n              \"onClick\": e => emit('click:clear', e)\n            }, [slots.clear ? slots.clear() : _createVNode(VIcon, {\n              \"icon\": props.clearIcon\n            }, null, 8, [\"icon\"])], 8, [\"onClick\"]), [[_vShow, props.dirty]])]\n          }), hasAppend && _createVNode(\"div\", {\n            \"class\": \"v-field__append-inner\",\n            \"onClick\": e => emit('click:append-inner', e)\n          }, [slots == null ? void 0 : (_slots$appendInner = slots.appendInner) == null ? void 0 : _slots$appendInner.call(slots, defaultProps), props.appendInnerIcon && _createVNode(VIcon, {\n            \"icon\": props.appendInnerIcon\n          }, null, 8, [\"icon\"])], 8, [\"onClick\"]), _createVNode(\"div\", {\n            \"class\": \"v-field__outline\"\n          }, [isOutlined && _createVNode(_Fragment, null, [_createVNode(\"div\", {\n            \"class\": \"v-field__outline__start\"\n          }, null), _createVNode(\"div\", {\n            \"class\": \"v-field__outline__notch\"\n          }, [!props.singleLine && _createVNode(VFieldLabel, {\n            \"ref\": floatingLabelRef,\n            \"floating\": true\n          }, {\n            default: () => [label],\n            _: 2\n          }, 8, [\"floating\"])]), _createVNode(\"div\", {\n            \"class\": \"v-field__outline__end\"\n          }, null)]), ['plain', 'underlined'].includes(props.variant) && !props.singleLine && _createVNode(VFieldLabel, {\n            \"ref\": floatingLabelRef,\n            \"floating\": true\n          }, {\n            default: () => [label],\n            _: 2\n          }, 8, [\"floating\"])])], 14, [\"onClick\"]);\n        }\n      }, 16, [\"class\", \"style\", \"focused\"]);\n    });\n    return {\n      inputRef,\n      controlRef\n    };\n  }\n\n}); // TODO: this is kinda slow, might be better to implicitly inherit props instead\n\nexport function filterFieldProps(attrs) {\n  return pick(attrs, Object.keys(VField.props));\n}","map":{"version":3,"mappings":"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","names":["filterInputProps","makeVInputProps","VInput","VExpandXTransition","VFieldLabel","VIcon","LoaderSlot","makeLoaderProps","useLoader","makeThemeProps","useTheme","useBackgroundColor","useTextColor","useProxiedModel","computed","ref","toRef","watch","watchEffect","convertToUnit","genericComponent","getUid","nullifyTransforms","pick","propsFactory","standardEasing","useRender","allowedVariants","makeVFieldProps","appendInnerIcon","String","bgColor","clearable","Boolean","clearIcon","type","default","color","id","label","persistentClear","prependInnerIcon","reverse","singleLine","variant","validator","v","includes","VField","name","inheritAttrs","props","active","dirty","emits","e","val","setup","attrs","emit","slots","_ref","themeClasses","loaderClasses","isActive","uid","labelRef","floatingLabelRef","controlRef","inputRef","isFocused","value","backgroundColorClasses","backgroundColorStyles","textColorClasses","textColorStyles","error","disabled","undefined","el","$el","targetEl","rect","targetRect","getBoundingClientRect","x","y","height","targetWidth","width","Math","abs","maxWidth","duration","parseFloat","getComputedStyle","transitionDuration","scale","getPropertyValue","style","visibility","animate","transform","easing","direction","finished","then","removeProperty","flush","focus","blur","slotProps","isDirty","onClick","target","document","activeElement","preventDefault","isOutlined","hasPrepend","prependInner","hasClear","clear","hasAppend","appendInner","for","inputProps","_","prepend","_slots$prepend","append","_slots$append","details","_slots$details","defaultProps","loading","isValid","loader","_slots$prependInner","_slots$default","class","onFocus","onBlur","_slots$appendInner","filterFieldProps","Object","keys"],"sources":["../../../src/components/VField/VField.tsx"],"sourcesContent":["// Styles\nimport './VField.sass'\n\n// Components\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VFieldLabel } from './VFieldLabel'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, toRef, watch, watchEffect } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getUid,\n  nullifyTransforms,\n  pick,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { PropType, Ref } from 'vue'\nimport type { VInputSlot } from '@/components/VInput/VInput'\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'contained', 'plain'] as const\ntype Variant = typeof allowedVariants[number]\n\nexport interface DefaultInputSlot {\n  isActive: boolean\n  isDirty: boolean\n  isFocused: boolean\n  inputRef: Ref<HTMLInputElement | undefined>\n  controlRef: Ref<HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n\nexport interface VFieldSlot extends DefaultInputSlot, VInputSlot {\n  props: Record<string, unknown>\n}\n\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: String,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: String,\n    default: '$clear',\n  },\n  color: String,\n  id: String,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: String,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'filled',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n\n  ...makeThemeProps(),\n  ...makeLoaderProps(),\n  ...makeVInputProps(),\n}, 'v-field')\n\nexport const VField = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  }\n  $slots: MakeSlots<{\n    prependInner: [DefaultInputSlot & VInputSlot]\n    clear: []\n    appendInner: [DefaultInputSlot & VInputSlot]\n    label: [DefaultInputSlot & VInputSlot]\n    prepend: [DefaultInputSlot & VInputSlot]\n    append: [DefaultInputSlot & VInputSlot]\n    details: [DefaultInputSlot & VInputSlot]\n    loader: [{\n      color: string | undefined\n      isActive: boolean\n    }]\n    default: [VFieldSlot]\n  }>\n}>()({\n  name: 'VField',\n\n  inheritAttrs: false,\n\n  props: {\n    active: Boolean,\n    dirty: Boolean,\n\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:clear': (e: Event) => true,\n    'click:prepend-inner': (e: MouseEvent) => true,\n    'click:append-inner': (e: MouseEvent) => true,\n    'click:control': (props: DefaultInputSlot) => true,\n    'update:active': (active: boolean) => true,\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { themeClasses } = useTheme(props)\n    const { loaderClasses } = useLoader(props, 'v-field')\n    const isActive = useProxiedModel(props, 'active')\n    const uid = getUid()\n\n    const labelRef = ref<VFieldLabel>()\n    const floatingLabelRef = ref<VFieldLabel>()\n    const controlRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLInputElement>()\n    const isFocused = ref(false)\n    const id = computed(() => props.id || `input-${uid}`)\n\n    watchEffect(() => isActive.value = isFocused.value || props.dirty)\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n      return (\n        isActive.value &&\n        isFocused.value &&\n        !props.error &&\n        !props.disabled\n      ) ? props.color : undefined\n    }))\n\n    watch(isActive, val => {\n      if (!props.singleLine) {\n        const el: HTMLElement = labelRef.value!.$el\n        const targetEl: HTMLElement = floatingLabelRef.value!.$el\n        const rect = nullifyTransforms(el)\n        const targetRect = targetEl.getBoundingClientRect()\n\n        const x = targetRect.x - rect.x\n        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2)\n\n        const targetWidth = targetRect.width / 0.75\n        const width = Math.abs(targetWidth - rect.width) > 1\n          ? { maxWidth: convertToUnit(targetWidth) }\n          : undefined\n\n        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1000\n        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue('--v-field-label-scale'))\n\n        el.style.visibility = 'visible'\n        targetEl.style.visibility = 'hidden'\n\n        el.animate([\n          { transform: 'translate(0)' },\n          { transform: `translate(${x}px, ${y}px) scale(${scale})`, ...width },\n        ], {\n          duration,\n          easing: standardEasing,\n          direction: val ? 'normal' : 'reverse',\n        }).finished.then(() => {\n          el.style.removeProperty('visibility')\n          targetEl.style.removeProperty('visibility')\n        })\n      }\n    }, { flush: 'post' })\n\n    function focus () {\n      isFocused.value = true\n    }\n\n    function blur () {\n      isFocused.value = false\n    }\n\n    const slotProps = computed<DefaultInputSlot>(() => ({\n      isActive: isActive.value,\n      isDirty: props.dirty,\n      isFocused: isFocused.value,\n      inputRef,\n      controlRef,\n      blur,\n      focus,\n    }))\n\n    function onClick (e: MouseEvent) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault()\n      }\n\n      emit('click:control', slotProps.value)\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined'\n      const hasPrepend = (slots.prependInner || props.prependInnerIcon)\n      const hasClear = !!(props.clearable || slots.clear)\n      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const [inputProps, _] = filterInputProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-field',\n            {\n              'v-field--active': isActive.value,\n              'v-field--appended': hasAppend,\n              'v-field--dirty': props.dirty,\n              'v-field--focused': isFocused.value,\n              'v-field--has-background': !!props.bgColor,\n              'v-field--persistent-clear': props.persistentClear,\n              'v-field--prepended': hasPrepend,\n              'v-field--reverse': props.reverse,\n              'v-field--single-line': props.singleLine,\n              [`v-field--variant-${props.variant}`]: true,\n            },\n            themeClasses.value,\n            loaderClasses.value,\n            textColorClasses.value,\n          ]}\n          style={[\n            textColorStyles.value,\n          ]}\n          focused={ isFocused.value }\n          { ...inputProps }\n          { ...attrs }\n          v-slots={{\n            prepend: slots.prepend ? props => slots.prepend?.({ ...props, ...slotProps.value }) : undefined,\n            append: slots.append ? props => slots.append?.({ ...props, ...slotProps.value }) : undefined,\n            details: slots.details ? props => slots.details?.({ ...props, ...slotProps.value }) : undefined,\n            default: defaultProps => (\n              <div\n                class={[\n                  'v-field__control',\n                  backgroundColorClasses.value,\n                ]}\n                style={ backgroundColorStyles.value }\n                onClick={ onClick }\n              >\n                <div class=\"v-field__overlay\" />\n\n                <LoaderSlot\n                  name=\"v-field\"\n                  active={ props.loading }\n                  color={ !defaultProps.isValid.value ? undefined : props.color }\n                  v-slots={{ default: slots.loader }}\n                />\n\n                { hasPrepend && (\n                  <div\n                    class=\"v-field__prepend-inner\"\n                    onClick={ e => emit('click:prepend-inner', e) }\n                  >\n                    { props.prependInnerIcon && (\n                      <VIcon icon={ props.prependInnerIcon } />\n                    ) }\n\n                    { slots?.prependInner?.(defaultProps) }\n                  </div>\n                ) }\n\n                <div class=\"v-field__field\">\n                  { ['contained', 'filled'].includes(props.variant) && !props.singleLine && (\n                    <VFieldLabel ref={ floatingLabelRef } floating>\n                      { label }\n                    </VFieldLabel>\n                  ) }\n\n                  <VFieldLabel ref={ labelRef } for={ id.value }>\n                    { label }\n                  </VFieldLabel>\n\n                  { slots.default?.({\n                    ...slotProps.value,\n                    ...defaultProps,\n                    props: {\n                      id: id.value,\n                      class: 'v-field__input',\n                      onFocus: () => (isFocused.value = true),\n                      onBlur: () => (isFocused.value = false),\n                    },\n                    focus,\n                    blur,\n                  } as VFieldSlot) }\n                </div>\n\n                { hasClear && (\n                  <VExpandXTransition>\n                    <div\n                      class=\"v-field__clearable\"\n                      onClick={ (e: Event) => emit('click:clear', e) }\n                      v-show={ props.dirty }\n                    >\n                      { slots.clear\n                        ? slots.clear()\n                        : <VIcon icon={ props.clearIcon } />\n                      }\n                    </div>\n                  </VExpandXTransition>\n                ) }\n\n                { hasAppend && (\n                  <div\n                    class=\"v-field__append-inner\"\n                    onClick={ e => emit('click:append-inner', e) }\n                  >\n                    { slots?.appendInner?.(defaultProps) }\n\n                    { props.appendInnerIcon && (\n                      <VIcon icon={ props.appendInnerIcon } />\n                    ) }\n                  </div>\n                ) }\n\n                <div class=\"v-field__outline\">\n                  { isOutlined && (\n                    <>\n                      <div class=\"v-field__outline__start\" />\n\n                      <div class=\"v-field__outline__notch\">\n                        { !props.singleLine && (\n                          <VFieldLabel ref={ floatingLabelRef } floating>\n                            { label }\n                          </VFieldLabel>\n                        ) }\n                      </div>\n\n                      <div class=\"v-field__outline__end\" />\n                    </>\n                  ) }\n\n                  { ['plain', 'underlined'].includes(props.variant) && !props.singleLine && (\n                    <VFieldLabel ref={ floatingLabelRef } floating>\n                      { label }\n                    </VFieldLabel>\n                  ) }\n                </div>\n              </div>\n            ),\n          }}\n        />\n      )\n    })\n\n    return {\n      inputRef,\n      controlRef,\n    }\n  },\n})\n\nexport type VField = InstanceType<typeof VField>\n\n// TODO: this is kinda slow, might be better to implicitly inherit props instead\nexport function filterFieldProps (attrs: Record<string, unknown>) {\n  return pick(attrs, Object.keys(VField.props))\n}\n"]},"metadata":{},"sourceType":"module"}