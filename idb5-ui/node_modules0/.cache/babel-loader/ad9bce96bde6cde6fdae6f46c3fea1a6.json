{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst EventEmitter = require('events');\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst net = require('net');\n\nconst tls = require('tls');\n\nconst {\n  createHash\n} = require('crypto');\n\nconst extension = require('./extension');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst subprotocol = require('./subprotocol');\n\nconst WebSocket = require('./websocket');\n\nconst {\n  GUID,\n  kWebSocket\n} = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\n\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null,\n      // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n      throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + 'must be specified');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n\n\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n\n\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n\n      this._removeListeners = this._server = null; //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n\n\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n    const key = req.headers['sec-websocket-key'] !== undefined ? req.headers['sec-websocket-key'] : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (this.options.perMessageDeflate && secWebSocketExtensions !== undefined) {\n      const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    } //\n    // Optionally call external client verification handler.\n    //\n\n\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n\n\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n    const digest = createHash('sha1').update(key + GUID).digest('base64');\n    const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    } //\n    // Allow external modification/inspection of handshake headers.\n    //\n\n\n    this.emit('headers', headers, req);\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n\n}\n\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\n\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\n\n\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */\n\n\nfunction socketOnError() {\n  this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\n\n\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n    socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}","map":{"version":3,"sources":["/home/thaumy/Desktop/idb5-ui/node_modules/ws/lib/websocket-server.js"],"names":["EventEmitter","require","http","https","net","tls","createHash","extension","PerMessageDeflate","subprotocol","WebSocket","GUID","kWebSocket","keyRegex","RUNNING","CLOSING","CLOSED","WebSocketServer","constructor","options","callback","maxPayload","skipUTF8Validation","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","STATUS_CODES","writeHead","length","end","listen","emitConnection","emit","bind","_removeListeners","addListeners","listening","error","upgrade","socket","head","handleUpgrade","clients","Set","_shouldEmitClose","_state","address","Error","close","cb","once","process","nextTick","emitClose","size","shouldHandle","index","url","indexOf","pathname","slice","on","socketOnError","key","headers","undefined","version","method","toLowerCase","test","abortHandshake","secWebSocketProtocol","protocols","parse","err","secWebSocketExtensions","extensions","offers","extensionName","accept","info","origin","secure","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","destroy","digest","update","ws","protocol","values","next","value","push","_protocol","params","format","_extensions","write","concat","join","removeListener","setSocket","add","delete","module","exports","map","event","Object","keys","removeListeners","Connection","Buffer","byteLength","h"],"mappings":"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","sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key']\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n"]},"metadata":{},"sourceType":"script"}