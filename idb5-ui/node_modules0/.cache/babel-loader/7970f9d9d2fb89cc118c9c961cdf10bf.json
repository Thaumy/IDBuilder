{"ast":null,"code":"export const independentSelectStrategy = {\n  select: _ref => {\n    let {\n      id,\n      value,\n      selected\n    } = _ref;\n    selected.set(id, value ? 'on' : 'off');\n    return selected;\n  },\n  in: (v, children, parents) => {\n    let map = new Map();\n\n    for (const id of v || []) {\n      map = independentSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents\n      });\n    }\n\n    return map;\n  },\n  out: v => {\n    const arr = [];\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on') arr.push(key);\n    }\n\n    return arr;\n  }\n};\nexport const leafSelectStrategy = function () {\n  let single = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const strategy = {\n    select: _ref2 => {\n      let {\n        id,\n        value,\n        selected,\n        children\n      } = _ref2;\n      if (children.has(id)) return selected;\n      if (single) return new Map([[id, value ? 'on' : 'off']]);\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v != null ? v : []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: independentSelectStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = {\n  select: _ref3 => {\n    let {\n      id,\n      value,\n      selected,\n      children,\n      parents\n    } = _ref3;\n    const items = [id];\n\n    while (items.length) {\n      const item = items.shift();\n      selected.set(item, value ? 'on' : 'off');\n\n      if (children.has(item)) {\n        items.push(...children.get(item));\n      }\n    }\n\n    let parent = parents.get(id);\n\n    while (parent) {\n      const childrenIds = children.get(parent);\n      const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');\n      const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');\n      selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n      parent = parents.get(parent);\n    }\n\n    return selected;\n  },\n  in: (v, children, parents) => {\n    let map = new Map();\n\n    for (const id of v || []) {\n      map = classicSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents\n      });\n    }\n\n    return map;\n  },\n  out: (v, children) => {\n    const arr = [];\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on' && !children.has(key)) arr.push(key);\n    }\n\n    return arr;\n  }\n};","map":{"version":3,"mappings":"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","names":["independentSelectStrategy","select","_ref","id","value","selected","set","in","v","children","parents","map","Map","out","arr","key","entries","push","leafSelectStrategy","single","strategy","_ref2","has","classicSelectStrategy","_ref3","items","length","item","shift","get","parent","childrenIds","everySelected","every","cid","noneSelected"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["export type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy: SelectStrategy = {\n  select: ({ id, value, selected }) => {\n    selected.set(id, value ? 'on' : 'off')\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = independentSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: v => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on') arr.push(key)\n    }\n\n    return arr\n  },\n}\n\nexport const leafSelectStrategy = (single = false): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children }) => {\n      if (children.has(id)) return selected\n\n      if (single) return new Map([[id, value ? 'on' : 'off']])\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v ?? [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: independentSelectStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy: SelectStrategy = {\n  select: ({ id, value, selected, children, parents }) => {\n    const items = [id]\n\n    while (items.length) {\n      const item = items.shift()!\n\n      selected.set(item, value ? 'on' : 'off')\n\n      if (children.has(item)) {\n        items.push(...children.get(item)!)\n      }\n    }\n\n    let parent = parents.get(id)\n\n    while (parent) {\n      const childrenIds = children.get(parent)!\n      const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n      const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n      selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n      parent = parents.get(parent)\n    }\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = classicSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: (v, children) => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on' && !children.has(key)) arr.push(key)\n    }\n\n    return arr\n  },\n}\n"]},"metadata":{},"sourceType":"module"}