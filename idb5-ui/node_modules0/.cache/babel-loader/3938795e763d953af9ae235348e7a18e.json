{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\n/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\nvar WebSocketClient = require('./WebSocketClient');\n\nvar toBuffer = require('typedarray-to-buffer');\n\nvar yaeti = require('yaeti');\n\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\nmodule.exports = W3CWebSocket;\n\nfunction W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {\n  // Make this an EventTarget.\n  yaeti.EventTarget.call(this); // Sanitize clientConfig.\n\n  clientConfig = clientConfig || {};\n  clientConfig.assembleFragments = true; // Required in the W3C API.\n\n  var self = this;\n  this._url = url;\n  this._readyState = CONNECTING;\n  this._protocol = undefined;\n  this._extensions = '';\n  this._bufferedAmount = 0; // Hack, always 0.\n\n  this._binaryType = 'arraybuffer'; // TODO: Should be 'blob' by default, but Node has no Blob.\n  // The WebSocketConnection instance.\n\n  this._connection = undefined; // WebSocketClient instance.\n\n  this._client = new WebSocketClient(clientConfig);\n\n  this._client.on('connect', function (connection) {\n    onConnect.call(self, connection);\n  });\n\n  this._client.on('connectFailed', function () {\n    onConnectFailed.call(self);\n  });\n\n  this._client.connect(url, protocols, origin, headers, requestOptions);\n} // Expose W3C read only attributes.\n\n\nObject.defineProperties(W3CWebSocket.prototype, {\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n  readyState: {\n    get: function () {\n      return this._readyState;\n    }\n  },\n  protocol: {\n    get: function () {\n      return this._protocol;\n    }\n  },\n  extensions: {\n    get: function () {\n      return this._extensions;\n    }\n  },\n  bufferedAmount: {\n    get: function () {\n      return this._bufferedAmount;\n    }\n  }\n}); // Expose W3C write/read attributes.\n\nObject.defineProperties(W3CWebSocket.prototype, {\n  binaryType: {\n    get: function () {\n      return this._binaryType;\n    },\n    set: function (type) {\n      // TODO: Just 'arraybuffer' supported.\n      if (type !== 'arraybuffer') {\n        throw new SyntaxError('just \"arraybuffer\" type allowed for \"binaryType\" attribute');\n      }\n\n      this._binaryType = type;\n    }\n  }\n}); // Expose W3C readyState constants into the WebSocket instance as W3C states.\n\n[['CONNECTING', CONNECTING], ['OPEN', OPEN], ['CLOSING', CLOSING], ['CLOSED', CLOSED]].forEach(function (property) {\n  Object.defineProperty(W3CWebSocket.prototype, property[0], {\n    get: function () {\n      return property[1];\n    }\n  });\n}); // Also expose W3C readyState constants into the WebSocket class (not defined by the W3C,\n// but there are so many libs relying on them).\n\n[['CONNECTING', CONNECTING], ['OPEN', OPEN], ['CLOSING', CLOSING], ['CLOSED', CLOSED]].forEach(function (property) {\n  Object.defineProperty(W3CWebSocket, property[0], {\n    get: function () {\n      return property[1];\n    }\n  });\n});\n\nW3CWebSocket.prototype.send = function (data) {\n  if (this._readyState !== OPEN) {\n    throw new Error('cannot call send() while not connected');\n  } // Text.\n\n\n  if (typeof data === 'string' || data instanceof String) {\n    this._connection.sendUTF(data);\n  } // Binary.\n  else {\n    // Node Buffer.\n    if (data instanceof Buffer) {\n      this._connection.sendBytes(data);\n    } // If ArrayBuffer or ArrayBufferView convert it to Node Buffer.\n    else if (data.byteLength || data.byteLength === 0) {\n      data = toBuffer(data);\n\n      this._connection.sendBytes(data);\n    } else {\n      throw new Error('unknown binary data:', data);\n    }\n  }\n};\n\nW3CWebSocket.prototype.close = function (code, reason) {\n  switch (this._readyState) {\n    case CONNECTING:\n      // NOTE: We don't have the WebSocketConnection instance yet so no\n      // way to close the TCP connection.\n      // Artificially invoke the onConnectFailed event.\n      onConnectFailed.call(this); // And close if it connects after a while.\n\n      this._client.on('connect', function (connection) {\n        if (code) {\n          connection.close(code, reason);\n        } else {\n          connection.close();\n        }\n      });\n\n      break;\n\n    case OPEN:\n      this._readyState = CLOSING;\n\n      if (code) {\n        this._connection.close(code, reason);\n      } else {\n        this._connection.close();\n      }\n\n      break;\n\n    case CLOSING:\n    case CLOSED:\n      break;\n  }\n};\n/**\n * Private API.\n */\n\n\nfunction createCloseEvent(code, reason) {\n  var event = new yaeti.Event('close');\n  event.code = code;\n  event.reason = reason;\n  event.wasClean = typeof code === 'undefined' || code === 1000;\n  return event;\n}\n\nfunction createMessageEvent(data) {\n  var event = new yaeti.Event('message');\n  event.data = data;\n  return event;\n}\n\nfunction onConnect(connection) {\n  var self = this;\n  this._readyState = OPEN;\n  this._connection = connection;\n  this._protocol = connection.protocol;\n  this._extensions = connection.extensions;\n\n  this._connection.on('close', function (code, reason) {\n    onClose.call(self, code, reason);\n  });\n\n  this._connection.on('message', function (msg) {\n    onMessage.call(self, msg);\n  });\n\n  this.dispatchEvent(new yaeti.Event('open'));\n}\n\nfunction onConnectFailed() {\n  destroy.call(this);\n  this._readyState = CLOSED;\n\n  try {\n    this.dispatchEvent(new yaeti.Event('error'));\n  } finally {\n    this.dispatchEvent(createCloseEvent(1006, 'connection failed'));\n  }\n}\n\nfunction onClose(code, reason) {\n  destroy.call(this);\n  this._readyState = CLOSED;\n  this.dispatchEvent(createCloseEvent(code, reason || ''));\n}\n\nfunction onMessage(message) {\n  if (message.utf8Data) {\n    this.dispatchEvent(createMessageEvent(message.utf8Data));\n  } else if (message.binaryData) {\n    // Must convert from Node Buffer to ArrayBuffer.\n    // TODO: or to a Blob (which does not exist in Node!).\n    if (this.binaryType === 'arraybuffer') {\n      var buffer = message.binaryData;\n      var arraybuffer = new ArrayBuffer(buffer.length);\n      var view = new Uint8Array(arraybuffer);\n\n      for (var i = 0, len = buffer.length; i < len; ++i) {\n        view[i] = buffer[i];\n      }\n\n      this.dispatchEvent(createMessageEvent(arraybuffer));\n    }\n  }\n}\n\nfunction destroy() {\n  this._client.removeAllListeners();\n\n  if (this._connection) {\n    this._connection.removeAllListeners();\n  }\n}","map":{"version":3,"sources":["/home/thaumy/Desktop/idb5-ui/node_modules/websocket/lib/W3CWebSocket.js"],"names":["WebSocketClient","require","toBuffer","yaeti","CONNECTING","OPEN","CLOSING","CLOSED","module","exports","W3CWebSocket","url","protocols","origin","headers","requestOptions","clientConfig","EventTarget","call","assembleFragments","self","_url","_readyState","_protocol","undefined","_extensions","_bufferedAmount","_binaryType","_connection","_client","on","connection","onConnect","onConnectFailed","connect","Object","defineProperties","prototype","get","readyState","protocol","extensions","bufferedAmount","binaryType","set","type","SyntaxError","forEach","property","defineProperty","send","data","Error","String","sendUTF","Buffer","sendBytes","byteLength","close","code","reason","createCloseEvent","event","Event","wasClean","createMessageEvent","onClose","msg","onMessage","dispatchEvent","destroy","message","utf8Data","binaryData","buffer","arraybuffer","ArrayBuffer","length","view","Uint8Array","i","len","removeAllListeners"],"mappings":"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","sourcesContent":["/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar WebSocketClient = require('./WebSocketClient');\nvar toBuffer = require('typedarray-to-buffer');\nvar yaeti = require('yaeti');\n\n\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\n\n\nmodule.exports = W3CWebSocket;\n\n\nfunction W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {\n    // Make this an EventTarget.\n    yaeti.EventTarget.call(this);\n\n    // Sanitize clientConfig.\n    clientConfig = clientConfig || {};\n    clientConfig.assembleFragments = true;  // Required in the W3C API.\n\n    var self = this;\n\n    this._url = url;\n    this._readyState = CONNECTING;\n    this._protocol = undefined;\n    this._extensions = '';\n    this._bufferedAmount = 0;  // Hack, always 0.\n    this._binaryType = 'arraybuffer';  // TODO: Should be 'blob' by default, but Node has no Blob.\n\n    // The WebSocketConnection instance.\n    this._connection = undefined;\n\n    // WebSocketClient instance.\n    this._client = new WebSocketClient(clientConfig);\n\n    this._client.on('connect', function(connection) {\n        onConnect.call(self, connection);\n    });\n\n    this._client.on('connectFailed', function() {\n        onConnectFailed.call(self);\n    });\n\n    this._client.connect(url, protocols, origin, headers, requestOptions);\n}\n\n\n// Expose W3C read only attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    url:            { get: function() { return this._url;            } },\n    readyState:     { get: function() { return this._readyState;     } },\n    protocol:       { get: function() { return this._protocol;       } },\n    extensions:     { get: function() { return this._extensions;     } },\n    bufferedAmount: { get: function() { return this._bufferedAmount; } }\n});\n\n\n// Expose W3C write/read attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    binaryType: {\n        get: function() {\n            return this._binaryType;\n        },\n        set: function(type) {\n            // TODO: Just 'arraybuffer' supported.\n            if (type !== 'arraybuffer') {\n                throw new SyntaxError('just \"arraybuffer\" type allowed for \"binaryType\" attribute');\n            }\n            this._binaryType = type;\n        }\n    }\n});\n\n\n// Expose W3C readyState constants into the WebSocket instance as W3C states.\n[['CONNECTING',CONNECTING], ['OPEN',OPEN], ['CLOSING',CLOSING], ['CLOSED',CLOSED]].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket.prototype, property[0], {\n        get: function() { return property[1]; }\n    });\n});\n\n// Also expose W3C readyState constants into the WebSocket class (not defined by the W3C,\n// but there are so many libs relying on them).\n[['CONNECTING',CONNECTING], ['OPEN',OPEN], ['CLOSING',CLOSING], ['CLOSED',CLOSED]].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket, property[0], {\n        get: function() { return property[1]; }\n    });\n});\n\n\nW3CWebSocket.prototype.send = function(data) {\n    if (this._readyState !== OPEN) {\n        throw new Error('cannot call send() while not connected');\n    }\n\n    // Text.\n    if (typeof data === 'string' || data instanceof String) {\n        this._connection.sendUTF(data);\n    }\n    // Binary.\n    else {\n        // Node Buffer.\n        if (data instanceof Buffer) {\n            this._connection.sendBytes(data);\n        }\n        // If ArrayBuffer or ArrayBufferView convert it to Node Buffer.\n        else if (data.byteLength || data.byteLength === 0) {\n            data = toBuffer(data);\n            this._connection.sendBytes(data);\n        }\n        else {\n            throw new Error('unknown binary data:', data);\n        }\n    }\n};\n\n\nW3CWebSocket.prototype.close = function(code, reason) {\n    switch(this._readyState) {\n        case CONNECTING:\n            // NOTE: We don't have the WebSocketConnection instance yet so no\n            // way to close the TCP connection.\n            // Artificially invoke the onConnectFailed event.\n            onConnectFailed.call(this);\n            // And close if it connects after a while.\n            this._client.on('connect', function(connection) {\n                if (code) {\n                    connection.close(code, reason);\n                } else {\n                    connection.close();\n                }\n            });\n            break;\n        case OPEN:\n            this._readyState = CLOSING;\n            if (code) {\n                this._connection.close(code, reason);\n            } else {\n                this._connection.close();\n            }\n            break;\n        case CLOSING:\n        case CLOSED:\n            break;\n    }\n};\n\n\n/**\n * Private API.\n */\n\n\nfunction createCloseEvent(code, reason) {\n    var event = new yaeti.Event('close');\n\n    event.code = code;\n    event.reason = reason;\n    event.wasClean = (typeof code === 'undefined' || code === 1000);\n\n    return event;\n}\n\n\nfunction createMessageEvent(data) {\n    var event = new yaeti.Event('message');\n\n    event.data = data;\n\n    return event;\n}\n\n\nfunction onConnect(connection) {\n    var self = this;\n\n    this._readyState = OPEN;\n    this._connection = connection;\n    this._protocol = connection.protocol;\n    this._extensions = connection.extensions;\n\n    this._connection.on('close', function(code, reason) {\n        onClose.call(self, code, reason);\n    });\n\n    this._connection.on('message', function(msg) {\n        onMessage.call(self, msg);\n    });\n\n    this.dispatchEvent(new yaeti.Event('open'));\n}\n\n\nfunction onConnectFailed() {\n    destroy.call(this);\n    this._readyState = CLOSED;\n\n    try {\n        this.dispatchEvent(new yaeti.Event('error'));\n    } finally {\n        this.dispatchEvent(createCloseEvent(1006, 'connection failed'));\n    }\n}\n\n\nfunction onClose(code, reason) {\n    destroy.call(this);\n    this._readyState = CLOSED;\n\n    this.dispatchEvent(createCloseEvent(code, reason || ''));\n}\n\n\nfunction onMessage(message) {\n    if (message.utf8Data) {\n        this.dispatchEvent(createMessageEvent(message.utf8Data));\n    }\n    else if (message.binaryData) {\n        // Must convert from Node Buffer to ArrayBuffer.\n        // TODO: or to a Blob (which does not exist in Node!).\n        if (this.binaryType === 'arraybuffer') {\n            var buffer = message.binaryData;\n            var arraybuffer = new ArrayBuffer(buffer.length);\n            var view = new Uint8Array(arraybuffer);\n            for (var i=0, len=buffer.length; i<len; ++i) {\n                view[i] = buffer[i];\n            }\n            this.dispatchEvent(createMessageEvent(arraybuffer));\n        }\n    }\n}\n\n\nfunction destroy() {\n    this._client.removeAllListeners();\n    if (this._connection) {\n        this._connection.removeAllListeners();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}