{"ast":null,"code":"// Utilities\nimport { computed } from 'vue';\nimport { propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String]\n}, 'border');\nexport function useBorder(props, name) {\n  const borderClasses = computed(() => {\n    const classes = [];\n\n    if (props.border != null && props.border !== false) {\n      classes.push(`${name}--border`);\n    }\n\n    if (typeof props.border === 'string' && props.border !== '' || props.border === 0) {\n      for (const value of String(props.border).split(' ')) {\n        classes.push(`border-${value}`);\n      }\n    }\n\n    return classes;\n  });\n  return {\n    borderClasses\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,KAAzB;SACSC,oB,qBAET;AAKA;;AACA,OAAO,MAAMC,eAAe,GAAGD,YAAY,CAAC;AAC1CE,QAAM,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB;AADkC,CAAD,EAExC,QAFwC,CAApC;AAIP,OAAO,SAASC,SAAT,CAAoBC,KAApB,EAAwCC,IAAxC,EAAsD;AAC3D,QAAMC,aAAa,GAAGV,QAAQ,CAAC,MAAM;AACnC,UAAMW,OAAiB,GAAG,EAA1B;;AAEA,QAAIH,KAAK,CAACL,MAANK,IAAgB,IAAhBA,IAAwBA,KAAK,CAACL,MAANK,KAAiB,KAA7C,EAAoD;AAClDG,aAAO,CAACC,IAARD,CAAc,GAAEF,IAAK,UAArBE;AACD;;AAED,QACG,OAAOH,KAAK,CAACL,MAAb,KAAwB,QAAxB,IAAoCK,KAAK,CAACL,MAANK,KAAiB,EAArD,IACDA,KAAK,CAACL,MAANK,KAAiB,CAFnB,EAGE;AACA,WAAK,MAAMK,KAAX,IAAoBP,MAAM,CAACE,KAAK,CAACL,MAAP,CAANG,CAAqBQ,KAArBR,CAA2B,GAA3BA,CAApB,EAAqD;AACnDK,eAAO,CAACC,IAARD,CAAc,UAASE,KAAM,EAA7BF;AACD;AACF;;AAED,WAAOA,OAAP;AAhB4B,IAA9B;AAmBA,SAAO;AAAED;AAAF,GAAP;AACD","names":["computed","propsFactory","makeBorderProps","border","Boolean","Number","String","useBorder","props","name","borderClasses","classes","push","value","split"],"sources":["../../src/composables/border.ts"],"sourcesContent":["// Utilities\nimport { computed } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (props: BorderProps, name: string) {\n  const borderClasses = computed(() => {\n    const classes: string[] = []\n\n    if (props.border != null && props.border !== false) {\n      classes.push(`${name}--border`)\n    }\n\n    if (\n      (typeof props.border === 'string' && props.border !== '') ||\n      props.border === 0\n    ) {\n      for (const value of String(props.border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n"]},"metadata":{},"sourceType":"module"}