{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VList.css\"; // Components\n\nimport { VListSubheader } from \"./VListSubheader.mjs\";\nimport { VListChildren } from \"./VListChildren.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.mjs\";\nimport { makeNestedProps, useNested } from \"../../composables/nested/nested.mjs\"; // Utilities\n\nimport { computed, inject, provide, ref, toRef } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n// Depth\n\nexport const DepthKey = Symbol.for('vuetify:depth');\nexport const useDepth = hasPrepend => {\n  const parent = inject(DepthKey, ref(-1));\n  const depth = computed(() => parent.value + 1 + (hasPrepend != null && hasPrepend.value ? 1 : 0));\n  provide(DepthKey, depth);\n  return depth;\n}; // List\n\nexport const ListKey = Symbol.for('vuetify:list');\nexport const createList = () => {\n  const parent = inject(ListKey, {\n    hasPrepend: ref(false),\n    updateHasPrepend: () => null\n  });\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: value => {\n      if (value) data.hasPrepend.value = value;\n    }\n  };\n  provide(ListKey, data);\n  return parent;\n};\nexport const useList = () => {\n  return inject(ListKey, null);\n};\nexport const VList = genericComponent()({\n  name: 'VList',\n  props: {\n    color: String,\n    disabled: Boolean,\n    lines: {\n      type: String,\n      default: 'one'\n    },\n    nav: Boolean,\n    subheader: {\n      type: [Boolean, String],\n      default: false\n    },\n    items: Array,\n    ...makeNestedProps({\n      selectStrategy: 'leaf',\n      openStrategy: 'multiple',\n      activeStrategy: 'single'\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps()\n  },\n  emits: {\n    'update:selected': val => true,\n    'update:opened': val => true,\n    'update:active': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = useTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      borderClasses\n    } = useBorder(props, 'v-list');\n    const {\n      densityClasses\n    } = useDensity(props, 'v-list');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props, 'v-list');\n    const {\n      open,\n      select,\n      activate\n    } = useNested(props);\n    const depth = useDepth();\n    createList();\n    useRender(() => {\n      const hasHeader = typeof props.subheader === 'string' || slots.subheader;\n      return _createVNode(props.tag, {\n        \"class\": ['v-list', {\n          'v-list--disabled': props.disabled,\n          'v-list--nav': props.nav,\n          'v-list--subheader': props.subheader,\n          'v-list--subheader-sticky': props.subheader === 'sticky',\n          [`v-list--${props.lines}-line`]: true\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, roundedClasses.value],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value, {\n          '--v-list-depth': depth.value\n        }]\n      }, {\n        default: () => [hasHeader && (slots.subheader ? slots.subheader() : _createVNode(VListSubheader, null, {\n          default: () => [props.subheader]\n        })), _createVNode(VListChildren, {\n          \"items\": props.items\n        }, slots, 8, [\"items\"])],\n        _: 1\n      }, 8, [\"class\", \"style\"]);\n    });\n    return {\n      open,\n      select,\n      activate\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VListSubheader","VListChildren","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","makeThemeProps","useTheme","makeNestedProps","useNested","computed","inject","provide","ref","toRef","genericComponent","useRender","DepthKey","Symbol","for","useDepth","hasPrepend","parent","depth","value","ListKey","createList","updateHasPrepend","data","useList","VList","name","props","color","String","disabled","Boolean","lines","type","default","nav","subheader","items","Array","selectStrategy","openStrategy","activeStrategy","emits","val","setup","slots","_ref","themeClasses","backgroundColorClasses","backgroundColorStyles","borderClasses","densityClasses","dimensionStyles","elevationClasses","roundedClasses","open","select","activate","hasHeader","_"],"sources":["../../../src/components/VList/VList.tsx"],"sourcesContent":["// Styles\nimport './VList.sass'\n\n// Components\nimport { VListSubheader } from './VListSubheader'\nimport { VListChildren } from './VListChildren'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeNestedProps, useNested } from '@/composables/nested/nested'\n\n// Utilities\nimport { computed, inject, provide, ref, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, Prop, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { ListGroupHeaderSlot } from './VListGroup'\n\nexport type ListItem = {\n  children?: ListItem[]\n  value?: string\n}\n\n// Depth\nexport const DepthKey: InjectionKey<Ref<number>> = Symbol.for('vuetify:depth')\n\nexport const useDepth = (hasPrepend?: Ref<boolean>) => {\n  const parent = inject(DepthKey, ref(-1))\n\n  const depth = computed(() => parent.value + 1 + (hasPrepend?.value ? 1 : 0))\n\n  provide(DepthKey, depth)\n\n  return depth\n}\n\n// List\nexport const ListKey: InjectionKey<{\n  hasPrepend: Ref<boolean>\n  updateHasPrepend: (value: boolean) => void\n}> = Symbol.for('vuetify:list')\n\nexport const createList = () => {\n  const parent = inject(ListKey, { hasPrepend: ref(false), updateHasPrepend: () => null })\n\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: (value: boolean) => {\n      if (value) data.hasPrepend.value = value\n    },\n  }\n\n  provide(ListKey, data)\n\n  return parent\n}\n\nexport const useList = () => {\n  return inject(ListKey, null)\n}\n\nexport const VList = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    subheader: []\n    header: [ListGroupHeaderSlot]\n    item: [T]\n  }>\n}>()({\n  name: 'VList',\n\n  props: {\n    color: String,\n    disabled: Boolean,\n    lines: {\n      type: String,\n      default: 'one',\n    },\n    nav: Boolean,\n    subheader: {\n      type: [Boolean, String],\n      default: false,\n    },\n    items: Array as Prop<ListItem[]>,\n\n    ...makeNestedProps({\n      selectStrategy: 'leaf' as const,\n      openStrategy: 'multiple' as const,\n      activeStrategy: 'single' as const,\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:selected': (val: string[]) => true,\n    'update:opened': (val: string[]) => true,\n    'update:active': (val: string[]) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = useTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { borderClasses } = useBorder(props, 'v-list')\n    const { densityClasses } = useDensity(props, 'v-list')\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props, 'v-list')\n    const { open, select, activate } = useNested(props)\n    const depth = useDepth()\n    createList()\n\n    useRender(() => {\n      const hasHeader = typeof props.subheader === 'string' || slots.subheader\n\n      return (\n        <props.tag\n          class={[\n            'v-list',\n            {\n              'v-list--disabled': props.disabled,\n              'v-list--nav': props.nav,\n              'v-list--subheader': props.subheader,\n              'v-list--subheader-sticky': props.subheader === 'sticky',\n              [`v-list--${props.lines}-line`]: true,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            dimensionStyles.value,\n            {\n              '--v-list-depth': depth.value,\n            },\n          ]}\n        >\n          { hasHeader && (\n            slots.subheader\n              ? slots.subheader()\n              : <VListSubheader>{ props.subheader }</VListSubheader>\n          ) }\n\n          <VListChildren items={props.items} v-slots={slots} />\n        </props.tag>\n      )\n    })\n\n    return {\n      open,\n      select,\n      activate,\n    }\n  },\n})\n\nexport type VList = InstanceType<typeof VList>\n"]},"metadata":{},"sourceType":"module"}