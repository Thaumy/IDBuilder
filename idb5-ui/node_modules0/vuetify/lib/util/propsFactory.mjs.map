{"version":3,"sources":["../../src/util/propsFactory.ts"],"names":["propsFactory","props","source","defaults","Object","keys","reduce","obj","prop","isObjectDefinition","Array","isArray","definition","type","default"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,YAAT,CAEJC,KAFI,EAEiBC,MAFjB,EAEkC;AACvC,SACEC,QADK,IAEqC;AAC1C,WAAOC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA+B,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnD,YAAMC,kBAAkB,GAAG,OAAOR,KAAK,CAACO,IAAD,CAAZ,KAAuB,QAAvB,IAAmCP,KAAK,CAACO,IAAD,CAAL,IAAe,IAAlD,IAA0D,CAACE,KAAK,CAACC,OAAN,CAAcV,KAAK,CAACO,IAAD,CAAnB,CAAtF;AACA,YAAMI,UAAU,GAAGH,kBAAkB,GAAGR,KAAK,CAACO,IAAD,CAAR,GAAiB;AAAEK,QAAAA,IAAI,EAAEZ,KAAK,CAACO,IAAD;AAAb,OAAtD;;AAEA,UAAIL,QAAQ,IAAIK,IAAI,IAAIL,QAAxB,EAAkC;AAChCI,QAAAA,GAAG,CAACC,IAAD,CAAH,GAAY,EACV,GAAGI,UADO;AAEVE,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAD;AAFP,SAAZ;AAID,OALD,MAKO;AACLD,QAAAA,GAAG,CAACC,IAAD,CAAH,GAAYI,UAAZ;AACD;;AAED,UAAIV,MAAJ,EAAY;AACVK,QAAAA,GAAG,CAACC,IAAD,CAAH,CAAUN,MAAV,GAAmBA,MAAnB;AACD;;AAED,aAAOK,GAAP;AACD,KAlBM,EAkBJ,EAlBI,CAAP;AAmBD,GAtBD;AAuBD","sourcesContent":["import type { ComponentObjectPropsOptions, Prop, PropType } from 'vue'\n\n/**\n * Creates a factory function for props definitions.\n * This is used to define props in a composable then override\n * default values in an implementing component.\n *\n * @example Simplified signature\n * (props: Props) => (defaults?: Record<keyof props, any>) => Props\n *\n * @example Usage\n * const makeProps = propsFactory({\n *   foo: String,\n * })\n *\n * defineComponent({\n *   props: {\n *     ...makeProps({\n *       foo: 'a',\n *     }),\n *   },\n *   setup (props) {\n *     // would be \"string | undefined\", now \"string\" because a default has been provided\n *     props.foo\n *   },\n * }\n */\n\nexport function propsFactory<\n  PropsOptions extends ComponentObjectPropsOptions\n> (props: PropsOptions, source?: string) {\n  return <Defaults extends PartialKeys<PropsOptions> = {}>(\n    defaults?: Defaults\n  ): AppendDefault<PropsOptions, Defaults> => {\n    return Object.keys(props).reduce<any>((obj, prop) => {\n      const isObjectDefinition = typeof props[prop] === 'object' && props[prop] != null && !Array.isArray(props[prop])\n      const definition = isObjectDefinition ? props[prop] : { type: props[prop] }\n\n      if (defaults && prop in defaults) {\n        obj[prop] = {\n          ...definition,\n          default: defaults[prop],\n        }\n      } else {\n        obj[prop] = definition\n      }\n\n      if (source) {\n        obj[prop].source = source\n      }\n\n      return obj\n    }, {})\n  }\n}\n\ntype AppendDefault<T extends ComponentObjectPropsOptions, D extends PartialKeys<T>> = {\n  [P in keyof T]-?: unknown extends D[P]\n    ? T[P]\n    : T[P] extends Dictionary<unknown>\n      ? Omit<T[P], 'type' | 'default'> & {\n        type: PropType<MergeDefault<T[P], D[P]>>\n        default: MergeDefault<T[P], D[P]>\n      }\n      : {\n        type: PropType<MergeDefault<T[P], D[P]>>\n        default: MergeDefault<T[P], D[P]>\n      }\n}\n\ntype MergeDefault<T, D> = unknown extends D ? InferPropType<T> : (NonNullable<InferPropType<T>> | D)\n\n/**\n * Like `Partial<T>` but doesn't care what the value is\n */\ntype PartialKeys<T> = { [P in keyof T]?: unknown }\n\n// Copied from Vue\ntype InferPropType<T> = T extends null\n  ? any // null & true would fail to infer\n  : T extends { type: null | true }\n    ? any // As TS issue https://github.com/Microsoft/TypeScript/issues/14829 // somehow `ObjectConstructor` when inferred from { (): T } becomes `any` // `BooleanConstructor` when inferred from PropConstructor(with PropMethod) becomes `Boolean`\n    : T extends ObjectConstructor | { type: ObjectConstructor }\n      ? Record<string, any>\n      : T extends BooleanConstructor | { type: BooleanConstructor }\n        ? boolean\n        : T extends Prop<infer V, infer D> ? (unknown extends V ? D : V) : T\n"],"file":"propsFactory.mjs"}