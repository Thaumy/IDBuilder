{"version":3,"sources":["../../src/util/dom.ts"],"names":["attachedRoot","node","getRootNode","parentNode","document","root","composed"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAuBC,IAAvB,EAAqE;AAC1E;AACA,MAAI,OAAOA,IAAI,CAACC,WAAZ,KAA4B,UAAhC,EAA4C;AAC1C;AACA,WAAOD,IAAI,CAACE,UAAZ,EAAwBF,IAAI,GAAGA,IAAI,CAACE,UAAZ,CAFkB,CAI1C;;;AACA,QAAIF,IAAI,KAAKG,QAAb,EAAuB,OAAO,IAAP;AAEvB,WAAOA,QAAP;AACD;;AAED,QAAMC,IAAI,GAAGJ,IAAI,CAACC,WAAL,EAAb,CAZ0E,CAc1E;;AACA,MAAIG,IAAI,KAAKD,QAAT,IAAqBC,IAAI,CAACH,WAAL,CAAiB;AAAEI,IAAAA,QAAQ,EAAE;AAAZ,GAAjB,MAAyCF,QAAlE,EAA4E,OAAO,IAAP;AAE5E,SAAOC,IAAP;AACD","sourcesContent":["/**\n * Returns:\n *  - 'null' if the node is not attached to the DOM\n *  - the root node (HTMLDocument | ShadowRoot) otherwise\n */\nexport function attachedRoot (node: Node): null | HTMLDocument | ShadowRoot {\n  /* istanbul ignore next */\n  if (typeof node.getRootNode !== 'function') {\n    // Shadow DOM not supported (IE11), lets find the root of this node\n    while (node.parentNode) node = node.parentNode\n\n    // The root parent is the document if the node is attached to the DOM\n    if (node !== document) return null\n\n    return document\n  }\n\n  const root = node.getRootNode()\n\n  // The composed root node is the document if the node is attached to the DOM\n  if (root !== document && root.getRootNode({ composed: true }) !== document) return null\n\n  return root as HTMLDocument | ShadowRoot\n}\n"],"file":"dom.mjs"}