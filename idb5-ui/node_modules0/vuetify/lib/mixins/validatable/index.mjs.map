{"version":3,"sources":["../../../src/mixins/validatable/index.ts"],"names":["Colorable","Themeable","inject","RegistrableInject","deepEqual","consoleError","mixins","baseMixins","extend","name","props","disabled","Boolean","error","errorCount","type","Number","String","default","errorMessages","Array","messages","readonly","rules","success","successMessages","validateOnBlur","value","required","data","errorBucket","hasColor","hasFocused","hasInput","isFocused","isResetting","lazyValue","valid","computed","computedColor","isDisabled","undefined","color","isDark","appIsDark","hasError","internalErrorMessages","length","hasSuccess","internalSuccessMessages","externalError","hasMessages","validationTarget","hasState","shouldValidate","genInternalMessages","internalMessages","internalValue","get","set","val","$emit","form","isInteractive","isReadonly","validations","slice","validationState","watch","handler","newVal","oldVal","validate","deep","$nextTick","setTimeout","beforeMount","created","register","beforeDestroy","unregister","methods","isArray","reset","resetValidation","force","index","rule","push"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Mixins\nimport Colorable from '../colorable'\nimport Themeable from '../themeable'\nimport { inject as RegistrableInject } from '../registrable'\n\n// Utilities\nimport { deepEqual } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { InputMessage, InputValidationRules } from 'vuetify/types'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'form', any>('form'),\n  Themeable,\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'validatable',\n\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    messages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<InputValidationRules>,\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    validateOnBlur: Boolean,\n    value: { required: false },\n  },\n\n  data () {\n    return {\n      errorBucket: [] as string[],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.color) return this.color\n      // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n      if (this.isDark && !this.appIsDark) return 'white'\n      else return 'primary'\n    },\n    hasError (): boolean {\n      return (\n        this.internalErrorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n      )\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess (): boolean {\n      return (\n        this.internalSuccessMessages.length > 0 ||\n        this.success\n      )\n    },\n    externalError (): boolean {\n      return this.internalErrorMessages.length > 0 || this.error\n    },\n    hasMessages (): boolean {\n      return this.validationTarget.length > 0\n    },\n    hasState (): boolean {\n      if (this.isDisabled) return false\n\n      return (\n        this.hasSuccess ||\n        (this.shouldValidate && this.hasError)\n      )\n    },\n    internalErrorMessages (): InputValidationRules {\n      return this.genInternalMessages(this.errorMessages)\n    },\n    internalMessages (): InputValidationRules {\n      return this.genInternalMessages(this.messages)\n    },\n    internalSuccessMessages (): InputValidationRules {\n      return this.genInternalMessages(this.successMessages)\n    },\n    internalValue: {\n      get (): unknown {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n\n        this.$emit('input', val)\n      },\n    },\n    isDisabled (): boolean {\n      return this.disabled || (\n        !!this.form &&\n        this.form.disabled\n      )\n    },\n    isInteractive (): boolean {\n      return !this.isDisabled && !this.isReadonly\n    },\n    isReadonly (): boolean {\n      return this.readonly || (\n        !!this.form &&\n        this.form.readonly\n      )\n    },\n    shouldValidate (): boolean {\n      if (this.externalError) return true\n      if (this.isResetting) return false\n\n      return this.validateOnBlur\n        ? this.hasFocused && !this.isFocused\n        : (this.hasInput || this.hasFocused)\n    },\n    validations (): InputValidationRules {\n      return this.validationTarget.slice(0, Number(this.errorCount))\n    },\n    validationState (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor) return this.computedColor\n      return undefined\n    },\n    validationTarget (): InputValidationRules {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else return []\n    },\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return\n        this.validate()\n      },\n      deep: true,\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.validateOnBlur || this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      // Should not check validation\n      // if disabled\n      if (\n        !val &&\n        !this.isDisabled\n      ) {\n        this.hasFocused = true\n        this.validateOnBlur && this.$nextTick(this.validate)\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n        this.validate()\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    },\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    genInternalMessages (messages: InputMessage | null): InputValidationRules {\n      if (!messages) return []\n      else if (Array.isArray(messages)) return messages\n      else return [messages]\n    },\n    /** @public */\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : null\n    },\n    /** @public */\n    resetValidation () {\n      this.isResetting = true\n    },\n    /** @public */\n    validate (force = false, value?: any): boolean {\n      const errorBucket = []\n      value = value || this.internalValue\n\n      if (force) this.hasInput = this.hasFocused = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '')\n        } else if (typeof valid !== 'boolean') {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    },\n  },\n})\n"],"file":"index.mjs"}