{"version":3,"sources":["../../../src/components/VDialog/VDialog.tsx"],"names":["VDialogTransition","VOverlay","makeDimensionProps","useDimension","makeTransitionProps","useProxiedModel","nextTick","ref","watch","genericComponent","IN_BROWSER","VDialog","name","inheritAttrs","props","fullscreen","Boolean","origin","type","String","default","retainFocus","scrollable","modelValue","width","transition","component","emits","value","setup","attrs","slots","isActive","dimensionStyles","overlay","onFocusin","e","before","relatedTarget","after","target","contentEl","document","includes","contains","focusable","querySelectorAll","filter","el","hasAttribute","length","firstElement","lastElement","focus","val","addEventListener","removeEventListener","immediate","preventScroll","activatorEl","activator"],"mappings":"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","sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VDialog',\n\n  inheritAttrs: false,\n\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n\n    ...makeDimensionProps({ width: 'auto' }),\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { dimensionStyles } = useDimension(props)\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n        // We're the topmost dialog\n        // TODO: this.activeZIndex >= this.getMaxZIndex() &&\n        // It isn't inside a dependent element (like a menu)\n        // TODO: !this.getOpenDependentElements().some(el => el.contains(target))\n        // So we must have focused something outside the dialog and its children\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    return () => {\n      return (\n        <VOverlay\n          v-model={ isActive.value }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n            },\n          ]}\n          style={ dimensionStyles.value }\n          transition={ props.transition }\n          ref={ overlay }\n          aria-role=\"dialog\"\n          aria-modal=\"true\"\n          activatorProps={{\n            'aria-haspopup': 'dialog',\n            'aria-expanded': String(isActive.value),\n          }}\n          { ...attrs }\n          v-slots={{\n            default: slots.default,\n            activator: slots.activator,\n          }}\n        />\n      )\n    }\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"],"file":"VDialog.mjs"}