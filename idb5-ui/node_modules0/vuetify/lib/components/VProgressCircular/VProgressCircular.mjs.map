{"version":3,"sources":["../../../src/components/VProgressCircular/VProgressCircular.tsx"],"names":["makeSizeProps","useSize","makeTagProps","makeThemeProps","useTheme","useIntersectionObserver","useTextColor","computed","toRef","convertToUnit","defineComponent","VProgressCircular","name","props","bgColor","String","color","indeterminate","Boolean","modelValue","type","Number","default","rotate","width","tag","setup","slots","MAGIC_RADIUS_CONSTANT","CIRCUMFERENCE","Math","PI","themeClasses","sizeClasses","sizeStyles","textColorClasses","textColorStyles","underlayColorClasses","underlayColorStyles","intersectionRef","isIntersecting","normalizedValue","max","min","parseFloat","size","value","getBoundingClientRect","diameter","strokeWidth","strokeDashOffset","undefined","transform"],"mappings":"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","sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VProgressCircular = defineComponent({\n  name: 'VProgressCircular',\n\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'div' }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const { themeClasses } = useTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props, 'v-progress-circular')\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value ? Number(props.size) : intersectionRef.value\n        ? intersectionRef.value.getBoundingClientRect().width : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    return () => (\n      <props.tag\n        ref={ intersectionRef }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        ) }\n      </props.tag>\n    )\n  },\n})\n"],"file":"VProgressCircular.mjs"}