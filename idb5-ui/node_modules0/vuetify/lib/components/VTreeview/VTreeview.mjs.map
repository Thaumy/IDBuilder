{"version":3,"sources":["../../../src/components/VTreeview/VTreeview.ts"],"names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","disabled","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","value","data","level","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","getValue","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","selectionType","calculateState","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","v","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","isForced","changed","Map","descendant","itemDisabled","set","calculated","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","genChild","options","bind","staticClass","class","themeClasses"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    disabled: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren) ?? []\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length && this.selectionType !== 'independent') {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.filter(item => {\n        return !this.isExcluded(getObjectValueByPath(item, this.itemKey))\n      }).map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, this.disabled || getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"],"file":"VTreeview.mjs"}