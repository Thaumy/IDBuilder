{"version":3,"sources":["../../../src/components/VSelectionControl/VSelectionControl.tsx"],"names":["VIcon","VLabel","VSelectionControlGroupSymbol","makeDensityProps","useDensity","makeThemeProps","useProxiedModel","useTextColor","Ripple","computed","inject","ref","deepEqual","genericComponent","getUid","SUPPORTS_FOCUS_VISIBLE","useRender","wrapInArray","selectionControlProps","color","String","disabled","Boolean","error","id","inline","label","offIcon","onIcon","ripple","type","default","multiple","name","readonly","trueValue","falseValue","modelValue","value","valueComparator","Function","useSelectionControl","props","group","undefined","densityClasses","isMultiple","Array","isArray","model","get","val","some","v","set","currentValue","newVal","filter","item","textColorClasses","textColorStyles","icon","VSelectionControl","directives","inheritAttrs","emits","setup","attrs","slots","uid","isFocused","isFocusVisible","input","onFocus","e","target","matches","onBlur","for"],"mappings":";AAAA;AACA,iC,CAEA;;SACSA,K;SACAC,M;SACAC,4B,gEAET;;SACSC,gB,EAAkBC,U;SAClBC,c;SACAC,e;SACAC,Y,uCAET;;SACSC,M,6CAET;;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,GAA3B,QAAsC,KAAtC;SACSC,S,EAAWC,gB,EAAkBC,M,EAAQC,sB,EAAwBC,S,EAAWC,W,gCAEjF;;AAgBA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,KAAK,EAAEC,MADqB;AAE5BC,EAAAA,QAAQ,EAAEC,OAFkB;AAG5BC,EAAAA,KAAK,EAAED,OAHqB;AAI5BE,EAAAA,EAAE,EAAEJ,MAJwB;AAK5BK,EAAAA,MAAM,EAAEH,OALoB;AAM5BI,EAAAA,KAAK,EAAEN,MANqB;AAO5BO,EAAAA,OAAO,EAAEP,MAPmB;AAQ5BQ,EAAAA,MAAM,EAAER,MARoB;AAS5BS,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAER,OADA;AAENS,IAAAA,OAAO,EAAE;AAFH,GAToB;AAa5BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAER,OADE;AAERS,IAAAA,OAAO,EAAE;AAFD,GAbkB;AAiB5BE,EAAAA,IAAI,EAAEb,MAjBsB;AAkB5Bc,EAAAA,QAAQ,EAAEZ,OAlBkB;AAmB5Ba,EAAAA,SAAS,EAAE,IAnBiB;AAoB5BC,EAAAA,UAAU,EAAE,IApBgB;AAqB5BC,EAAAA,UAAU,EAAE,IArBgB;AAsB5BP,EAAAA,IAAI,EAAEV,MAtBsB;AAuB5BkB,EAAAA,KAAK,EAAE,IAvBqB;AAwB5BC,EAAAA,eAAe,EAAE;AACfT,IAAAA,IAAI,EAAEU,QADS;AAEfT,IAAAA,OAAO,EAAEnB;AAFM,GAxBW;AA6B5B,KAAGP,cAAc,EA7BW;AA8B5B,KAAGF,gBAAgB;AA9BS,CAA9B;AAiCA,OAAO,SAASsC,mBAAT,CACLC,KADK,EAIL;AACA,QAAMC,KAAK,GAAGjC,MAAM,CAACR,4BAAD,EAA+B0C,SAA/B,CAApB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBzC,UAAU,CAACsC,KAAD,EAAQ,qBAAR,CAArC;AACA,QAAML,UAAU,GAAG/B,eAAe,CAACoC,KAAD,EAAQ,YAAR,CAAlC;AACA,QAAMP,SAAS,GAAG1B,QAAQ,CAAC,MACzBiC,KAAK,CAACP,SAAN,KAAoBS,SAApB,GAAgCF,KAAK,CAACP,SAAtC,GACEO,KAAK,CAACJ,KAAN,KAAgBM,SAAhB,GAA4BF,KAAK,CAACJ,KAAlC,GACA,IAHsB,CAA1B;AAKA,QAAMF,UAAU,GAAG3B,QAAQ,CAAC,MAAMiC,KAAK,CAACN,UAAN,KAAqBQ,SAArB,GAAiCF,KAAK,CAACN,UAAvC,GAAoD,KAA3D,CAA3B;AACA,QAAMU,UAAU,GAAGrC,QAAQ,CAAC,MAC1B,CAAAkC,KAAK,QAAL,YAAAA,KAAK,CAAEX,QAAP,CAAgBM,KAAhB,KACA,CAAC,CAACI,KAAK,CAACV,QADR,IAECU,KAAK,CAACV,QAAN,IAAkB,IAAlB,IAA0Be,KAAK,CAACC,OAAN,CAAcX,UAAU,CAACC,KAAzB,CAHF,CAA3B;AAKA,QAAMW,KAAK,GAAGxC,QAAQ,CAAC;AACrByC,IAAAA,GAAG,GAAI;AACL,YAAMC,GAAG,GAAGR,KAAK,GAAGA,KAAK,CAACN,UAAN,CAAiBC,KAApB,GAA4BD,UAAU,CAACC,KAAxD;AAEA,aAAOQ,UAAU,CAACR,KAAX,GACHa,GAAG,CAACC,IAAJ,CAAUC,CAAD,IAAYX,KAAK,CAACH,eAAN,CAAsBc,CAAtB,EAAyBlB,SAAS,CAACG,KAAnC,CAArB,CADG,GAEHI,KAAK,CAACH,eAAN,CAAsBY,GAAtB,EAA2BhB,SAAS,CAACG,KAArC,CAFJ;AAGD,KAPoB;;AAQrBgB,IAAAA,GAAG,CAAEH,GAAF,EAAgB;AACjB,YAAMI,YAAY,GAAGJ,GAAG,GAAGhB,SAAS,CAACG,KAAb,GAAqBF,UAAU,CAACE,KAAxD;AAEA,UAAIkB,MAAM,GAAGD,YAAb;;AAEA,UAAIT,UAAU,CAACR,KAAf,EAAsB;AACpBkB,QAAAA,MAAM,GAAGL,GAAG,GACR,CAAC,GAAGlC,WAAW,CAACoB,UAAU,CAACC,KAAZ,CAAf,EAAmCiB,YAAnC,CADQ,GAERtC,WAAW,CAACoB,UAAU,CAACC,KAAZ,CAAX,CAA8BmB,MAA9B,CAAsCC,IAAD,IAAe,CAAChB,KAAK,CAACH,eAAN,CAAsBmB,IAAtB,EAA4BvB,SAAS,CAACG,KAAtC,CAArD,CAFJ;AAGD;;AAED,UAAIK,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACN,UAAN,CAAiBC,KAAjB,GAAyBkB,MAAzB;AACD,OAFD,MAEO;AACLnB,QAAAA,UAAU,CAACC,KAAX,GAAmBkB,MAAnB;AACD;AACF;;AAxBoB,GAAD,CAAtB;AA0BA,QAAM;AAAEG,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAwCrD,YAAY,CAACE,QAAQ,CAAC,MAAM;AACxE,WACEwC,KAAK,CAACX,KAAN,IACA,CAACI,KAAK,CAACnB,KADP,IAEA,CAACmB,KAAK,CAACrB,QAHF,GAIHqB,KAAK,CAACvB,KAJH,GAIWyB,SAJlB;AAKD,GANkE,CAAT,CAA1D;AAOA,QAAMiB,IAAI,GAAGpD,QAAQ,CAAC,MAAM;AAAA;;AAC1B,WAAOwC,KAAK,CAACX,KAAN,0BACHK,KADG,oBACHA,KAAK,CAAEf,MAAP,CAAcU,KADX,kCACoBI,KAAK,CAACd,MAD1B,2BAEHe,KAFG,oBAEHA,KAAK,CAAEhB,OAAP,CAAeW,KAFZ,mCAEqBI,KAAK,CAACf,OAFlC;AAGD,GAJoB,CAArB;AAMA,SAAO;AACLgB,IAAAA,KADK;AAELE,IAAAA,cAFK;AAGLV,IAAAA,SAHK;AAILC,IAAAA,UAJK;AAKLa,IAAAA,KALK;AAMLU,IAAAA,gBANK;AAOLC,IAAAA,eAPK;AAQLC,IAAAA;AARK,GAAP;AAUD;AAED,OAAO,MAAMC,iBAAiB,GAAGjD,gBAAgB,GAS5C;AACHoB,EAAAA,IAAI,EAAE,mBADH;AAGH8B,EAAAA,UAAU,EAAE;AAAEvD,IAAAA;AAAF,GAHT;AAKHwD,EAAAA,YAAY,EAAE,KALX;AAOHtB,EAAAA,KAAK,EAAExB,qBAPJ;AASH+C,EAAAA,KAAK,EAAE;AACL,yBAAsBd,GAAD,IAAc;AAD9B,GATJ;;AAaHe,EAAAA,KAAK,CAAExB,KAAF,QAA2B;AAAA,QAAlB;AAAEyB,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAkB;AAC9B,UAAM;AACJvB,MAAAA,cADI;AAEJF,MAAAA,KAFI;AAGJkB,MAAAA,IAHI;AAIJZ,MAAAA,KAJI;AAKJU,MAAAA,gBALI;AAMJC,MAAAA,eANI;AAOJzB,MAAAA;AAPI,QAQFM,mBAAmB,CAACC,KAAD,CARvB;AASA,UAAM2B,GAAG,GAAGvD,MAAM,EAAlB;AACA,UAAMU,EAAE,GAAGf,QAAQ,CAAC,MAAMiC,KAAK,CAAClB,EAAN,IAAa,SAAQ6C,GAAI,EAAhC,CAAnB;AACA,UAAMC,SAAS,GAAG3D,GAAG,CAAC,KAAD,CAArB;AACA,UAAM4D,cAAc,GAAG5D,GAAG,CAAC,KAAD,CAA1B;AACA,UAAM6D,KAAK,GAAG7D,GAAG,EAAjB;;AAEA,aAAS8D,OAAT,CAAkBC,CAAlB,EAAiC;AAC/BJ,MAAAA,SAAS,CAAChC,KAAV,GAAkB,IAAlB;;AACA,UACE,CAACvB,sBAAD,IACCA,sBAAsB,IAAK2D,CAAC,CAACC,MAAH,CAA0BC,OAA1B,CAAkC,gBAAlC,CAF7B,EAGE;AACAL,QAAAA,cAAc,CAACjC,KAAf,GAAuB,IAAvB;AACD;AACF;;AAED,aAASuC,MAAT,GAAmB;AACjBP,MAAAA,SAAS,CAAChC,KAAV,GAAkB,KAAlB;AACAiC,MAAAA,cAAc,CAACjC,KAAf,GAAuB,KAAvB;AACD;;AAEDtB,IAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,YAAMU,KAAK,GAAG0C,KAAK,CAAC1C,KAAN,GACV0C,KAAK,CAAC1C,KAAN,CAAY;AACZA,QAAAA,KAAK,EAAEgB,KAAK,CAAChB,KADD;AAEZgB,QAAAA,KAAK,EAAE;AAAEoC,UAAAA,GAAG,EAAEtD,EAAE,CAACc;AAAV;AAFK,OAAZ,CADU,GAKVI,KAAK,CAAChB,KALV;AAMA,YAAMI,IAAI,wBAAGa,KAAH,oBAAGA,KAAK,CAAEb,IAAP,CAAYQ,KAAf,gCAAwBI,KAAK,CAACZ,IAAxC;AAEA;AAAA,iBAEW,CACL,qBADK,EAEL;AACE,wCAA8BmB,KAAK,CAACX,KADtC;AAEE,2CAAiCI,KAAK,CAACrB,QAFzC;AAGE,wCAA8BqB,KAAK,CAACnB,KAHtC;AAIE,0CAAgC+C,SAAS,CAAChC,KAJ5C;AAKE,gDAAsCiC,cAAc,CAACjC,KALvD;AAME,yCAA+B,CAAAK,KAAK,QAAL,YAAAA,KAAK,CAAElB,MAAP,CAAca,KAAd,KAAuBI,KAAK,CAACjB;AAN9D,SAFK,EAULoB,cAAc,CAACP,KAVV,EAWLqB,gBAAgB,CAACrB,KAXZ;AAFX;AAAA,iBAgBe;AAhBf,4BAiBQ8B,KAAK,CAACrC,OAjBd,qBAiBQ,oBAAAqC,KAAK,CAjBb;AAAA,iBAoBe,CACL,4BADK,CApBf;AAAA,iBAuBgBR,eAAe,CAACtB;AAvBhC,UA8BUuB,IAAI,CAACvB,KAAL;AAAA,gBAA4BuB,IAAI,CAACvB;AAAjC,2BA9BV;AAAA,yCAiCoBW,KAAK,CAACX,KAjC1B;AAAA,eAkCgBkC,KAlChB;AAAA,oBAmCqB9B,KAAK,CAACrB,QAnC3B;AAAA,cAoCeG,EAAE,CAACc,KApClB;AAAA,kBAqCmBuC,MArCnB;AAAA,mBAsCoBJ,OAtCpB;AAAA,oBAuCqB/B,KAAK,CAACR,QAvC3B;AAAA,gBAwCiBJ,IAxCjB;AAAA,iBAyCkBK,SAAS,CAACG,KAzC5B;AAAA,qCA0CiBK,KA1CjB,oBA0CiBA,KAAK,CAAEV,IAAP,CAAYK,KA1C7B,gCA0CsCI,KAAK,CAACT,IA1C5C;AAAA,wBA2CyBH,IAAI,KAAK,UAAT,GAAsBmB,KAAK,CAACX,KAA5B,GAAoCM;AA3C7D,SA4CeuB,KA5Cf,qJAiCoBlB,KAAK,CAACX,KAjC1B,qBA+CU8B,KAAK,CAACI,KA/ChB,qBA+CU,kBAAAJ,KAAK,EAAS;AACdnB,QAAAA,KADc;AAEdU,QAAAA,gBAFc;AAGdjB,QAAAA,KAAK,EAAE;AACL+B,UAAAA,OADK;AAELI,UAAAA,MAFK;AAGLrD,UAAAA,EAAE,EAAEA,EAAE,CAACc;AAHF;AAHO,OAAT,CA/Cf,sCAwBmBI,KAAK,CAACb,MAAN,IAAgB,CACzB,CAACa,KAAK,CAACrB,QAAP,IAAmB,CAACqB,KAAK,CAACR,QADD,EAEzB,IAFyB,EAGzB,CAAC,QAAD,EAAW,QAAX,CAHyB,CAxBnC;AAAA,oBA4DiBQ,KAAK,CAACrB,QA5DvB;AAAA,iBA6DcqB,KAAK,CAACnB,KA7DpB;AAAA,eA8DYC,EAAE,CAACc;AA9Df;AAAA,wBAgEQZ,KAhER;AAAA;AAAA;AAoED,KA7EQ,CAAT;AA+EA,WAAO;AACL4C,MAAAA,SADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AA/HE,CAT4C,CAA1C","sourcesContent":["// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeThemeProps } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, ref } from 'vue'\nimport { deepEqual, genericComponent, getUid, SUPPORTS_FOCUS_VISIBLE, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { ComputedRef, ExtractPropTypes, PropType, Ref, WritableComputedRef } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  isReadonly: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  textColorClasses: Ref<string[]>\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nconst selectionControlProps = {\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  label: String,\n  offIcon: String,\n  onIcon: String,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  trueValue: null,\n  falseValue: null,\n  modelValue: null,\n  type: String,\n  value: null,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeThemeProps(),\n  ...makeDensityProps(),\n} as const\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<typeof selectionControlProps> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props, 'v-selection-control')\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    group?.multiple.value ||\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => {\n    return model.value\n      ? group?.onIcon.value ?? props.onIcon\n      : group?.offIcon.value ?? props.offIcon\n  })\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  }\n  $slots: MakeSlots<{\n    default: []\n    input: [SelectionControlSlot]\n  }>\n}>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: selectionControlProps,\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      densityClasses,\n      group,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = ref(false)\n    const isFocusVisible = ref(false)\n    const input = ref<HTMLInputElement>()\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (\n        !SUPPORTS_FOCUS_VISIBLE ||\n        (SUPPORTS_FOCUS_VISIBLE && (e.target as HTMLElement).matches(':focus-visible'))\n      ) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const type = group?.type.value ?? props.type\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': group?.inline.value || props.inline,\n            },\n            densityClasses.value,\n            textColorClasses.value,\n          ]}\n        >\n          <div class=\"v-selection-control__wrapper\">\n            { slots.default?.() }\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              style={ textColorStyles.value }\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { icon.value && <VIcon icon={ icon.value } /> }\n\n              <input\n                v-model={ model.value }\n                ref={ input }\n                disabled={ props.disabled }\n                id={ id.value }\n                onBlur={ onBlur }\n                onFocus={ onFocus }\n                readonly={ props.readonly }\n                type={ type }\n                value={ trueValue.value }\n                name={ group?.name.value ?? props.name }\n                aria-checked={ type === 'checkbox' ? model.value : undefined }\n                { ...attrs }\n              />\n\n              { slots.input?.({\n                model,\n                textColorClasses,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              }) }\n            </div>\n          </div>\n\n          <VLabel\n            disabled={ props.disabled }\n            error={ props.error }\n            for={ id.value }\n          >\n            { label }\n          </VLabel>\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n"],"file":"VSelectionControl.mjs"}