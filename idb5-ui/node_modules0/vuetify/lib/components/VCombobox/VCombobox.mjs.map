{"version":3,"sources":["../../../src/components/VCombobox/VCombobox.ts"],"names":["VSelect","VAutocomplete","keyCodes","extend","name","props","delimiters","type","Array","default","returnObject","Boolean","data","editingIndex","computed","computedCounterValue","multiple","selectedItems","length","internalSearch","toString","hasSlot","options","call","isAnyValueAllowed","menuCanShow","isFocused","hasDisplayedItems","$slots","hideNoData","searchIsDirty","methods","onInternalSearchChanged","val","delimiter","find","d","endsWith","slice","updateTags","updateMenuDimensions","genInput","input","attrs","on","paste","onPaste","genChipSelection","item","index","chip","componentOptions","listeners","dblclick","getText","selectedIndex","onChipInput","onEnterDown","e","preventDefault","getMenuIndex","$nextTick","updateSelf","onKeyDown","keyCode","ctrlKey","home","end","includes","left","$refs","selectionStart","enter","changeSelectedIndex","onTabDown","stopPropagation","selectItem","updateEditing","toLocaleLowerCase","setSelectedItems","internalValue","setValue","value","findIndex","Object","assign","splice","push","updateCombobox","isUsingSlot","$scopedSlots","selection","hasChips","menuIndex","itemToSelect","event","pastedItemText","clipboardData","getData","findExistingIndex","clearableCallback"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      const index = this.selectedItems.findIndex(item =>\n        this.getText(item) === this.internalSearch)\n\n      // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n      if (index > -1) {\n        const item = typeof value[index] === 'object'\n          ? Object.assign({}, value[index])\n          : value[index]\n\n        value.splice(index, 1)\n        value.push(item)\n      } else {\n        value[this.editingIndex] = this.internalSearch\n      }\n\n      this.setValue(value)\n      this.editingIndex = -1\n      this.internalSearch = null\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n"],"file":"VCombobox.mjs"}