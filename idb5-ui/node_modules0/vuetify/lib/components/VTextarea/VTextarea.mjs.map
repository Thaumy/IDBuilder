{"version":3,"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"names":["filterFieldProps","makeVFieldProps","VCounter","VField","useProxiedModel","Intersect","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","convertToUnit","defineComponent","useRender","filterInputAttrs","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","emits","val","setup","attrs","slots","model","controlHeight","internalDirty","isDirty","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","fieldRef","inputRef","blur","sizerRef","calculateInputHeight","style","getComputedStyle","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","maxHeight","Infinity","Math","min","observer","ResizeObserver","observe","disconnect","hasCounter","rootAttrs","inputAttrs","fieldProps","_","class","e","stopPropagation","isActive","isDisabled","isReadonly","fieldClass","slotProps","showPlaceholder","opacity","handler","details","isFocused"],"mappings":"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","sourcesContent":["// Styles\nimport './VTextarea.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport { filterInputAttrs } from '@/components/VInput/VInput'\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n\n    const controlHeight = ref('auto')\n    const internalDirty = ref(false)\n    const isDirty = computed(() => {\n      return internalDirty.value || !!model.value\n    })\n\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const fieldRef = ref<VField>()\n    function focus () {\n      fieldRef.value?.inputRef?.focus()\n    }\n    function blur () {\n      fieldRef.value?.inputRef?.blur()\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n        parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = parseFloat(props.rows) * lineHeight + padding\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(Math.min(maxHeight, Math.max(minHeight, height ?? 0)))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [fieldProps, _] = filterFieldProps(props)\n\n      return (\n        <VField\n          ref={ fieldRef }\n          class={[\n            'v-textarea',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n            },\n            attrs.class,\n          ]}\n          style={{\n            '--v-input-control-height': controlHeight.value,\n          }}\n          active={ isDirty.value }\n          onUpdate:active={ val => internalDirty.value = val }\n          onClick:control={ focus }\n          onClick:clear={ e => {\n            e.stopPropagation()\n\n            model.value = ''\n          }}\n          role=\"textbox\"\n          { ...rootAttrs }\n          { ...fieldProps }\n          v-slots={{\n            ...slots,\n            default: ({\n              isActive,\n              isDisabled,\n              isReadonly,\n              inputRef,\n              props: { class: fieldClass, ...slotProps },\n            }) => {\n              const showPlaceholder = isActive || props.persistentPlaceholder\n              return (\n                <>\n                  { props.prefix && (\n                    <span class=\"v-textarea__prefix\" style={{ opacity: showPlaceholder ? undefined : '0' }}>\n                      { props.prefix }\n                    </span>\n                  ) }\n\n                  <textarea\n                    class={ fieldClass }\n                    style={{ opacity: showPlaceholder ? undefined : '0' }} // can't this just be a class?\n                    v-model={ model.value }\n                    v-intersect={[{\n                      handler: onIntersect,\n                    }, null, ['once']]}\n                    ref={ inputRef }\n                    autofocus={ props.autofocus }\n                    readonly={ isReadonly.value }\n                    disabled={ isDisabled.value }\n                    placeholder={ props.placeholder }\n                    rows={ props.rows }\n                    { ...slotProps }\n                    { ...inputAttrs }\n                  />\n\n                  { props.autoGrow && (\n                    <textarea\n                      class={[\n                        fieldClass,\n                        'v-textarea__sizer',\n                      ]}\n                      v-model={ model.value }\n                      ref={ sizerRef }\n                      readonly\n                      aria-hidden=\"true\"\n                    />\n                  )}\n\n                  { props.suffix && (\n                    <span class=\"v-textarea__suffix\" style={{ opacity: showPlaceholder ? undefined : '0' }}>\n                      { props.suffix }\n                    </span>\n                  ) }\n                </>\n              )\n            },\n            details: hasCounter ? ({ isFocused }) => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        />\n      )\n    })\n\n    return {\n      fieldRef,\n      focus,\n      blur,\n    }\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"],"file":"VTextarea.mjs"}