{"version":3,"sources":["../../../../src/components/VSparkline/helpers/math.ts"],"names":["int","value","parseInt","checkCollinear","p0","p1","p2","x","y","getDistance","Math","sqrt","pow","moveTo","to","from","radius","vector","length","unitVector"],"mappings":"AAAA;;AACA;AAIA,SAASA,GAAT,CAAcC,KAAd,EAA8C;AAC5C,SAAOC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAf;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,cAAT,CAAyBC,EAAzB,EAAoCC,EAApC,EAA+CC,EAA/C,EAAmE;AACxE,SAAON,GAAG,CAACI,EAAE,CAACG,CAAH,GAAOD,EAAE,CAACC,CAAX,CAAH,KAAqBP,GAAG,CAAC,IAAIK,EAAE,CAACE,CAAR,CAAxB,IAAsCP,GAAG,CAACI,EAAE,CAACI,CAAH,GAAOF,EAAE,CAACE,CAAX,CAAH,KAAqBR,GAAG,CAAC,IAAIK,EAAE,CAACG,CAAR,CAArE;AACD;AAED,OAAO,SAASC,WAAT,CAAsBJ,EAAtB,EAAiCC,EAAjC,EAAoD;AACzD,SAAOI,IAAI,CAACC,IAAL,CACLD,IAAI,CAACE,GAAL,CAASN,EAAE,CAACC,CAAH,GAAOF,EAAE,CAACE,CAAnB,EAAsB,CAAtB,IAA2BG,IAAI,CAACE,GAAL,CAASN,EAAE,CAACE,CAAH,GAAOH,EAAE,CAACG,CAAnB,EAAsB,CAAtB,CADtB,CAAP;AAGD;AAED,OAAO,SAASK,MAAT,CAAiBC,EAAjB,EAA4BC,IAA5B,EAAyCC,MAAzC,EAAyD;AAC9D,QAAMC,MAAM,GAAG;AAAEV,IAAAA,CAAC,EAAEO,EAAE,CAACP,CAAH,GAAOQ,IAAI,CAACR,CAAjB;AAAoBC,IAAAA,CAAC,EAAEM,EAAE,CAACN,CAAH,GAAOO,IAAI,CAACP;AAAnC,GAAf;AACA,QAAMU,MAAM,GAAGR,IAAI,CAACC,IAAL,CAAWM,MAAM,CAACV,CAAP,GAAWU,MAAM,CAACV,CAAnB,GAAyBU,MAAM,CAACT,CAAP,GAAWS,MAAM,CAACT,CAArD,CAAf;AACA,QAAMW,UAAU,GAAG;AAAEZ,IAAAA,CAAC,EAAEU,MAAM,CAACV,CAAP,GAAWW,MAAhB;AAAwBV,IAAAA,CAAC,EAAES,MAAM,CAACT,CAAP,GAAWU;AAAtC,GAAnB;AAEA,SAAO;AACLX,IAAAA,CAAC,EAAEQ,IAAI,CAACR,CAAL,GAASY,UAAU,CAACZ,CAAX,GAAeS,MADtB;AAELR,IAAAA,CAAC,EAAEO,IAAI,CAACP,CAAL,GAASW,UAAU,CAACX,CAAX,GAAeQ;AAFtB,GAAP;AAID","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\nimport { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n"],"file":"math.mjs"}