{"version":3,"sources":["../../../src/components/VOverlay/VOverlay.tsx"],"names":["makeActivatorProps","useActivator","makePositionStrategyProps","usePositionStrategies","makeScrollStrategyProps","useScrollStrategies","makeThemeProps","useTheme","makeTransitionProps","MaybeTransition","useBackButton","useBackgroundColor","useProxiedModel","useRtl","useTeleport","makeDimensionProps","useDimension","makeLazyProps","useLazy","useStack","ClickOutside","convertToUnit","genericComponent","getScrollParent","standardEasing","useRender","computed","mergeProps","ref","Teleport","toHandlers","Transition","watch","Scrim","props","modelValue","color","rest","backgroundColorClasses","value","backgroundColorStyles","VOverlay","name","directives","inheritAttrs","absolute","Boolean","attach","String","Object","contained","contentClass","noClickAnimation","persistent","scrim","type","default","emits","e","setup","slots","attrs","emit","isActive","teleportTarget","themeClasses","rtlClasses","hasContent","onAfterLeave","scrimColor","activatorEl","activatorEvents","dimensionStyles","isTop","root","contentEl","contentStyles","updatePosition","onClickOutside","animateClick","closeConditional","val","window","addEventListener","onKeydown","removeEventListener","immediate","key","next","top","scrollParent","document","scrollingElement","scrollTop","animate","transformOrigin","transform","duration","easing","activator","activatorProps","undefined","transition","handler","include"],"mappings":"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","sourcesContent":["// Styles\nimport './VOverlay.sass'\n\n// Composables\nimport { makeActivatorProps, useActivator } from './useActivator'\nimport { makePositionStrategyProps, usePositionStrategies } from './positionStrategies'\nimport { makeScrollStrategyProps, useScrollStrategies } from './scrollStrategies'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackButton } from '@/composables/router'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/rtl'\nimport { useTeleport } from '@/composables/teleport'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { useStack } from '@/composables/stack'\n\n// Directives\nimport { ClickOutside } from '@/directives/click-outside'\n\n// Utilities\nimport {\n  convertToUnit,\n  genericComponent,\n  getScrollParent,\n  standardEasing,\n  useRender,\n} from '@/util'\nimport {\n  computed,\n  mergeProps,\n  ref,\n  Teleport,\n  toHandlers,\n  Transition,\n  watch,\n} from 'vue'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { BackgroundColorData } from '@/composables/color'\n\ninterface ScrimProps {\n  [key: string]: unknown\n  modelValue: boolean\n  color: BackgroundColorData\n}\nfunction Scrim (props: ScrimProps) {\n  const { modelValue, color, ...rest } = props\n  return (\n    <Transition name=\"fade-transition\" appear>\n      { props.modelValue && (\n        <div\n          class={[\n            'v-overlay__scrim',\n            props.color.backgroundColorClasses.value,\n          ]}\n          style={ props.color.backgroundColorStyles.value }\n          { ...rest }\n        />\n      )}\n    </Transition>\n  )\n}\n\nexport type OverlaySlots = MakeSlots<{\n  default: [{ isActive: Ref<boolean> }]\n  activator: [{ isActive: boolean, props: Dictionary<any> }]\n}>\n\nexport const VOverlay = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VOverlay',\n\n  directives: { ClickOutside },\n\n  inheritAttrs: false,\n\n  props: {\n    absolute: Boolean,\n    attach: [Boolean, String, Object] as PropType<boolean | string | Element>,\n    contained: Boolean,\n    contentClass: null,\n    noClickAnimation: Boolean,\n    modelValue: Boolean,\n    persistent: Boolean,\n    scrim: {\n      type: [String, Boolean],\n      default: true,\n    },\n\n    ...makeActivatorProps(),\n    ...makeDimensionProps(),\n    ...makePositionStrategyProps(),\n    ...makeScrollStrategyProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps(),\n    ...makeLazyProps(),\n  },\n\n  emits: {\n    'click:outside': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots, attrs, emit }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { teleportTarget } = useTeleport(computed(() => props.attach || props.contained))\n    const { themeClasses } = useTheme(props)\n    const { rtlClasses } = useRtl()\n    const { hasContent, onAfterLeave } = useLazy(props, isActive)\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null\n    }))\n    const { activatorEl, activatorEvents } = useActivator(props, isActive)\n    const { dimensionStyles } = useDimension(props)\n    const { isTop } = useStack(isActive)\n\n    const root = ref<HTMLElement>()\n    const contentEl = ref<HTMLElement>()\n    const { contentStyles, updatePosition } = usePositionStrategies(props, {\n      contentEl,\n      activatorEl,\n      isActive,\n    })\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updatePosition,\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      emit('click:outside', e)\n\n      if (!props.persistent) isActive.value = false\n      else animateClick()\n    }\n\n    function closeConditional () {\n      return isActive.value && isTop.value\n    }\n\n    watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown)\n      } else {\n        window.removeEventListener('keydown', onKeydown)\n      }\n    }, { immediate: true })\n\n    function onKeydown (e: KeyboardEvent) {\n      if (e.key === 'Escape' && isTop.value) {\n        if (!props.persistent) {\n          isActive.value = false\n        } else animateClick()\n      }\n    }\n\n    useBackButton(next => {\n      if (isTop.value && isActive.value) {\n        next(false)\n        if (!props.persistent) isActive.value = false\n        else animateClick()\n      } else {\n        next()\n      }\n    })\n\n    const top = ref<number>()\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value)\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop\n        }\n      }\n    })\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick () {\n      if (props.noClickAnimation) return\n\n      contentEl.value?.animate([\n        { transformOrigin: 'center' },\n        { transform: 'scale(1.03)' },\n        { transformOrigin: 'center' },\n      ], {\n        duration: 150,\n        easing: standardEasing,\n      })\n    }\n\n    useRender(() => (\n      <>\n        { slots.activator?.({\n          isActive: isActive.value,\n          props: mergeProps({\n            modelValue: isActive.value,\n            'onUpdate:modelValue': (val: boolean) => isActive.value = val,\n          }, toHandlers(activatorEvents.value), props.activatorProps),\n        }) }\n        <Teleport\n          disabled={ !teleportTarget.value }\n          to={ teleportTarget.value }\n        >\n          { hasContent.value && (\n            <div\n              class={[\n                'v-overlay',\n                {\n                  'v-overlay--absolute': props.absolute || props.contained,\n                  'v-overlay--active': isActive.value,\n                  'v-overlay--contained': props.contained,\n                },\n                themeClasses.value,\n                rtlClasses.value,\n              ]}\n              style={ top.value != null ? `top: ${convertToUnit(top.value)}` : undefined }\n              ref={ root }\n              {...attrs}\n            >\n              <Scrim\n                color={ scrimColor }\n                modelValue={ isActive.value && !!props.scrim }\n              />\n              <MaybeTransition\n                appear\n                onAfterLeave={ onAfterLeave }\n                persisted\n                transition={ props.transition }\n                target={ activatorEl.value }\n              >\n                <div\n                  ref={ contentEl }\n                  v-show={ isActive.value }\n                  v-click-outside={{ handler: onClickOutside, closeConditional, include: () => [activatorEl.value] }}\n                  class={[\n                    'v-overlay__content',\n                    props.contentClass,\n                  ]}\n                  style={[\n                    dimensionStyles.value,\n                    contentStyles.value,\n                  ]}\n                >\n                  { slots.default?.({ isActive }) }\n                </div>\n              </MaybeTransition>\n            </div>\n          )}\n        </Teleport>\n      </>\n    ))\n\n    return {\n      animateClick,\n      contentEl,\n      activatorEl,\n    }\n  },\n})\n\nexport type VOverlay = InstanceType<typeof VOverlay>\n"],"file":"VOverlay.mjs"}