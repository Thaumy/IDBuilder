{"version":3,"sources":["../../../src/components/VTabs/VTabsBar.ts"],"names":["BaseSlideGroup","Themeable","SSRBootable","mixins","extend","name","provide","tabsBar","computed","classes","options","call","isMobile","showArrows","themeClasses","watch","items","internalValue","$route","methods","callSlider","isBooted","$emit","genContent","render","data","staticClass","onRouteChange","val","oldVal","mandatory","newPath","path","oldPath","hasNew","hasOld","item","to","undefined","h","attrs","role"],"mappings":"AAAA;;AACA;AAEA;SACSA,c,0CAET;;AAGA;OACOC,S;OACAC,W,uCAEP;;OACOC,M,+BAEP;AACA;;AAKA,eAAeA,MAAM,CACnBH,cADmB,EAEnBE,WAFmB,EAGnBD;AACA;AAJmB,CAAN,CAKbG,MALa,CAKN;AACPC,EAAAA,IAAI,EAAE,YADC;;AAGPC,EAAAA,OAAO,GAAI;AACT,WAAO;AACLC,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD,GAPM;;AASPC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,GAAI;AACT,aAAO,EACL,GAAGT,cAAc,CAACU,OAAf,CAAuBF,QAAvB,CAAgCC,OAAhC,CAAwCE,IAAxC,CAA6C,IAA7C,CADE;AAEL,sBAAc,IAFT;AAGL,iCAAyB,KAAKC,QAHzB;AAIL;AACA,mCAA2B,KAAKC,UAL3B;AAML,WAAG,KAAKC;AANH,OAAP;AAQD;;AAVO,GATH;AAsBPC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,YADF;AAELC,IAAAA,aAAa,EAAE,YAFV;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAtBA;AA4BPC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,GAAI;AACZ,UAAI,CAAC,KAAKC,QAAV,EAAoB;AAEpB,WAAKC,KAAL,CAAW,aAAX;AACD,KALM;;AAMPC,IAAAA,UAAU,GAAI;AACZ,YAAMC,MAAM,GAAGxB,cAAc,CAACU,OAAf,CAAuBS,OAAvB,CAA+BI,UAA/B,CAA0CZ,IAA1C,CAA+C,IAA/C,CAAf;AAEAa,MAAAA,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACC,IAAP,IAAe,EAA7B;AACAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,WAAZ,IAA2B,sBAA3B;AAEA,aAAOF,MAAP;AACD,KAbM;;AAcPG,IAAAA,aAAa,CAAEC,GAAF,EAAcC,MAAd,EAA6B;AACxC;AACA,UAAI,KAAKC,SAAT,EAAoB;AAEpB,YAAMd,KAAK,GAAG,KAAKA,KAAnB;AACA,YAAMe,OAAO,GAAGH,GAAG,CAACI,IAApB;AACA,YAAMC,OAAO,GAAGJ,MAAM,CAACG,IAAvB;AAEA,UAAIE,MAAM,GAAG,KAAb;AACA,UAAIC,MAAM,GAAG,KAAb;;AAEA,WAAK,MAAMC,IAAX,IAAmBpB,KAAnB,EAA0B;AACxB,YAAIoB,IAAI,CAACC,EAAL,KAAYJ,OAAhB,EAAyBE,MAAM,GAAG,IAAT,CAAzB,KACK,IAAIC,IAAI,CAACC,EAAL,KAAYN,OAAhB,EAAyBG,MAAM,GAAG,IAAT;AAE9B,YAAIA,MAAM,IAAIC,MAAd,EAAsB;AACvB,OAhBuC,CAkBxC;AACA;AACA;;;AACA,UAAI,CAACD,MAAD,IAAWC,MAAf,EAAuB,KAAKlB,aAAL,GAAqBqB,SAArB;AACxB;;AApCM,GA5BF;;AAmEPd,EAAAA,MAAM,CAAEe,CAAF,EAAY;AAChB,UAAMf,MAAM,GAAGxB,cAAc,CAACU,OAAf,CAAuBc,MAAvB,CAA8Bb,IAA9B,CAAmC,IAAnC,EAAyC4B,CAAzC,CAAf;AAEAf,IAAAA,MAAM,CAACC,IAAP,CAAae,KAAb,GAAqB;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,WAAOjB,MAAP;AACD;;AA3EM,CALM,CAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Extensions\nimport { BaseSlideGroup } from '../VSlideGroup/VSlideGroup'\n\n// Components\nimport VTab from './VTab'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport SSRBootable from '../../mixins/ssr-bootable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\n// import { Route } from 'vue-router'\nimport { VNode } from 'vue'\n\ntype VTabInstance = InstanceType<typeof VTab>\n\nexport default mixins(\n  BaseSlideGroup,\n  SSRBootable,\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-tabs-bar',\n\n  provide () {\n    return {\n      tabsBar: this,\n    }\n  },\n\n  computed: {\n    classes () {\n      return {\n        ...BaseSlideGroup.options.computed.classes.call(this),\n        'v-tabs-bar': true,\n        'v-tabs-bar--is-mobile': this.isMobile,\n        // TODO: Remove this and move to v-slide-group\n        'v-tabs-bar--show-arrows': this.showArrows,\n        ...this.themeClasses,\n      }\n    },\n  },\n\n  watch: {\n    items: 'callSlider',\n    internalValue: 'callSlider',\n    $route: 'onRouteChange',\n  },\n\n  methods: {\n    callSlider () {\n      if (!this.isBooted) return\n\n      this.$emit('call:slider')\n    },\n    genContent () {\n      const render = BaseSlideGroup.options.methods.genContent.call(this)\n\n      render.data = render.data || {}\n      render.data.staticClass += ' v-tabs-bar__content'\n\n      return render\n    },\n    onRouteChange (val: Route, oldVal: Route) {\n      /* istanbul ignore next */\n      if (this.mandatory) return\n\n      const items = this.items as unknown as VTabInstance[]\n      const newPath = val.path\n      const oldPath = oldVal.path\n\n      let hasNew = false\n      let hasOld = false\n\n      for (const item of items) {\n        if (item.to === oldPath) hasOld = true\n        else if (item.to === newPath) hasNew = true\n\n        if (hasNew && hasOld) break\n      }\n\n      // If we have an old item and not a new one\n      // it's assumed that the user navigated to\n      // a path that is not present in the items\n      if (!hasNew && hasOld) this.internalValue = undefined\n    },\n  },\n\n  render (h): VNode {\n    const render = BaseSlideGroup.options.render.call(this, h)\n\n    render.data!.attrs = {\n      role: 'tablist',\n    }\n\n    return render\n  },\n})\n"],"file":"VTabsBar.mjs"}