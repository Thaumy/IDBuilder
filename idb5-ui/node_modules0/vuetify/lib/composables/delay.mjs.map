{"version":3,"sources":["../../src/composables/delay.ts"],"names":["IN_BROWSER","propsFactory","makeDelayProps","closeDelay","Number","String","openDelay","useDelay","props","cb","delays","runDelayFactory","prop","Promise","resolve","active","window","clearTimeout","delay","parseInt","setTimeout","runCloseDelay","runOpenDelay"],"mappings":"AAAA;SACSA,U,EAAYC,Y,6BAErB;;AAMA;AACA,OAAO,MAAMC,cAAc,GAAGD,YAAY,CAAC;AACzCE,EAAAA,UAAU,EAAE,CAACC,MAAD,EAASC,MAAT,CAD6B;AAEzCC,EAAAA,SAAS,EAAE,CAACF,MAAD,EAASC,MAAT;AAF8B,CAAD,EAGvC,OAHuC,CAAnC;AAKP,OAAO,SAASE,QAAT,CAAmBC,KAAnB,EAAsCC,EAAtC,EAAqE;AAC1E,QAAMC,MAAiD,GAAG,EAA1D;;AACA,QAAMC,eAAe,GAAIC,IAAD,IAA4B,MAAwB;AAC1E;AACA,QAAI,CAACZ,UAAL,EAAiB,OAAOa,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AAEjB,UAAMC,MAAM,GAAGH,IAAI,KAAK,WAAxB;AAEAF,IAAAA,MAAM,CAACP,UAAP,IAAqBa,MAAM,CAACC,YAAP,CAAoBP,MAAM,CAACP,UAA3B,CAArB;AACA,WAAOO,MAAM,CAACP,UAAd;AAEAO,IAAAA,MAAM,CAACJ,SAAP,IAAoBU,MAAM,CAACC,YAAP,CAAoBP,MAAM,CAACJ,SAA3B,CAApB;AACA,WAAOI,MAAM,CAACJ,SAAd;AAEA,WAAO,IAAIO,OAAJ,CAAYC,OAAO,IAAI;AAAA;;AAC5B,YAAMI,KAAK,GAAGC,QAAQ,gBAACX,KAAK,CAACI,IAAD,CAAN,0BAAgB,CAAhB,EAAmB,EAAnB,CAAtB;AAEAF,MAAAA,MAAM,CAACE,IAAD,CAAN,GAAeI,MAAM,CAACI,UAAP,CAAkB,MAAM;AACrCX,QAAAA,EAAE,QAAF,YAAAA,EAAE,CAAGM,MAAH,CAAF;AACAD,QAAAA,OAAO,CAACC,MAAD,CAAP;AACD,OAHc,EAGZG,KAHY,CAAf;AAID,KAPM,CAAP;AAQD,GApBD;;AAsBA,SAAO;AACLG,IAAAA,aAAa,EAAEV,eAAe,CAAC,YAAD,CADzB;AAELW,IAAAA,YAAY,EAAEX,eAAe,CAAC,WAAD;AAFxB,GAAP;AAID","sourcesContent":["// Utilities\nimport { IN_BROWSER, propsFactory } from '@/util'\n\n// Types\nexport interface DelayProps {\n  closeDelay?: number | string\n  openDelay?: number | string\n}\n\n// Composables\nexport const makeDelayProps = propsFactory({\n  closeDelay: [Number, String],\n  openDelay: [Number, String],\n}, 'delay')\n\nexport function useDelay (props: DelayProps, cb?: (value: boolean) => void) {\n  const delays: Partial<Record<keyof DelayProps, number>> = {}\n  const runDelayFactory = (prop: keyof DelayProps) => (): Promise<boolean> => {\n    // istanbul ignore next\n    if (!IN_BROWSER) return Promise.resolve(true)\n\n    const active = prop === 'openDelay'\n\n    delays.closeDelay && window.clearTimeout(delays.closeDelay)\n    delete delays.closeDelay\n\n    delays.openDelay && window.clearTimeout(delays.openDelay)\n    delete delays.openDelay\n\n    return new Promise(resolve => {\n      const delay = parseInt(props[prop] ?? 0, 10)\n\n      delays[prop] = window.setTimeout(() => {\n        cb?.(active)\n        resolve(active)\n      }, delay)\n    })\n  }\n\n  return {\n    runCloseDelay: runDelayFactory('closeDelay'),\n    runOpenDelay: runDelayFactory('openDelay'),\n  }\n}\n"],"file":"delay.mjs"}