{"version":3,"sources":["../../../src/composables/nested/selectStrategies.ts"],"names":["independentSelectStrategy","select","id","value","selected","set","in","v","children","parents","map","Map","out","arr","key","entries","push","leafSelectStrategy","single","strategy","has","classicSelectStrategy","items","length","item","shift","get","parent","childrenIds","everySelected","every","cid","noneSelected"],"mappings":"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","sourcesContent":["export type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy: SelectStrategy = {\n  select: ({ id, value, selected }) => {\n    selected.set(id, value ? 'on' : 'off')\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = independentSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: v => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on') arr.push(key)\n    }\n\n    return arr\n  },\n}\n\nexport const leafSelectStrategy = (single = false): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children }) => {\n      if (children.has(id)) return selected\n\n      if (single) return new Map([[id, value ? 'on' : 'off']])\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v ?? [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: independentSelectStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy: SelectStrategy = {\n  select: ({ id, value, selected, children, parents }) => {\n    const items = [id]\n\n    while (items.length) {\n      const item = items.shift()!\n\n      selected.set(item, value ? 'on' : 'off')\n\n      if (children.has(item)) {\n        items.push(...children.get(item)!)\n      }\n    }\n\n    let parent = parents.get(id)\n\n    while (parent) {\n      const childrenIds = children.get(parent)!\n      const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n      const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n      selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n      parent = parents.get(parent)\n    }\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = classicSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: (v, children) => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on' && !children.has(key)) arr.push(key)\n    }\n\n    return arr\n  },\n}\n"],"file":"selectStrategies.mjs"}