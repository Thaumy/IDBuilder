{"version":3,"sources":["../../../src/composables/nested/nested.ts"],"names":["useProxiedModel","getUid","propsFactory","computed","inject","onBeforeUnmount","provide","ref","multipleOpenStrategy","singleOpenStrategy","classicSelectStrategy","independentSelectStrategy","leafSelectStrategy","classicActiveStrategy","VNestedSymbol","Symbol","for","emptyNested","id","root","register","unregister","parents","Map","children","open","select","opened","Set","selected","active","activate","selectedValues","makeNestedProps","selectStrategy","String","Function","openStrategy","activeStrategy","Array","useNested","props","isUnmounted","v","values","value","in","out","nested","arr","key","entries","push","parentId","isGroup","set","get","delete","parent","list","filter","child","event","newOpened","newSelected","newActive","useNestedItem","computedId","toString","item","e","isSelected","activated","isActive","has","useNestedGroup","group","isOpen","isIndeterminate"],"mappings":"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","sourcesContent":["import { useProxiedModel } from '@/composables/proxiedModel'\nimport { getUid, propsFactory } from '@/util'\nimport { computed, inject, onBeforeUnmount, provide, ref } from 'vue'\nimport { multipleOpenStrategy, singleOpenStrategy } from './openStrategies'\nimport { classicSelectStrategy, independentSelectStrategy, leafSelectStrategy } from './selectStrategies'\nimport { classicActiveStrategy } from './activeStrategies'\n\n// Types\nimport type { InjectionKey, Prop, Ref } from 'vue'\nimport type { SelectStrategyFn } from './selectStrategies'\nimport type { OpenStrategyFn } from './openStrategies'\nimport type { ActiveStrategyFn } from './activeStrategies'\n\nexport type SelectStrategy = 'single-leaf' | 'leaf' | 'independent' | 'classic' | SelectStrategyFn\nexport type OpenStrategy = 'single' | 'multiple' | OpenStrategyFn\nexport type ActiveStrategy = 'single' | 'multiple' | ActiveStrategyFn\n\nexport interface NestedProps {\n  selectStrategy: SelectStrategy | undefined\n  openStrategy: OpenStrategy | undefined\n  activeStrategy: ActiveStrategy | undefined\n  selected: string[] | undefined\n  opened: string[] | undefined\n  active: string[] | undefined\n  'onUpdate:selected': ((val: string[]) => void) | undefined\n  'onUpdate:opened': ((val: string[]) => void) | undefined\n  'onUpdate:active': ((val: string[]) => void) | undefined\n}\n\ntype NestedProvide = {\n  id: Ref<string | null>\n  root: {\n    children: Ref<Map<string, string[]>>\n    parents: Ref<Map<string, string>>\n    opened: Ref<Set<string>>\n    active: Ref<Set<string>>\n    selected: Ref<Map<string, 'on' | 'off' | 'indeterminate'>>\n    selectedValues: Ref<string[]>\n    register: (id: string, parentId: string | null, isGroup?: boolean) => void\n    unregister: (id: string) => void\n    open: (id: string, value: boolean, event?: Event) => void\n    select: (id: string, value: boolean, event?: Event) => void\n    activate: (id: string, value: boolean, event?: Event) => void\n  }\n}\n\nconst VNestedSymbol: InjectionKey<NestedProvide> = Symbol.for('vuetify:nested')\n\nconst emptyNested: NestedProvide = {\n  id: ref(null),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    active: ref(new Set()),\n    activate: () => null,\n    selectedValues: ref([]),\n  },\n}\n\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function] as Prop<SelectStrategy>,\n  openStrategy: [String, Function] as Prop<OpenStrategy>,\n  activeStrategy: [String, Function] as Prop<ActiveStrategy>,\n  opened: Array as Prop<string[]>,\n  selected: Array as Prop<string[]>,\n  active: Array as Prop<string[]>,\n}, 'nested')\n\nexport const useNested = (props: NestedProps) => {\n  let isUnmounted = false\n  const children = ref(new Map<string, string[]>())\n  const parents = ref(new Map<string, string>())\n\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()])\n  const active = useProxiedModel(props, 'active', props.active, v => new Set(v), v => [...v.values()])\n\n  const activeStrategy = computed(() => {\n    if (typeof props.activeStrategy === 'object') return props.activeStrategy\n\n    switch (props.activeStrategy) {\n      case 'single': return classicActiveStrategy(true)\n      case 'multiple':\n      default:\n        return classicActiveStrategy()\n    }\n  })\n\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy\n\n    switch (props.selectStrategy) {\n      case 'single-leaf': return leafSelectStrategy(true)\n      case 'leaf': return leafSelectStrategy()\n      case 'independent': return independentSelectStrategy\n      case 'classic':\n      default: return classicSelectStrategy\n    }\n  })\n\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'function') return props.openStrategy\n\n    switch (props.openStrategy) {\n      case 'single': return singleOpenStrategy\n      case 'multiple':\n      default: return multipleOpenStrategy\n    }\n  })\n\n  const selected = useProxiedModel(\n    props,\n    'selected',\n    props.selected,\n    v => selectStrategy.value.in(v, children.value, parents.value),\n    v => selectStrategy.value.out(v, children.value, parents.value),\n  )\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  const nested: NestedProvide = {\n    id: ref(null),\n    root: {\n      opened,\n      selected,\n      active,\n      selectedValues: computed(() => {\n        const arr = []\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key)\n        }\n\n        return arr\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && parents.value.set(id, parentId)\n\n        isGroup && children.value.set(id, [])\n\n        if (parentId != null) {\n          children.value.set(parentId, [...children.value.get(parentId) || [], id])\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return\n\n        children.value.delete(id)\n        const parent = parents.value.get(id)\n        if (parent) {\n          const list = children.value.get(parent) ?? []\n          children.value.set(parent, list.filter(child => child !== id))\n        }\n        parents.value.delete(id)\n        opened.value.delete(id)\n        active.value.delete(id)\n        selected.value.delete(id)\n      },\n      open: (id, value, event) => {\n        const newOpened = openStrategy.value({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newOpened && (opened.value = newOpened)\n      },\n      select: (id, value, event) => {\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newSelected && (selected.value = newSelected)\n      },\n      activate: (id, value, event) => {\n        const newActive = activeStrategy.value({\n          id,\n          value,\n          active: new Set(active.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newActive && (active.value = newActive)\n      },\n      children,\n      parents,\n    },\n  }\n\n  provide(VNestedSymbol, nested)\n\n  return nested.root\n}\n\nexport const useNestedItem = (id: Ref<string | undefined>) => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  const computedId = computed(() => id.value ?? getUid().toString())\n\n  const item = {\n    ...parent,\n    id: computedId,\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected: boolean, e: Event) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(computedId.value) === 'on'),\n    activate: (activated: boolean, e: Event) => parent.root.activate(computedId.value, activated, e),\n    isActive: computed(() => parent.root.active.value.has(computedId.value)),\n  }\n\n  parent.root.register(computedId.value, parent.id.value, false)\n\n  onBeforeUnmount(() => {\n    parent.root.unregister(computedId.value)\n  })\n\n  return item\n}\n\nexport const useNestedGroup = (props: { value: string }) => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  const id = computed(() => props.value ?? getUid().toString())\n\n  const group = {\n    ...parent,\n    id,\n    open: (open: boolean, e: Event) => parent.root.open(id.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(id.value)),\n    isSelected: computed(() => parent.root.selected.value.get(id.value) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(id.value) === 'indeterminate'),\n  }\n\n  parent.root.register(id.value, parent.id.value, true)\n\n  onBeforeUnmount(() => {\n    parent.root.unregister(id.value)\n  })\n\n  provide(VNestedSymbol, group)\n\n  return group\n}\n"],"file":"nested.mjs"}