{"version":3,"sources":["../../src/composables/dimensions.ts"],"names":["computed","convertToUnit","propsFactory","makeDimensionProps","height","Number","String","maxHeight","maxWidth","minHeight","minWidth","width","useDimension","props","dimensionStyles"],"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,KAAzB;SACSC,a,EAAeC,Y,6BAExB;;AAUA;AACA,OAAO,MAAMC,kBAAkB,GAAGD,YAAY,CAAC;AAC7CE,EAAAA,MAAM,EAAE,CAACC,MAAD,EAASC,MAAT,CADqC;AAE7CC,EAAAA,SAAS,EAAE,CAACF,MAAD,EAASC,MAAT,CAFkC;AAG7CE,EAAAA,QAAQ,EAAE,CAACH,MAAD,EAASC,MAAT,CAHmC;AAI7CG,EAAAA,SAAS,EAAE,CAACJ,MAAD,EAASC,MAAT,CAJkC;AAK7CI,EAAAA,QAAQ,EAAE,CAACL,MAAD,EAASC,MAAT,CALmC;AAM7CK,EAAAA,KAAK,EAAE,CAACN,MAAD,EAASC,MAAT;AANsC,CAAD,EAO3C,WAP2C,CAAvC;AASP,OAAO,SAASM,YAAT,CAAuBC,KAAvB,EAA8C;AACnD,QAAMC,eAAe,GAAGd,QAAQ,CAAC,OAAO;AACtCI,IAAAA,MAAM,EAAEH,aAAa,CAACY,KAAK,CAACT,MAAP,CADiB;AAEtCG,IAAAA,SAAS,EAAEN,aAAa,CAACY,KAAK,CAACN,SAAP,CAFc;AAGtCC,IAAAA,QAAQ,EAAEP,aAAa,CAACY,KAAK,CAACL,QAAP,CAHe;AAItCC,IAAAA,SAAS,EAAER,aAAa,CAACY,KAAK,CAACJ,SAAP,CAJc;AAKtCC,IAAAA,QAAQ,EAAET,aAAa,CAACY,KAAK,CAACH,QAAP,CALe;AAMtCC,IAAAA,KAAK,EAAEV,aAAa,CAACY,KAAK,CAACF,KAAP;AANkB,GAAP,CAAD,CAAhC;AASA,SAAO;AAAEG,IAAAA;AAAF,GAAP;AACD","sourcesContent":["// Utilities\nimport { computed } from 'vue'\nimport { convertToUnit, propsFactory } from '@/util'\n\n// Types\nexport interface DimensionProps {\n  height?: number | string\n  maxHeight?: number | string\n  maxWidth?: number | string\n  minHeight?: number | string\n  minWidth?: number | string\n  width?: number | string\n}\n\n// Composables\nexport const makeDimensionProps = propsFactory({\n  height: [Number, String],\n  maxHeight: [Number, String],\n  maxWidth: [Number, String],\n  minHeight: [Number, String],\n  minWidth: [Number, String],\n  width: [Number, String],\n}, 'dimension')\n\nexport function useDimension (props: DimensionProps) {\n  const dimensionStyles = computed(() => ({\n    height: convertToUnit(props.height),\n    maxHeight: convertToUnit(props.maxHeight),\n    maxWidth: convertToUnit(props.maxWidth),\n    minHeight: convertToUnit(props.minHeight),\n    minWidth: convertToUnit(props.minWidth),\n    width: convertToUnit(props.width),\n  }))\n\n  return { dimensionStyles }\n}\n"],"file":"dimensions.mjs"}