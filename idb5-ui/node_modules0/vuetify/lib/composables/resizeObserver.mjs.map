{"version":3,"sources":["../../src/composables/resizeObserver.ts"],"names":["onBeforeUnmount","readonly","ref","watch","useResizeObserver","callback","resizeRef","contentRect","contentBoxSize","borderBoxSize","observer","ResizeObserver","entries","length","value","disconnect","newValue","oldValue","unobserve","undefined","observe","flush"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;AAUA,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAA4E;AACjF,QAAMC,SAAS,GAAGJ,GAAG,EAArB;AACA,QAAMK,WAAW,GAAGL,GAAG,EAAvB;AACA,QAAMM,cAAc,GAAGN,GAAG,EAA1B;AACA,QAAMO,aAAa,GAAGP,GAAG,EAAzB;AAEA,QAAMQ,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAoC;AACtEP,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGO,OAAH,EAAYF,QAAZ,CAAR;AAEA,QAAI,CAACE,OAAO,CAACC,MAAb,EAAqB;AAErBN,IAAAA,WAAW,CAACO,KAAZ,GAAoBF,OAAO,CAAC,CAAD,CAAP,CAAWL,WAA/B;AACAC,IAAAA,cAAc,CAACM,KAAf,GAAuBF,OAAO,CAAC,CAAD,CAAP,CAAWJ,cAAX,CAA0B,CAA1B,CAAvB;AACAC,IAAAA,aAAa,CAACK,KAAd,GAAsBF,OAAO,CAAC,CAAD,CAAP,CAAWH,aAAX,CAAyB,CAAzB,CAAtB;AACD,GARgB,CAAjB;AAUAT,EAAAA,eAAe,CAAC,MAAM;AACpBU,IAAAA,QAAQ,CAACK,UAAT;AACD,GAFc,CAAf;AAIAZ,EAAAA,KAAK,CAACG,SAAD,EAAY,CAACU,QAAD,EAAWC,QAAX,KAAwB;AACvC,QAAIA,QAAJ,EAAc;AACZP,MAAAA,QAAQ,CAACQ,SAAT,CAAmBD,QAAnB;AACAV,MAAAA,WAAW,CAACO,KAAZ,GAAoBK,SAApB;AACAX,MAAAA,cAAc,CAACM,KAAf,GAAuBK,SAAvB;AACAV,MAAAA,aAAa,CAACK,KAAd,GAAsBK,SAAtB;AACD;;AAED,QAAIH,QAAJ,EAAcN,QAAQ,CAACU,OAAT,CAAiBJ,QAAjB;AACf,GATI,EASF;AACDK,IAAAA,KAAK,EAAE;AADN,GATE,CAAL;AAaA,SAAO;AACLf,IAAAA,SADK;AAELC,IAAAA,WAAW,EAAEN,QAAQ,CAACM,WAAD,CAFhB;AAGLC,IAAAA,cAAc,EAAEP,QAAQ,CAACO,cAAD,CAHnB;AAILC,IAAAA,aAAa,EAAER,QAAQ,CAACQ,aAAD;AAJlB,GAAP;AAMD","sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport type { DeepReadonly, Ref } from 'vue'\n\ninterface ResizeState {\n  resizeRef: Ref<Element | undefined>\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n  borderBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n  contentBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback): ResizeState {\n  const resizeRef = ref<Element>()\n  const contentRect = ref<DOMRectReadOnly>()\n  const contentBoxSize = ref<ResizeObserverSize>()\n  const borderBoxSize = ref<ResizeObserverSize>()\n\n  const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n    callback?.(entries, observer)\n\n    if (!entries.length) return\n\n    contentRect.value = entries[0].contentRect\n    contentBoxSize.value = entries[0].contentBoxSize[0]\n    borderBoxSize.value = entries[0].borderBoxSize[0]\n  })\n\n  onBeforeUnmount(() => {\n    observer.disconnect()\n  })\n\n  watch(resizeRef, (newValue, oldValue) => {\n    if (oldValue) {\n      observer.unobserve(oldValue)\n      contentRect.value = undefined\n      contentBoxSize.value = undefined\n      borderBoxSize.value = undefined\n    }\n\n    if (newValue) observer.observe(newValue)\n  }, {\n    flush: 'post',\n  })\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n    contentBoxSize: readonly(contentBoxSize),\n    borderBoxSize: readonly(borderBoxSize),\n  }\n}\n"],"file":"resizeObserver.mjs"}