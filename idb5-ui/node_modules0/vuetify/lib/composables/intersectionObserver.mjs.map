{"version":3,"sources":["../../src/composables/intersectionObserver.ts"],"names":["onBeforeUnmount","ref","watch","useIntersectionObserver","callback","intersectionRef","isIntersecting","observer","IntersectionObserver","entries","value","find","entry","disconnect","newValue","oldValue","unobserve","observe","flush"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,GAA1B,EAA+BC,KAA/B,QAA4C,KAA5C;AAEA,OAAO,SAASC,uBAAT,CAAkCC,QAAlC,EAA2E;AAChF,QAAMC,eAAe,GAAGJ,GAAG,EAA3B;AACA,QAAMK,cAAc,GAAGL,GAAG,CAAC,KAAD,CAA1B;AAEA,QAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAA0C;AAClFL,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGK,OAAH,EAAYF,QAAZ,CAAR;AAEAD,IAAAA,cAAc,CAACI,KAAf,GAAuB,CAAC,CAACD,OAAO,CAACE,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACN,cAA5B,CAAzB;AACD,GAJgB,CAAjB;AAMAN,EAAAA,eAAe,CAAC,MAAM;AACpBO,IAAAA,QAAQ,CAACM,UAAT;AACD,GAFc,CAAf;AAIAX,EAAAA,KAAK,CAACG,eAAD,EAAkB,CAACS,QAAD,EAAWC,QAAX,KAAwB;AAC7C,QAAIA,QAAJ,EAAc;AACZR,MAAAA,QAAQ,CAACS,SAAT,CAAmBD,QAAnB;AACAT,MAAAA,cAAc,CAACI,KAAf,GAAuB,KAAvB;AACD;;AAED,QAAII,QAAJ,EAAcP,QAAQ,CAACU,OAAT,CAAiBH,QAAjB;AACf,GAPI,EAOF;AACDI,IAAAA,KAAK,EAAE;AADN,GAPE,CAAL;AAWA,SAAO;AAAEb,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,GAAP;AACD","sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = ref(false)\n\n  const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n    callback?.(entries, observer)\n\n    isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n  })\n\n  onBeforeUnmount(() => {\n    observer.disconnect()\n  })\n\n  watch(intersectionRef, (newValue, oldValue) => {\n    if (oldValue) {\n      observer.unobserve(oldValue)\n      isIntersecting.value = false\n    }\n\n    if (newValue) observer.observe(newValue)\n  }, {\n    flush: 'post',\n  })\n\n  return { intersectionRef, isIntersecting }\n}\n"],"file":"intersectionObserver.mjs"}