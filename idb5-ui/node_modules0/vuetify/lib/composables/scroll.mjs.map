{"version":3,"sources":["../../src/composables/scroll.ts"],"names":["computed","getCurrentInstance","onBeforeUnmount","onMounted","ref","watch","consoleWarn","propsFactory","makeScrollProps","scrollTarget","type","String","scrollThreshold","Number","useScroll","props","args","thresholdMetCallback","canScroll","previousScroll","target","currentScroll","savedScroll","currentThreshold","isScrollActive","isScrollingUp","computedScrollThreshold","onScroll","targetEl","value","pageYOffset","scrollTop","Math","abs","newTarget","document","querySelector","window","removeEventListener","addEventListener","passive","immediate","thresholdMet"],"mappings":"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","sourcesContent":["// Utilities\nimport {\n  computed,\n  getCurrentInstance,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nexport interface ScrollProps {\n  scrollTarget?: string\n  scrollThreshold?: string | number\n}\n\nexport interface ThresholdMetCallbackData {\n  isScrollingUp: boolean\n  currentThreshold: number\n  savedScroll: Ref<number>\n}\n\n// Composables\nexport const makeScrollProps = propsFactory({\n  scrollTarget: {\n    type: String,\n  },\n  scrollThreshold: {\n    type: [String, Number],\n  },\n}, 'scroll')\n\nexport interface ScrollArguments {\n  thresholdMetCallback?: (data: ThresholdMetCallbackData) => void\n  scrollThreshold?: Readonly<Ref<number>>\n  canScroll?: Readonly<Ref<boolean>>\n}\n\nexport function useScroll (\n  props: ScrollProps,\n  args: ScrollArguments = {},\n) {\n  const { thresholdMetCallback, scrollThreshold, canScroll } = args\n  let previousScroll = 0\n  const target = ref<Element | Window | null>(null)\n  const currentScroll = ref(0)\n  const savedScroll = ref(0)\n  const currentThreshold = ref(0)\n  const isScrollActive = ref(false)\n  const isScrollingUp = ref(false)\n\n  const computedScrollThreshold = computed(() => {\n    return Number(props.scrollThreshold ?? scrollThreshold ?? 300)\n  })\n\n  const onScroll = () => {\n    const targetEl = target.value\n\n    if (!targetEl || (canScroll && !canScroll.value)) return\n\n    previousScroll = currentScroll.value\n    currentScroll.value = ('window' in targetEl) ? targetEl.pageYOffset : targetEl.scrollTop\n\n    isScrollingUp.value = currentScroll.value < previousScroll\n    currentThreshold.value = Math.abs(currentScroll.value - computedScrollThreshold.value)\n  }\n\n  watch(isScrollingUp, () => {\n    savedScroll.value = savedScroll.value || currentScroll.value\n  })\n\n  watch(isScrollActive, () => {\n    savedScroll.value = 0\n  })\n\n  onMounted(() => {\n    watch(() => props.scrollTarget, scrollTarget => {\n      const newTarget = scrollTarget ? document.querySelector(scrollTarget) : window\n\n      if (!newTarget) {\n        consoleWarn(`Unable to locate element with identifier ${scrollTarget}`, getCurrentInstance())\n        return\n      }\n\n      if (newTarget === target.value) return\n\n      target.value?.removeEventListener('scroll', onScroll)\n      target.value = newTarget\n      target.value.addEventListener('scroll', onScroll, { passive: true })\n    }, { immediate: true })\n  })\n\n  onBeforeUnmount(() => {\n    target.value?.removeEventListener('scroll', onScroll)\n  })\n\n  thresholdMetCallback && watch(() => (\n    Math.abs(currentScroll.value - savedScroll.value) > computedScrollThreshold.value\n  ), thresholdMet => {\n    thresholdMet && thresholdMetCallback({\n      currentThreshold: currentThreshold.value,\n      isScrollingUp: isScrollingUp.value,\n      savedScroll,\n    })\n  }, { immediate: true })\n\n  // Do we need this? If yes - seems that\n  // there's no need to expose onScroll\n  canScroll && watch(canScroll, onScroll, { immediate: true })\n\n  return {\n    isScrollActive,\n\n    // required only for testing\n    // probably can be removed\n    // later (2 chars chlng)\n    isScrollingUp,\n    savedScroll,\n  }\n}\n"],"file":"scroll.mjs"}