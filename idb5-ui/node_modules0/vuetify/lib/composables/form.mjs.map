{"version":3,"sources":["../../src/composables/form.ts"],"names":["getCurrentInstance","propsFactory","computed","inject","provide","ref","useProxiedModel","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","lazyValidation","readonly","modelValue","type","default","createForm","props","vm","model","isDisabled","isReadonly","isValidating","items","errorMessages","submit","e","preventDefault","results","valid","value","item","itemErrorMessages","validate","length","push","id","emit","reset","forEach","resetValidation","register","unregister","filter","useForm"],"mappings":"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","sourcesContent":["import { getCurrentInstance, propsFactory } from '@/util'\n// Utilities\nimport { computed, inject, provide, ref } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n}\n\ninterface FormValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const vm = getCurrentInstance('createForm')\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errorMessages = ref<FormValidationResult[]>([])\n\n  async function submit (e: Event) {\n    e.preventDefault()\n\n    const results = []\n    let valid = true\n\n    errorMessages.value = []\n    model.value = null\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errorMessages.value = results\n    model.value = valid\n    isValidating.value = false\n\n    vm?.emit('submit', e)\n  }\n\n  async function reset (e: Event) {\n    e.preventDefault()\n\n    items.value.forEach(item => item.reset())\n    model.value = null\n\n    vm?.emit('reset', e)\n  }\n\n  async function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errorMessages.value = []\n    model.value = null\n\n    vm?.emit('resetValidation')\n  }\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation) => {\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    submit,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"],"file":"form.mjs"}